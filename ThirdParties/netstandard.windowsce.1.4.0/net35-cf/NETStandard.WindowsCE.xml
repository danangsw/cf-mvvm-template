<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NETStandard.WindowsCE</name>
    </assembly>
    <members>
        <member name="T:System.AggregateException">
            <summary>Represents one or more errors that occur during application execution.</summary>
            <remarks>
            <see cref="T:System.AggregateException"/> is used to consolidate multiple failures into a single, throwable
            exception object.
            </remarks>
        </member>
        <member name="M:System.AggregateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class.
            </summary>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerException"/> argument
            is null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Allocates a new aggregate exception with the specified message and list of inner exceptions.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> argument is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The exception could not be deserialized correctly.</exception>
        </member>
        <member name="M:System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about
            the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that
            contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> argument is null.</exception>
        </member>
        <member name="M:System.AggregateException.GetBaseException">
            <summary>
            Returns the <see cref="T:System.AggregateException"/> that is the root cause of this exception.
            </summary>
        </member>
        <member name="P:System.AggregateException.InnerExceptions">
            <summary>
            Gets a read-only collection of the <see cref="T:System.Exception"/> instances that caused the
            current exception.
            </summary>
        </member>
        <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
            <summary>
            Invokes a handler on each <see cref="T:System.Exception"/> contained by this <see
            cref="T:System.AggregateException"/>.
            </summary>
            <param name="predicate">The predicate to execute for each exception. The predicate accepts as an
            argument the <see cref="T:System.Exception"/> to be processed and returns a Boolean to indicate
            whether the exception was handled.</param>
            <remarks>
            Each invocation of the <paramref name="predicate"/> returns true or false to indicate whether the
            <see cref="T:System.Exception"/> was handled. After all invocations, if any exceptions went
            unhandled, all unhandled exceptions will be put into a new <see cref="T:System.AggregateException"/>
            which will be thrown. Otherwise, the <see cref="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})"/> method simply returns. If any
            invocations of the <paramref name="predicate"/> throws an exception, it will halt the processing
            of any more exceptions and immediately propagate the thrown exception as-is.
            </remarks>
            <exception cref="T:System.AggregateException">An exception contained by this <see
            cref="T:System.AggregateException"/> was not handled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> argument is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.Flatten">
            <summary>
            Flattens an <see cref="T:System.AggregateException"/> instances into a single, new instance.
            </summary>
            <returns>A new, flattened <see cref="T:System.AggregateException"/>.</returns>
            <remarks>
            If any inner exceptions are themselves instances of
            <see cref="T:System.AggregateException"/>, this method will recursively flatten all of them. The
            inner exceptions returned in the new <see cref="T:System.AggregateException"/>
            will be the union of all of the the inner exceptions from exception tree rooted at the provided
            <see cref="T:System.AggregateException"/> instance.
            </remarks>
        </member>
        <member name="P:System.AggregateException.Message">
            <summary>
            Gets a message that describes the exception.
            </summary>
        </member>
        <member name="M:System.AggregateException.ToString">
            <summary>
            Creates and returns a string representation of the current <see cref="T:System.AggregateException"/>.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="P:System.AggregateException.InnerExceptionCount">
            <summary>
            This helper property is used by the DebuggerDisplay.
            
            Note that we don't want to remove this property and change the debugger display to {InnerExceptions.Count} 
            because DebuggerDisplay should be a single property access or parameterless method call, so that the debugger 
            can use a fast path without using the expression evaluator.
            
            See http://msdn.microsoft.com/en-us/library/x810d419.aspx
            </summary>
        </member>
        <member name="T:System.ArgumentException2">
            <summary>
            The ArgumentException is thrown when an argument does not meet
            the contract of the method.  Ideally it should give a meaningful error
            message describing what was wrong and which parameter is incorrect.
            </summary>
        </member>
        <member name="M:System.ArgumentException2.#ctor">
            <summary>
            Creates a new ArgumentException with its message
            string set to the empty string.
            </summary>
        </member>
        <member name="M:System.ArgumentException2.#ctor(System.String)">
            <summary>
            Creates a new ArgumentException with its message
            string set to message.
            </summary>
        </member>
        <member name="T:System.ArgumentNullException2">
            <summary>
            The ArgumentException is thrown when an argument
            is null when it shouldn't be.
            </summary>
        </member>
        <member name="M:System.ArgumentNullException2.#ctor">
            <summary>
            Creates a new ArgumentNullException with its message
            string set to a default message explaining an argument was null.
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.BlockingCollection`1">
            <summary> 
            Provides blocking and bounding capabilities for thread-safe collections that 
            implement <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>. 
            </summary>
            <remarks>
            <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/> represents a collection
            that allows for thread-safe adding and removing of data. 
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> is used as a wrapper
            for an <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/> instance, allowing
            removal attempts from the collection to block until data is available to be removed.  Similarly,
            a <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> can be created to enforce
            an upper-bound on the number of data elements allowed in the 
            <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>; addition attempts to the
            collection may then block until space is available to store the added items.  In this manner,
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> is similar to a traditional
            blocking queue data structure, except that the underlying data storage mechanism is abstracted
            away as an <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>. 
            </remarks>
            <typeparam name="T">Specifies the type of elements in the collection.</typeparam>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
            <summary>Gets the bounded capacity of this <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</summary>
            <value>The bounded capacity of this collection, or int.MaxValue if no bound was supplied.</value>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
            <summary>Gets whether this <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked as complete for adding.</summary>
            <value>Whether this collection has been marked as complete for adding.</value>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
            <summary>Gets whether this <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked as complete for adding and is empty.</summary>
            <value>Whether this collection has been marked as complete for adding and is empty.</value>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
            <summary>Gets the number of items contained in the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.</summary>
            <value>The number of items contained in the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.</value>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized.</summary>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
            <summary>Initializes a new instance of the 
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>
            class without an upper-bound.
            </summary>
            <remarks>
            The default underlying collection is a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1">ConcurrentQueue&lt;T&gt;</see>.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>
            class with the specified upper-bound.
            </summary>
            <param name="boundedCapacity">The bounded size of the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="boundedCapacity"/> is
            not a positive value.</exception>
            <remarks>
            The default underlying collection is a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1">ConcurrentQueue&lt;T&gt;</see>.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>
            class with the specified upper-bound and using the provided 
            <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/> as its underlying data store.</summary>
            <param name="collection">The collection to use as the underlying data store.</param>
            <param name="boundedCapacity">The bounded size of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="boundedCapacity"/> is not a positive value.</exception>
            <exception cref="T:System.ArgumentException">The supplied <paramref name="collection"/> contains more values 
            than is permitted by <paramref name="boundedCapacity"/>.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>
            class without an upper-bound and using the provided 
            <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/> as its underlying data store.</summary>
            <param name="collection">The collection to use as the underlying data store.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> argument is
            null.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Initialize(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32,System.Int32)">
            <summary>Initializes the BlockingCollection instance.</summary>
            <param name="collection">The collection to use as the underlying data store.</param>
            <param name="boundedCapacity">The bounded size of the collection.</param>
            <param name="collectionCount">The number of items currently in the underlying collection.</param>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
            <summary>
            Adds the item to the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item to be added to the collection. The value can be a null reference.</param>
            <exception cref="T:System.InvalidOperationException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
            <remarks>
            If a bounded capacity was specified when this instance of 
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> was initialized, 
            a call to Add may block until space is available to store the provided item.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
            <summary>
            Adds the item to the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled.
            </summary>
            <param name="item">The item to be added to the collection. The value can be a null reference.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.InvalidOperationException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
            <remarks>
            If a bounded capacity was specified when this instance of 
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> was initialized, 
            a call to <see cref="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)"/> may block until space is available to store the provided item.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
            <summary>
            Attempts to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item to be added to the collection.</param>
            <returns>true if the <paramref name="item"/> could be added; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
            <summary>
            Attempts to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item to be added to the collection.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>true if the <paramref name="item"/> could be added to the collection within 
            the alloted time; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number
            other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
            <summary>
            Attempts to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item to be added to the collection.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>true if the <paramref name="item"/> could be added to the collection within 
            the alloted time; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to add the specified item to the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled.
            </summary>
            <param name="item">The item to be added to the collection.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>true if the <paramref name="item"/> could be added to the collection within 
            the alloted time; otherwise, false.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.InvalidOperationException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddWithNoTimeValidation(`0,System.Int32,System.Threading.CancellationToken)">
            <summary>Adds an item into the underlying data store using its IProducerConsumerCollection&lt;T&gt;.Add 
            method. If a bounded capacity was specified and the collection was full, 
            this method will wait for, at most, the timeout period trying to add the item. 
            If the timeout period was exhausted before successfully adding the item this method will 
            return false.</summary>
            <param name="item">The item to be added to the collection.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the collection to accept the item,
            or Timeout.Infinite to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>False if the collection remained full till the timeout period was exhausted.True otherwise.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.InvalidOperationException">the collection has already been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">If the collection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection didn't accept the item.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
            <summary>Takes an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.</summary>
            <returns>The item removed from the collection.</returns>
            <exception cref="T:System.OperationCanceledException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> is empty and has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection was modified
            outside of this <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <remarks>A call to <see cref="M:System.Collections.Concurrent.BlockingCollection`1.Take"/> may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
            <summary>Takes an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.</summary>
            <returns>The item removed from the collection.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is
            canceled or the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> is empty and has been marked
            as complete with regards to additions.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection was modified
            outside of this <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <remarks>A call to <see cref="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)"/> may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
            <summary>
            Attempts to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item removed from the collection.</param>
            <returns>true if an item could be removed; otherwise, false.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection was modified
            outside of this <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
            <summary>
            Attempts to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item removed from the collection.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>true if an item could be removed from the collection within 
            the alloted time; otherwise, false.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number
            other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection was modified
            outside of this <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
            <summary>
            Attempts to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            </summary>
            <param name="item">The item removed from the collection.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>true if an item could be removed from the collection within 
            the alloted time; otherwise, false.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection was modified
            outside of this <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove an item from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/>.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled.
            </summary>
            <param name="item">The item removed from the collection.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>true if an item could be removed from the collection within 
            the alloted time; otherwise, false.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">The underlying collection was modified
            outside of this <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeWithNoTimeValidation(`0@,System.Int32,System.Threading.CancellationToken,System.Threading.CancellationTokenSource)">
            <summary>Takes an item from the underlying data store using its IProducerConsumerCollection&lt;T&gt;.Take 
            method. If the collection was empty, this method will wait for, at most, the timeout period (if AddingIsCompleted is false)
            trying to remove an item. If the timeout period was exhausted before successfully removing an item 
            this method will return false.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled.
            </summary>
            <param name="item">The item removed from the collection.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the collection to have an item available 
            for removal, or Timeout.Infinite to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <param name="combinedTokenSource">A combined cancellation token if created, it is only created by GetConsumingEnumerable to avoid creating the linked token 
            multiple times.</param>
            <returns>False if the collection remained empty till the timeout period was exhausted. True otherwise.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">If the collection has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
            <summary>
            Adds the specified item to any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item to be added to one of the collections.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array to which the item was added.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element, or at least one of collections has been
            marked as complete for adding.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>
            If a bounded capacity was specified when all of the
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances were initialized, 
            a call to AddToAny may block until space is available in one of the collections
            to store the provided item.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
            <summary>
            Adds the specified item to any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled. 
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item to be added to one of the collections.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array to which the item was added.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element, or at least one of collections has been
            marked as complete for adding.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>
            If a bounded capacity was specified when all of the
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances were initialized, 
            a call to AddToAny may block until space is available in one of the collections
            to store the provided item.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
            <summary>
            Attempts to add the specified item to any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item to be added to one of the collections.</param>
            <returns>The index of the collection in the <paramref name="collections"/> 
            array to which the item was added, or -1 if the item could not be added.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element, or at least one of collections has been
            marked as complete for adding.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
            <summary>
            Attempts to add the specified item to any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item to be added to one of the collections.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>The index of the collection in the <paramref name="collections"/> 
            array to which the item was added, or -1 if the item could not be added.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element, or at least one of collections has been
            marked as complete for adding.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number
            other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
            <summary>
            Attempts to add the specified item to any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item to be added to one of the collections.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>        /// <returns>The index of the collection in the <paramref name="collections"/> 
            array to which the item was added, or -1 if the item could not be added.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element, or at least one of collections has been
            marked as complete for adding.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to add the specified item to any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item to be added to one of the collections.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>        
            <returns>The index of the collection in the <paramref name="collections"/> 
            array to which the item was added, or -1 if the item could not be added.</returns>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element, or at least one of collections has been
            marked as complete for adding.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">At least one underlying collection didn't accept the item.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAnyCore(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
            <summary>Adds an item to anyone of the specified collections.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled. 
            </summary>
            <param name="collections">The collections into which the item can be added.</param>
            <param name="item">The item to be added .</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for a collection to accept the 
            operation, or -1 to wait indefinitely.</param>
            <param name="externalCancellationToken">A cancellation token to observe.</param>
            <returns>The index into collections for the collection which accepted the 
            adding of the item; -1 if the item could not be added.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentNullException">If the collections argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the collections argument is a 0-length array or contains a 
            null element. Also, if at least one of the collections has been marked complete for adds.</exception>
            <exception cref="T:System.ObjectDisposedException">If at least one of the collections has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAnyFast(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
            <summary>
            Fast path for TryAddToAny to find a non bounded collection and add the items in it
            </summary>
            <param name="collections">The collections list</param>
            <param name="item">The item to be added</param>
            <returns>The index which the item has been added, -1 if failed</returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetHandles(System.Collections.Concurrent.BlockingCollection{`0}[],System.Threading.CancellationToken,System.Boolean,System.Threading.CancellationToken[]@)">
            <summary>
            Local static method, used by TryAddTakeAny to get the wait handles for the collection, with exclude option to exclude the Completed collections
            </summary>
            <param name="collections">The blocking collections</param>
            <param name="externalCancellationToken">The original CancellationToken</param>
            <param name="isAddOperation">True if Add or TryAdd, false if Take or TryTake</param>
            <param name="cancellationTokens">Complete list of cancellationTokens to observe</param>
            <returns>The collections wait handles</returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.UpdateTimeOut(System.UInt32,System.Int32)">
            <summary>
            Helper function to measure and update the wait time
            </summary>
            <param name="startTime"> The first time (in milliseconds) observed when the wait started</param>
            <param name="originalWaitMillisecondsTimeout">The original wait timeoutout in milliseconds</param>
            <returns>The new wait time in milliseconds, -1 if the time expired</returns>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
            <summary>
            Takes an item from any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item removed from one of the collections.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array from which 
            the item was removed, or -1 if an item could not be removed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified
            outside of its <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>A call to TakeFromAny may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
            <summary>
            Takes an item from any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item removed from one of the collections.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array from which 
            the item was removed, or -1 if an item could not be removed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified
            outside of its <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of 
            62 for STA and 63 for MTA.</exception>
            <remarks>A call to TakeFromAny may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
            <summary>
            Attempts to remove an item from any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item removed from one of the collections.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array from which 
            the item was removed, or -1 if an item could not be removed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified
            outside of its <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>A call to TryTakeFromAny may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
            <summary>
            Attempts to remove an item from any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item removed from one of the collections.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>The index of the collection in the <paramref name="collections"/> array from which 
            the item was removed, or -1 if an item could not be removed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number
            other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified
            outside of its <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>A call to TryTakeFromAny may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
            <summary>
            Attempts to remove an item from any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item removed from one of the collections.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array from which 
            the item was removed, or -1 if an item could not be removed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified
            outside of its <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>A call to TryTakeFromAny may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove an item from any one of the specified
            <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled. 
            </summary>
            <param name="collections">The array of collections.</param>
            <param name="item">The item removed from one of the collections.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>The index of the collection in the <paramref name="collections"/> array from which 
            the item was removed, or -1 if an item could not be removed.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collections"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="collections"/> argument is
            a 0-length array or contains a null element.</exception>
            <exception cref="T:System.ObjectDisposedException">At least one of the <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">At least one of the underlying collections was modified
            outside of its <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count of <paramref name="collections"/> is greater than the maximum size of
            62 for STA and 63 for MTA.</exception>
            <remarks>A call to TryTakeFromAny may block until an item is available to be removed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAnyCore(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>Takes an item from anyone of the specified collections.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled. 
            </summary>
            <param name="collections">The collections from which the item can be removed.</param>
            <param name="item">The item removed and returned to the caller.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for a collection to accept the 
            operation, or -1 to wait indefinitely.</param>
            <param name="isTakeOperation">True if Take, false if TryTake.</param>
            <param name="externalCancellationToken">A cancellation token to observe.</param>
            <returns>The index into collections for the collection which accepted the 
            removal of the item; -1 if the item could not be removed.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentNullException">If the collections argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the collections argument is a 0-length array or contains a 
            null element. Also, if at least one of the collections has been marked complete for adds.</exception>
            <exception cref="T:System.ObjectDisposedException">If at least one of the collections has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAnyCoreSlow(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>Takes an item from anyone of the specified collections.
            A <see cref="T:System.OperationCanceledException"/> is thrown if the <see cref="T:System.Threading.CancellationToken"/> is
            canceled. 
            </summary>
            <param name="collections">The collections copy from which the item can be removed.</param>
            <param name="item">The item removed and returned to the caller.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for a collection to accept the 
            operation, or -1 to wait indefinitely.</param>
            <param name="isTakeOperation">True if Take, false if TryTake.</param>
            <param name="externalCancellationToken">A cancellation token to observe.</param>
            <returns>The index into collections for the collection which accepted the 
            removal of the item; -1 if the item could not be removed.</returns>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
            <exception cref="T:System.ArgumentNullException">If the collections argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the collections argument is a 0-length array or contains a 
            null element. Also, if at least one of the collections has been marked complete for adds.</exception>
            <exception cref="T:System.ObjectDisposedException">If at least one of the collections has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
            <summary>
            Marks the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instances
            as not accepting any more additions.  
            </summary>
            <remarks>
            After a collection has been marked as complete for adding, adding to the collection is not permitted 
            and attempts to remove from the collection will not wait when the collection is empty.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.CancelWaitingConsumers">
            <summary>Cancels the semaphores.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
            <summary>
            Releases resources used by the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance.
            </summary>
            <param name="disposing">Whether being disposed explicitly (true) or due to a finalizer (false).</param>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
            <summary>Copies the items from the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance into a new array.</summary>
            <returns>An array containing copies of the elements of the collection.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <remarks>
            The copied elements are not removed from the collection.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies all of the items in the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance 
            to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from 
            the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="array"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> argument is less than zero.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="index"/> argument is equal to or greater 
            than the length of the <paramref name="array"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies all of the items in the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance 
            to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from 
            the <see cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> instance. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="array"/> argument is
            null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> argument is less than zero.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="index"/> argument is equal to or greater 
            than the length of the <paramref name="array"/>, the array is multidimensional, or the type parameter for the collection 
            cannot be cast automatically to the type of the destination array.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
            <summary>Provides a consuming <see cref="T:System.Collections.Generics.IEnumerable{T}"/> for items in the collection.</summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerable{T}"/> that removes and returns items from the collection.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
            <summary>Provides a consuming <see cref="T:System.Collections.Generics.IEnumerable{T}"/> for items in the collection.
            Calling MoveNext on the returned enumerable will block if there is no data available, or will
            throw an <see cref="T:System.OperationCanceledException"/> if the <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="cancellationToken">A cancellation token to observe.</param>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerable{T}"/> that removes and returns items from the collection.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
            <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken"/> is canceled.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Provides an <see cref="T:System.Collections.Generics.IEnumerator{T}"/> for items in the collection.</summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator{T}"/> for the items in the collection.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Provides an <see cref="T:System.Collections.IEnumerator"/> for items in the collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the items in the collection.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Collections.Concurrent.BlockingCollection{T}"/> has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.ValidateCollectionsArray(System.Collections.Concurrent.BlockingCollection{`0}[],System.Boolean)">
            <summary>Centralizes the logic for validating the BlockingCollections array passed to TryAddToAny()
            and TryTakeFromAny().</summary>
            <param name="collections">The collections to/from which an item should be added/removed.</param>
            <param name="isAddOperation">Indicates whether this method is called to Add or Take.</param>
            <exception cref="T:System.ArgumentNullException">If the collections argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the collections argument is a 0-length array or contains a 
            null element. Also, if at least one of the collections has been marked complete for adds.</exception>
            <exception cref="T:System.ObjectDisposedException">If at least one of the collections has been disposed.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.ValidateTimeout(System.TimeSpan)">
            <summary>Centralizes the logic of validating the timeout input argument.</summary>
            <param name="timeout">The TimeSpan to wait for to successfully complete an operation on the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the number of milliseconds represented by the timeout 
            TimeSpan is less than 0 or is larger than Int32.MaxValue and not Timeout.Infinite</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.ValidateMillisecondsTimeout(System.Int32)">
            <summary>Centralizes the logic of validating the millisecondsTimeout input argument.</summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for to successfully complete an 
            operation on the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the number of milliseconds is less than 0 and not 
            equal to Timeout.Infinite.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollection`1.CheckDisposed">
            <summary>Throws a System.ObjectDisposedException if the collection was disposed</summary>
            <exception cref="T:System.ObjectDisposedException">If the collection has been disposed.</exception>
        </member>
        <member name="T:System.Collections.Concurrent.BlockingCollectionDebugView`1">
            <summary>A debugger view of the blocking collection that makes it simple to browse the
            collection's contents at a point in time.</summary>
            <typeparam name="T">The type of element that the BlockingCollection will hold.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.BlockingCollectionDebugView`1.#ctor(System.Collections.Concurrent.BlockingCollection{`0})">
            <summary>Constructs a new debugger view object for the provided blocking collection object.</summary>
            <param name="collection">A blocking collection to browse in the debugger.</param>
        </member>
        <member name="P:System.Collections.Concurrent.BlockingCollectionDebugView`1.Items">
            <summary>Returns a snapshot of the underlying collection's elements.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
            <summary>
            Represents a thread-safe, unordered collection of objects. 
            </summary>
            <typeparam name="T">Specifies the type of elements in the bag.</typeparam>
            <remarks>
            <para>
            Bags are useful for storing objects when ordering doesn't matter, and unlike sets, bags support
            duplicates. <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> is a thread-safe bag implementation, optimized for
            scenarios where the same thread will be both producing and consuming data stored in the bag.
            </para>
            <para>
            <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> accepts null reference (Nothing in Visual Basic) as a valid 
            value for reference types.
            </para>
            <para>
            All public and protected members of <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </para>
            </remarks>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1._locals">
            <summary>The per-bag, per-thread work-stealing queues.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1._workStealingQueues">
            <summary>The head work stealing queue in a linked list of queues.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> class.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
            <summary>
            Adds an object to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <param name="item">The object to be added to the
            <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>
            Attempts to add an object to the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <param name="item">The object to be added to the 
            <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
            <summary>
            Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <param name="result">When this method returns, <paramref name="result"/> contains the object
            removed from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> or the default value
            of <typeparamref name="T"/> if the operation failed.</param>
            <returns>true if an object was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
            <summary>
            Attempts to return an object from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> without removing it.
            </summary>
            <param name="result">When this method returns, <paramref name="result"/> contains an object from
            the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> or the default value of
            <typeparamref name="T"/> if the operation failed.</param>
            <returns>true if and object was returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetCurrentThreadWorkStealingQueue(System.Boolean)">
            <summary>Gets the work-stealing queue data structure for the current thread.</summary>
            <param name="forceCreate">Whether to create a new queue if this thread doesn't have one.</param>
            <returns>The local queue object, or null if the thread doesn't have one.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetUnownedWorkStealingQueue">
            <summary>
            Try to reuse an unowned queue.  If a thread interacts with the bag and then exits,
            the bag purposefully retains its queue, as it contains data associated with the bag.
            </summary>
            <returns>The queue object, or null if no unowned queue could be gathered.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TrySteal(`0@,System.Boolean)">
            <summary>Local helper method to steal an item from any other non empty thread.</summary>
            <param name="result">To receive the item retrieved from the bag</param>
            <param name="take">Whether to remove or peek.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryStealFromTo(System.Collections.Concurrent.ConcurrentBag{`0}.WorkStealingQueue,System.Collections.Concurrent.ConcurrentBag{`0}.WorkStealingQueue,`0@,System.Boolean)">
            <summary>
            Attempts to steal from each queue starting from <paramref name="startInclusive"/> to <paramref name="endExclusive"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> elements to an existing
            one-dimensional <see cref="T:System.Array">Array</see>, starting at the specified array
            index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the
            destination of the elements copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>. The <see
            cref="T:System.Array">Array</see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the
            length of the <paramref name="array"/>
            -or- the number of elements in the source <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> is greater than the available space from
            <paramref name="index"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyFromEachQueueToArray(`0[],System.Int32)">
            <summary>Copies from each queue to the target array, starting at the specified index.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see
            cref="T:System.Array"/>, starting at a particular
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the
            destination of the elements copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>. The <see
            cref="T:System.Array">Array</see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. -or-
            <paramref name="array"/> does not have zero-based indexing. -or-
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is
            greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>. -or- The type of the source <see
            cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
            <summary>
            Copies the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> elements to a new array.
            </summary>
            <returns>A new array containing a snapshot of elements copied from the <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Clear">
            <summary>
            Removes all values from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <returns>An enumerator for the contents of the <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents
            of the bag.  It does not reflect any updates to the collection after 
            <see cref="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator"/> was called.  The enumerator is safe to use
            concurrently with reads from and writes to the bag.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <returns>An enumerator for the contents of the <see
            cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</returns>
            <remarks>
            The items enumerated represent a moment-in-time snapshot of the contents
            of the bag.  It does not reflect any update to the collection after 
            <see cref="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</value>
            <remarks>
            The count returned represents a moment-in-time snapshot of the contents
            of the bag.  It does not reflect any updates to the collection after 
            <see cref="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.DangerousCount">
            <summary>Gets the number of items stored in the bag.</summary>
            <remarks>Only provides a stable result when the bag is frozen.</remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> is empty.
            </summary>
            <value>true if the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> is empty; otherwise, false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is
            synchronized with the SyncRoot.
            </summary>
            <value>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            with the SyncRoot; otherwise, false. For <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>, this property always
            returns false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.GlobalQueuesLock">
            <summary>Global lock used to synchronize the queues pointer and all bag-wide operations (e.g. ToArray, Count, etc.).</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.FreezeBag(System.Boolean@)">
            <summary>"Freezes" the bag, such that no concurrent operations will be mutating the bag when it returns.</summary>
            <param name="lockTaken">true if the global lock was taken; otherwise, false.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.UnfreezeBag(System.Boolean)">
            <summary>"Unfreezes" a bag frozen with <see cref="M:System.Collections.Concurrent.ConcurrentBag`1.FreezeBag(System.Boolean@)"/>.</summary>
            <param name="lockTaken">The result of the <see cref="M:System.Collections.Concurrent.ConcurrentBag`1.FreezeBag(System.Boolean@)"/> method.</param>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue">
            <summary>Provides a work-stealing queue data structure stored per thread.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.InitialSize">
            <summary>Initial size of the queue's array.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.StartIndex">
            <summary>Starting index for the head and tail indices.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._headIndex">
            <summary>Head index from which to steal.  This and'd with the <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._mask"/> is the index into <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._array"/>.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._tailIndex">
            <summary>Tail index at which local pushes/pops happen. This and'd with the <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._mask"/> is the index into <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._array"/>.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._array">
            <summary>The array storing the queue's data.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._mask">
            <summary>Mask and'd with <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._headIndex"/> and <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._tailIndex"/> to get an index into <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._array"/>.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._addTakeCount">
            <summary>Numbers of elements in the queue from the local perspective; needs to be combined with <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._stealCount"/> to get an actual Count.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._stealCount">
            <summary>Number of steals; needs to be combined with <see cref="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._addTakeCount"/> to get an actual Count.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._currentOp">
            <summary>The current queue operation. Used to quiesce before performing operations from one thread onto another.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._frozen">
            <summary>true if this queue's lock is held as part of a global freeze.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._nextQueue">
            <summary>Next queue in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>'s set of thread-local queues.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue._ownerThreadId">
            <summary>Thread ID that owns this queue.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.#ctor(System.Collections.Concurrent.ConcurrentBag{`0}.WorkStealingQueue)">
            <summary>Initialize the WorkStealingQueue.</summary>
            <param name="nextQueue">The next queue in the linked list of work-stealing queues.</param>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.IsEmpty">
            <summary>Gets whether the queue is empty.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.LocalPush(`0)">
            <summary>
            Add new item to the tail of the queue.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.LocalClear">
            <summary>Clears the contents of the local queue.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.TryLocalPop(`0@)">
            <summary>Remove an item from the tail of the queue.</summary>
            <param name="result">The removed item</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.TryLocalPeek(`0@)">
            <summary>Peek an item from the tail of the queue.</summary>
            <param name="result">the peeked item</param>
            <returns>True if succeeded, false otherwise</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.TrySteal(`0@,System.Boolean)">
            <summary>Steal an item from the head of the queue.</summary>
            <param name="result">the removed item</param>
            <param name="take">true to take the item; false to simply peek at it</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.DangerousCopyTo(`0[],System.Int32)">
            <summary>Copies the contents of this queue to the target array starting at the specified index.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentBag`1.WorkStealingQueue.DangerousCount">
            <summary>Gets the total number of items in the queue.</summary>
            <remarks>
            This is not thread safe, only providing an accurate result either from the owning
            thread while its lock is held or from any thread while the bag is frozen.
            </remarks>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentBag`1.Operation">
            <summary>Lock-free operations performed on a queue.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentBag`1.Enumerator">
            <summary>Provides an enumerator for the bag.</summary>
            <remarks>
            The original implementation of ConcurrentBag used a <see cref="T:System.Collections.Generic.List`1"/> as part of
            the GetEnumerator implementation.  That list was then changed to be an array, but array's
            GetEnumerator has different behavior than does list's, in particular for the case where
            Current is used after MoveNext returns false.  To avoid any concerns around compatibility,
            we use a custom enumerator rather than just returning array's. This enumerator provides
            the essential elements of both list's and array's enumerators.
            </remarks>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
            <summary>
            Represents a thread-safe collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <remarks>
            All public and protected members of
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> are thread-safe and may be used
            concurrently from multiple threads.
            </remarks>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2.Tables">
             <summary>
             Tables that hold the internal state of the ConcurrentDictionary
            
             Wrapping the three tables in a single object allows us to atomically
             replace all tables at once.
             </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.IsValueWriteAtomic">
            <summary>
            Determines whether type TValue can be written atomically
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            class that is empty, has the default concurrency level, has the default initial capacity, and
            uses the default comparer for the key type.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            class that is empty, has the specified concurrency level and capacity, and uses the default
            comparer for the key type.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="concurrencyLevel"/> is
            less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity"/> is less than
            0.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            class that contains elements copied from the specified
            <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}"/>, has the default concurrency
            level, has the default initial capacity, and uses the default comparer for the key type.
            </summary>
            <param name="collection">The
            <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to
            the new
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> contains one or more
            duplicate keys.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            class that is empty, has the specified concurrency level and capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>
            implementation to use when comparing keys.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            class that contains elements copied from the specified
            <see cref="T:System.Collections.IEnumerable"/>, has the default concurrency level, has the default
            initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="collection">The
            <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to
            the new
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>
            implementation to use when comparing keys.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference
            (Nothing in Visual Basic). -or-
            <paramref name="comparer"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> 
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"/>, 
            has the specified concurrency level, has the specified initial capacity, and uses the specified 
            <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the 
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> concurrently.</param>
            <param name="collection">The <see cref="T:System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}"/> whose elements are copied to the new 
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/> implementation to use 
            when comparing keys.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference (Nothing in Visual Basic).
            -or-
            <paramref name="comparer"/> is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="concurrencyLevel"/> is less than 1.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            class that is empty, has the specified concurrency level, has the specified initial capacity, and
            uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{TKey}"/>
            implementation to use when comparing keys.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="concurrencyLevel"/> is less than 1. -or-
            <paramref name="capacity"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add the specified key and value to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be a null reference (Nothing
            in Visual Basic) for reference types.</param>
            <returns>true if the key/value pair was added to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            contains too many elements.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> contains the specified
            key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> contains an element with
            the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Attempts to remove and return the value with the specified key from the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="value">When this method returns, <paramref name="value"/> contains the object removed from the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> or the default value of <typeparamref
            name="TValue"/>
            if the operation failed.</param>
            <returns>true if an object was removed successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemoveInternal(`0,`1@,System.Boolean,`1)">
            <summary>
            Removes the specified key from the dictionary if it exists and returns its associated value.
            If matchValue flag is set, the key will be removed only if is associated with a particular
            value.
            </summary>
            <param name="key">The key to search for and remove if it exists.</param>
            <param name="value">The variable into which the removed value, if found, is stored.</param>
            <param name="matchValue">Whether removal of the key is conditional on its value.</param>
            <param name="oldValue">The conditional value to compare against if <paramref name="matchValue"/> is true</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, <paramref name="value"/> contains the object from
            the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> with the specified key or the default value of
            <typeparamref name="TValue"/>, if the operation failed.</param>
            <returns>true if the key was found in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>;
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Compares the existing value for the specified key with a specified value, and if they're equal,
            updates the key with a third value.
            </summary>
            <param name="key">The key whose value is compared with <paramref name="comparisonValue"/> and
            possibly replaced.</param>
            <param name="newValue">The value that replaces the value of the element with <paramref
            name="key"/> if the comparison results in equality.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with
            <paramref name="key"/>.</param>
            <returns>true if the value with <paramref name="key"/> was equal to <paramref
            name="comparisonValue"/> and replaced with <paramref name="newValue"/>; otherwise,
            false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null
            reference.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection"/> to an array of
            type <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}"/>, starting at the
            specified array index.
            </summary>
            <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}"/>
            that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}"/> elements copied from the
            <see cref="T:System.Collections.ICollection"/>. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than
            the length of the <paramref name="array"/>. -or- The number of elements in the source
            <see cref="T:System.Collections.ICollection"/>
            is greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
            <summary>
            Copies the key and value pairs stored in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> to a
            new array.
            </summary>
            <returns>A new array containing a snapshot of key and value pairs copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.CopyToPairs(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy dictionary contents to an array - shared implementation between ToArray and CopyTo.
            
            Important: the caller must hold all locks in m_locks before calling CopyToPairs.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.CopyToEntries(System.Collections.DictionaryEntry[],System.Int32)">
            <summary>
            Copy dictionary contents to an array - shared implementation between ToArray and CopyTo.
            
            Important: the caller must hold all locks in m_locks before calling CopyToEntries.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.CopyToObjects(System.Object[],System.Int32)">
            <summary>
            Copy dictionary contents to an array - shared implementation between ToArray and CopyTo.
            
            Important: the caller must hold all locks in m_locks before calling CopyToObjects.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</summary>
            <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</returns>
            <remarks>
            The enumerator returned from the dictionary is safe to use concurrently with
            reads and writes to the dictionary, however it does not represent a moment-in-time snapshot
            of the dictionary.  The contents exposed through the enumerator may contain modifications
            made to the dictionary after <see cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAddInternal(`0,`1,System.Boolean,System.Boolean,`1@)">
            <summary>
            Shared internal implementation for inserts and updates.
            If key exists, we always return false; and if updateIfExists == true we force update with value;
            If key doesn't exist, we always add value and return true;
            </summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, a get
            operation throws a
            <see cref="T:Sytem.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new
            element with the specified key.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
            <paramref name="key"/>
            does not exist in the collection.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <value>The number of key/value pairs contained in the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</value>
            <remarks>Count has snapshot semantics and represents the number of items in the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            at the moment when Count was accessed.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> 
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the
            key is already in the dictionary, or the new value for the key as returned by valueFactory
            if the key was not in the dictionary.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> 
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">the value to be added, if the key does not already exist</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the 
            key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key does not already 
            exist, or updates a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key 
            already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValueFactory">The function used to generate a value for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key
            based on the key's existing value</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="addValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The new value for the key.  This will be either be the result of addValueFactory (if the key was 
            absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key does not already 
            exist, or updates a key/value pair in the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key 
            already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValue">The value to be added for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on 
            the key's existing value</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The new value for the key.  This will be either be the result of addValueFactory (if the key was 
            absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> is empty.
            </summary>
            <value>true if the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> is empty; otherwise,
            false.</value>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
            Adds the specified key and value to the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            Removes the element with the specified key from the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully remove; otherwise false. This method also returns
            false if
            <paramref name="key"/> was not found in the original
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TKey}"/> containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable{TKey}"/> containing the keys of
            the <see cref="T:System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable{TKey}"/> containing the keys of
            the <see cref="T:System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}"/>.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TValue}"/> containing the values in
            the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable{TValue}"/> containing the values
            in the <see cref="T:System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable{TValue}"/> containing the
            values in the <see cref="T:System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}"/>.</value>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection{TValue}"/>
            with the specified key.
            </summary>
            <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}"/>
            structure representing the key and value to add to the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="keyValuePair"/> of <paramref
            name="keyValuePair"/> is null.</exception>
            <exception cref="T:System.OverflowException">The
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>
            contains too many elements.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/></exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection{TKey,TValue}"/>
            contains a specific key and value.
            </summary>
            <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}"/>
            structure to locate in the
            <see cref="T:System.Collections.Generic.ICollection{TValue}"/>.</param>
            <returns>true if the <paramref name="keyValuePair"/> is found in the
            <see cref="T:System.Collections.Generic.ICollection{TKey,TValue}"/>; otherwise, false.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.ICollection{TKey,TValue}"/> is
            read-only; otherwise, false. For
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>, this property always returns
            false.</value>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="keyValuePair">The
            <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}"/>
            structure representing the key and value to remove from the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.</param>
            <returns>true if the key and value represented by <paramref name="keyValuePair"/> is successfully
            found and removed; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The Key property of <paramref
            name="keyValuePair"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</summary>
            <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.</returns>
            <remarks>
            The enumerator returned from the dictionary is safe to use concurrently with
            reads and writes to the dictionary, however it does not represent a moment-in-time snapshot
            of the dictionary.  The contents exposed through the enumerator may contain modifications
            made to the dictionary after <see cref="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key.</param>
            <param name="value">The object to use as the value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> is of a type that is not assignable to the key type <typeparamref
            name="TKey"/> of the <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>. -or-
            <paramref name="value"/> is of a type that is not assignable to <typeparamref name="TValue"/>,
            the type of values in the <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.
            -or- A value with the same key already exists in the
            <see cref="T:System.Collections.Generic.Dictionary{TKey,TValue}"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Gets whether the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/> contains an
            element with the specified key.
            </summary>
            <param name="key">The key to locate in the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/> contains
            an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>Provides an <see cref="T:System.Collections.Generics.IDictionaryEnumerator"/> for the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.</summary>
            <returns>An <see cref="T:System.Collections.Generics.IDictionaryEnumerator"/> for the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/> has a fixed size.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/> has a
            fixed size; otherwise, false. For
            <see cref="T:System.Collections.Generic.ConcurrentDictionary{TKey,TValue}"/>, this property always
            returns false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/> is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/> is
            read-only; otherwise, false. For
            <see cref="T:System.Collections.Generic.ConcurrentDictionary{TKey,TValue}"/>, this property always
            returns false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the keys of the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the keys of the
            <see cref="T:System.Collections.Generic.IDictionary{TKey,TValue}"/>.</value>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values in the
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the values in the
            <see cref="T:System.Collections.IDictionary"/>.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key, or a null reference (Nothing in Visual Basic)
            if <paramref name="key"/> is not in the dictionary or <paramref name="key"/> is of a type that is
            not assignable to the key type <typeparamref name="TKey"/> of the
            <see cref="T:System.Collections.Generic.ConcurrentDictionary{TKey,TValue}"/>.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">
            A value is being assigned, and <paramref name="key"/> is of a type that is not assignable to the
            key type <typeparamref name="TKey"/> of the
            <see cref="T:System.Collections.Generic.ConcurrentDictionary{TKey,TValue}"/>. -or- A value is being
            assigned, and <paramref name="key"/> is of a type that is not assignable to the value type
            <typeparamref name="TValue"/> of the
            <see cref="T:System.Collections.Generic.ConcurrentDictionary{TKey,TValue}"/>
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an array, starting
            at the specified array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"/>. The array must have zero-based
            indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than
            the length of the <paramref name="array"/>. -or- The number of elements in the source
            <see cref="T:System.Collections.ICollection"/>
            is greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is
            synchronized with the SyncRoot.
            </summary>
            <value>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            (thread safe); otherwise, false. For
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary{TKey,TValue}"/>, this property always
            returns false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GrowTable(System.Collections.Concurrent.ConcurrentDictionary{`0,`1}.Tables,System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32)">
            <summary>
            Replaces the bucket table with a larger one. To prevent multiple threads from resizing the
            table as a result of a race condition, the Tables instance that holds the table of buckets deemed too
            small is passed in as an argument to GrowTable(). GrowTable() obtains a lock, and then checks
            the Tables instance has been replaced in the meantime or not. 
            The <paramref name="rehashCount"/> will be used to ensure that we don't do two subsequent resizes
            because of a collision
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetBucketAndLockNo(System.Int32,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Computes the bucket and lock number for a particular key. 
            </summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.DefaultConcurrencyLevel">
            <summary>
            The number of concurrent writes for which to optimize by default.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AcquireAllLocks(System.Int32@)">
            <summary>
            Acquires all locks for this hash table, and increments locksAcquired by the number
            of locks that were successfully acquired. The locks are acquired in an increasing
            order.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AcquireLocks(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Acquires a contiguous range of locks for this hash table, and increments locksAcquired
            by the number of locks that were successfully acquired. The locks are acquired in an
            increasing order.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ReleaseLocks(System.Int32,System.Int32)">
            <summary>
            Releases a contiguous range of locks.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetKeys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetValues">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Assert(System.Boolean)">
            <summary>
            A helper method for asserts.
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2.Node">
            <summary>
            A node in a singly-linked list representing a particular hash table bucket.
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2.DictionaryEnumerator">
            <summary>
            A private class to represent enumeration over the dictionary that implements the 
            IDictionaryEnumerator interface.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get the data array to be serialized
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct the dictionary from a previously serialized one
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
            <summary>
            Represents a thread-safe first-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
            <remarks>
            All public and protected members of <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </remarks>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.InitialSegmentLength">
            <summary>Initial length of the segments used in the queue.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.MaxSegmentLength">
            <summary>
            Maximum length of the segments used in the queue.  This is a somewhat arbitrary limit:
            larger means that as long as we don't exceed the size, we avoid allocating more segments,
            but if we do exceed it, then the segment becomes garbage.
            </summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1._crossSegmentLock">
            <summary>
            Lock used to protect cross-segment operations, including any updates to <see cref="F:System.Collections.Concurrent.ConcurrentQueue`1._tail"/> or <see cref="F:System.Collections.Concurrent.ConcurrentQueue`1._head"/>
            and any operations that need to get a consistent view of them.
            </summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1._tail">
            <summary>The current tail segment.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1._head">
            <summary>The current head segment.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.InitializeFromCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the contents of the queue from an existing collection.
            </summary>
            <param name="collection">A collection from which to copy elements.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> class that contains elements copied
            from the specified collection.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> argument is null.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see
            cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the
            elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>. <paramref name="array"/> must have
            zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. -or-
            <paramref name="array"/> does not have zero-based indexing. -or-
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is
            greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>. -or- The type of the source <see
            cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is
            synchronized with the SyncRoot.
            </summary>
            <value>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            with the SyncRoot; otherwise, false. For <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, this property always
            returns false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>
            Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>. The value can be a null
            reference (Nothing in Visual Basic) for reference types.
            </param>
            <returns>true if the object was added successfully; otherwise, false.</returns>
            <remarks>For <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, this operation will always add the object to the
            end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>
            and return true.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
            <summary>
            Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, <paramref name="item"/> contains the
            object removed. If no object was available to be removed, the value is unspecified.
            </param>
            <returns>true if an element was removed and returned successfully; otherwise, false.</returns>
            <remarks>For <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>, this operation will attempt to remove the object
            from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> is empty.
            </summary>
            <value>true if the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> is empty; otherwise, false.</value>
            <remarks>
            For determining whether the collection contains any items, use of this property is recommended
            rather than retrieving the number of items from the <see cref="P:System.Collections.Concurrent.ConcurrentQueue`1.Count"/> property and comparing it
            to 0.  However, as this collection is intended to be accessed concurrently, it may be the case
            that another thread will modify the collection after <see cref="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty"/> returns, thus invalidating
            the result.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
            <summary>Copies the elements stored in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> to a new array.</summary>
            <returns>A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.</returns>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.</value>
            <remarks>
            For determining whether the collection contains any items, use of the <see cref="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty"/>
            property is recommended rather than retrieving the number of items from the <see cref="P:System.Collections.Concurrent.ConcurrentQueue`1.Count"/>
            property and comparing it to 0.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetCount(System.Collections.Concurrent.ConcurrentQueue{`0}.Segment,System.Int32,System.Int32)">
            <summary>Computes the number of items in a segment based on a fixed head and tail in that segment.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetCount(System.Collections.Concurrent.ConcurrentQueue{`0}.Segment,System.Int32,System.Collections.Concurrent.ConcurrentQueue{`0}.Segment,System.Int32)">
            <summary>Gets the number of items in snapped region.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> elements to an existing one-dimensional <see
            cref="T:System.Array">Array</see>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the
            destination of the elements copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>. The <see cref="T:System.Array">Array</see> must have zero-based
            indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the
            length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> is greater than the
            available space from <paramref name="index"/> to the end of the destination <paramref
            name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.</summary>
            <returns>An enumerator for the contents of the <see
            cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents
            of the queue.  It does not reflect any updates to the collection after 
            <see cref="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator"/> was called.  The enumerator is safe to use
            concurrently with reads from and writes to the queue.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.SnapForObservation(System.Collections.Concurrent.ConcurrentQueue{`0}.Segment@,System.Int32@,System.Collections.Concurrent.ConcurrentQueue{`0}.Segment@,System.Int32@)">
            <summary>
            Gets the head and tail information of the current contents of the queue.
            After this call returns, the specified region can be enumerated any number
            of times and will not change.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue{`0}.Segment,System.Int32)">
            <summary>Gets the item stored in the <paramref name="i"/>th entry in <paramref name="segment"/>.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.RoundUpToPowerOf2(System.Int32)">
            <summary>Round the specified value up to the next power of 2, if it isn't one already.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
            <summary>Adds an object to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.</summary>
            <param name="item">
            The object to add to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            The value can be a null reference (Nothing in Visual Basic) for reference types.
            </param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.EnqueueSlow(`0)">
            <summary>Adds to the end of the queue, adding a new segment if necessary.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to remove and return the object at the beginning of the <see
            cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
            <param name="result">
            When this method returns, if the operation was successful, <paramref name="result"/> contains the
            object removed. If no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the beginning of the
            <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeueSlow(`0@)">
            <summary>Tries to dequeue an item, removing empty segments as needed.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>
            without removing it.
            </summary>
            <param name="result">
            When this method returns, <paramref name="result"/> contains an object from
            the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> or default(T)
            if the operation failed.
            </param>
            <returns>true if and object was returned successfully; otherwise, false.</returns>
            <remarks>
            For determining whether the collection contains any items, use of the <see cref="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty"/>
            property is recommended rather than peeking.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@,System.Boolean)">
            <summary>Attempts to retrieve the value for the first element in the queue.</summary>
            <param name="result">The value of the first element, if found.</param>
            <param name="resultUsed">true if the result is neede; otherwise false if only the true/false outcome is needed.</param>
            <returns>true if an element was found; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentQueue`1.Segment">
            <summary>
            Provides a multi-producer, multi-consumer thread-safe bounded segment.  When the queue is full,
            enqueues fail and return false.  When the queue is empty, dequeues fail and return null.
            These segments are linked together to form the unbounded <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>. 
            </summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._slots">
            <summary>The array of items in this queue.  Each slot contains the item in that slot and its "sequence number".</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._slotsMask">
            <summary>Mask for quickly accessing a position within the queue's array.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._headAndTail">
            <summary>The head and tail positions, with padding to help avoid false sharing contention.</summary>
            <remarks>Dequeuing happens from the head, enqueuing happens at the tail.</remarks>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._preservedForObservation">
            <summary>Indicates whether the segment has been marked such that dequeues don't overwrite the removed data.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._frozenForEnqueues">
            <summary>Indicates whether the segment has been marked such that no additional items may be enqueued.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._nextSegment">
            <summary>The segment following this one in the queue, or null if this segment is the last in the queue.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Segment.#ctor(System.Int32)">
            <summary>Creates the segment.</summary>
            <param name="boundedLength">
            The maximum number of elements the segment can contain.  Must be a power of 2.
            </param>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Segment.Capacity">
            <summary>Gets the number of elements this segment can store.</summary>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Segment.FreezeOffset">
            <summary>Gets the "freeze offset" for this segment.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Segment.EnsureFrozenForEnqueues">
            <summary>
            Ensures that the segment will not accept any subsequent enqueues that aren't already underway.
            </summary>
            <remarks>
            When we mark a segment as being frozen for additional enqueues,
            we set the <see cref="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment._frozenForEnqueues"/> bool, but that's mostly
            as a small helper to avoid marking it twice.  The real marking comes
            by modifying the Tail for the segment, increasing it by this
            <see cref="P:System.Collections.Concurrent.ConcurrentQueue`1.Segment.FreezeOffset"/>.  This effectively knocks it off the
            sequence expected by future enqueuers, such that any additional enqueuer
            will be unable to enqueue due to it not lining up with the expected
            sequence numbers.  This value is chosen specially so that Tail will grow
            to a value that maps to the same slot but that won't be confused with
            any other enqueue/dequeue sequence number.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Segment.TryDequeue(`0@)">
            <summary>Tries to dequeue an element from the queue.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Segment.TryPeek(`0@,System.Boolean)">
            <summary>Tries to peek at an element from the queue, without removing it.</summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Segment.TryEnqueue(`0)">
            <summary>
            Attempts to enqueue the item.  If successful, the item will be stored
            in the queue and true will be returned; otherwise, the item won't be stored, and false
            will be returned.
            </summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentQueue`1.Segment.Slot">
            <summary>Represents a slot in the queue.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment.Slot.Item">
            <summary>The item.</summary>
        </member>
        <member name="F:System.Collections.Concurrent.ConcurrentQueue`1.Segment.Slot.SequenceNumber">
            <summary>The sequence number for this slot, used to synchronize between enqueuers and dequeuers.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.PaddedHeadAndTail">
            <summary>Padded head and tail indices, to avoid false sharing between producers and consumers.</summary>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
            <summary>
            Represents a thread-safe last-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the stack.</typeparam>
            <remarks>
            All public and protected members of <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </remarks>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentStack`1.Node">
            <summary>
            A simple (internal) node type used to store elements of concurrent stacks and queues.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Node.#ctor(`0)">
            <summary>
            Constructs a new node with the specified value and no next node.
            </summary>
            <param name="value">The value of the node.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            class.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            class that contains elements copied from the specified collection
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> argument is
            null.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.InitializeFromCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the contents of the stack from an existing collection.
            </summary>
            <param name="collection">A collection from which to copy elements.</param>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> is empty.
            </summary>
            <value>true if the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> is empty; otherwise, false.</value>
            <remarks>
            For determining whether the collection contains any items, use of this property is recommended
            rather than retrieving the number of items from the <see cref="P:System.Collections.Concurrent.ConcurrentStack`1.Count"/> property and comparing it
            to 0.  However, as this collection is intended to be accessed concurrently, it may be the case
            that another thread will modify the collection after <see cref="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty"/> returns, thus invalidating
            the result.
            </remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</value>
            <remarks>
            For determining whether the collection contains any items, use of the <see cref="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty"/>
            property is recommended rather than retrieving the number of items from the <see cref="P:System.Collections.Concurrent.ConcurrentStack`1.Count"/>
            property and comparing it to 0.
            </remarks>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is
            synchronized with the SyncRoot.
            </summary>
            <value>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            with the SyncRoot; otherwise, false. For <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, this property always
            returns false.</value>
        </member>
        <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported</exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see
            cref="T:System.Array"/>, starting at a particular
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>. The <see cref="T:System.Array"/> must
            have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. -or-
            <paramref name="array"/> does not have zero-based indexing. -or-
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is
            greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>. -or- The type of the source <see
            cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> elements to an existing one-dimensional <see
            cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the
            <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>. The <see cref="T:System.Array"/> must have zero-based
            indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the
            length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> is greater than the
            available space from <paramref name="index"/> to the end of the destination <paramref
            name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
            <summary>
            Inserts an object at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </summary>
            <param name="item">The object to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>. The value can be
            a null reference (Nothing in Visual Basic) for reference types.
            </param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
            <summary>
            Inserts multiple objects at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> atomically.
            </summary>
            <param name="items">The objects to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <remarks>
            When adding multiple items to the stack, using PushRange is a more efficient
            mechanism than using <see cref="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)"/> one item at a time.  Additionally, PushRange
            guarantees that all of the elements will be added atomically, meaning that no other threads will
            be able to inject elements between the elements being pushed.  Items at lower indices in
            the <paramref name="items"/> array will be pushed before items at higher indices.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
            <summary>
            Inserts multiple objects at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> atomically.
            </summary>
            <param name="items">The objects to push onto the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</param>
            <param name="startIndex">The zero-based offset in <paramref name="items"/> at which to begin
            inserting elements onto the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</param>
            <param name="count">The number of elements to be inserted onto the top of the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> or <paramref
            name="count"/> is negative. Or <paramref name="startIndex"/> is greater than or equal to the length 
            of <paramref name="items"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="startIndex"/> + <paramref name="count"/> is
            greater than the length of <paramref name="items"/>.</exception>
            <remarks>
            When adding multiple items to the stack, using PushRange is a more efficient
            mechanism than using <see cref="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)"/> one item at a time. Additionally, PushRange
            guarantees that all of the elements will be added atomically, meaning that no other threads will
            be able to inject elements between the elements being pushed. Items at lower indices in the
            <paramref name="items"/> array will be pushed before items at higher indices.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushCore(System.Collections.Concurrent.ConcurrentStack{`0}.Node,System.Collections.Concurrent.ConcurrentStack{`0}.Node)">
            <summary>
            Push one or many nodes into the stack, if head and tails are equal then push one node to the stack other wise push the list between head
            and tail to the stack
            </summary>
            <param name="head">The head pointer to the new list</param>
            <param name="tail">The tail pointer to the new list</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ValidatePushPopRangeInput(`0[],System.Int32,System.Int32)">
            <summary>
            Local helper function to validate the Pop Push range methods input
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>
            Attempts to add an object to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>.
            </summary>
            <param name="item">The object to add to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>. The value can be a null
            reference (Nothing in Visual Basic) for reference types.
            </param>
            <returns>true if the object was added successfully; otherwise, false.</returns>
            <remarks>For <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, this operation
            will always insert the object onto the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            and return true.</remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
            <summary>
            Attempts to return an object from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            without removing it.
            </summary>
            <param name="result">When this method returns, <paramref name="result"/> contains an object from
            the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack{T}"/> or an
            unspecified value if the operation failed.</param>
            <returns>true if and object was returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
            <summary>
            Attempts to pop and return the object at the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </summary>
            <param name="result">
            When this method returns, if the operation was successful, <paramref name="result"/> contains the
            object removed. If no object was available to be removed, the value is unspecified.
            </param>
            <returns>true if an element was removed and returned from the top of the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
            <summary>
            Attempts to pop and return multiple objects from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            atomically.
            </summary>
            <param name="items">
            The <see cref="T:System.Array"/> to which objects popped from the top of the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> will be added.
            </param>
            <returns>The number of objects successfully popped from the top of the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> and inserted in
            <paramref name="items"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null argument (Nothing
            in Visual Basic).</exception>
            <remarks>
            When popping multiple items, if there is little contention on the stack, using
            TryPopRange can be more efficient than using <see cref="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)"/>
            once per item to be removed.  Nodes fill the <paramref name="items"/>
            with the first node to be popped at the startIndex, the second node to be popped
            at startIndex + 1, and so on.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
            <summary>
            Attempts to pop and return multiple objects from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>
            atomically.
            </summary>
            <param name="items">
            The <see cref="T:System.Array"/> to which objects popped from the top of the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> will be added.
            </param>
            <param name="startIndex">The zero-based offset in <paramref name="items"/> at which to begin
            inserting elements from the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</param>
            <param name="count">The number of elements to be popped from top of the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> and inserted into <paramref name="items"/>.</param>
            <returns>The number of objects successfully popped from the top of 
            the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> and inserted in <paramref name="items"/>.</returns>        
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> or <paramref
            name="count"/> is negative. Or <paramref name="startIndex"/> is greater than or equal to the length 
            of <paramref name="items"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="startIndex"/> + <paramref name="count"/> is
            greater than the length of <paramref name="items"/>.</exception>
            <remarks>
            When popping multiple items, if there is little contention on the stack, using
            TryPopRange can be more efficient than using <see cref="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)"/>
            once per item to be removed.  Nodes fill the <paramref name="items"/>
            with the first node to be popped at the startIndex, the second node to be popped
            at startIndex + 1, and so on.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopCore(`0@)">
            <summary>
            Local helper function to Pop an item from the stack, slow path
            </summary>
            <param name="result">The popped item</param>
            <returns>True if succeeded, false otherwise</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopCore(System.Int32,System.Collections.Concurrent.ConcurrentStack{`0}.Node@)">
            <summary>
            Slow path helper for TryPop. This method assumes an initial attempt to pop an element
            has already occurred and failed, so it begins spinning right away.
            </summary>
            <param name="count">The number of items to pop.</param>
            <param name="poppedHead">
            When this method returns, if the pop succeeded, contains the removed object. If no object was
            available to be removed, the value is unspecified. This parameter is passed uninitialized.
            </param>
            <returns>The number of objects successfully popped from the top of
            the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyRemovedItems(System.Collections.Concurrent.ConcurrentStack{`0}.Node,`0[],System.Int32,System.Int32)">
            <summary>
            Local helper function to copy the popped elements into a given collection
            </summary>
            <param name="head">The head of the list to be copied</param>
            <param name="collection">The collection to place the popped items in</param>
            <param name="startIndex">the beginning of index of where to place the popped items</param>
            <param name="nodesCount">The number of nodes.</param>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
            <summary>
            Attempts to remove and return an object from the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection{T}"/>.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, <paramref name="item"/> contains the
            object removed. If no object was available to be removed, the value is unspecified.
            </param>
            <returns>true if an element was removed and returned successfully; otherwise, false.</returns>
            <remarks>For <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>, this operation will attempt to pope the object at
            the top of the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
            <summary>
            Copies the items stored in the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/> to a new array.
            </summary>
            <returns>A new array containing a snapshot of elements copied from the <see
            cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToList">
            <summary>
            Returns an array containing a snapshot of the list's contents, using
            the target list node as the head of a region in the list.
            </summary>
            <returns>A list of the stack's contents.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToList(System.Collections.Concurrent.ConcurrentStack{`0}.Node)">
            <summary>
            Returns an array containing a snapshot of the list's contents starting at the specified node.
            </summary>
            <returns>A list of the stack's contents starting at the specified node.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents
            of the stack.  It does not reflect any updates to the collection after 
            GetEnumerator was called.  The enumerator is safe to use
            concurrently with reads from and writes to the stack.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through
            the collection.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents of the stack. It does not
            reflect any updates to the collection after
            GetEnumerator was called. The enumerator is safe to use concurrently with reads
            from and writes to the stack.
            </remarks>
        </member>
        <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
            <summary>
            Defines methods to manipulate thread-safe collections intended for producer/consumer usage.
            </summary>
            <typeparam name="T">Specifies the type of elements in the collection.</typeparam>
            <remarks>
            All implementations of this interface must enable all members of this interface
            to be used concurrently from multiple threads.
            </remarks>
        </member>
        <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/> to
            an
            <see cref="T:System.Array"/>, starting at a specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in
            Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the
            length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> is greater than the
            available space from <paramref name="index"/> to the end of the destination <paramref
            name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
            <summary>
            Attempts to add an object to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see
            cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.</param>
            <returns>true if the object was added successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="item"/> was invalid for this collection.</exception>
        </member>
        <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
            <summary>
            Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            </summary>
            <param name="item">
            When this method returns, if the object was removed and returned successfully, <paramref
            name="item"/> contains the removed object. If no object was available to be removed, the value is
            unspecified.
            </param>
            <returns>true if an object was removed and returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
            <summary>
            Copies the elements contained in the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/> to a new array.
            </summary>
            <returns>A new array containing the elements copied from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.</returns>
        </member>
        <member name="T:System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1">
            <summary>
            A debugger view of the IProducerConsumerCollection that makes it simple to browse the
            collection's contents at a point in time.
            </summary>
            <typeparam name="T">The type of elements stored within.</typeparam>
        </member>
        <member name="M:System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Constructs a new debugger view object for the provided collection object.
            </summary>
            <param name="collection">A collection to browse in the debugger.</param>
        </member>
        <member name="P:System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1.Items">
            <summary>
            Returns a snapshot of the underlying collection's elements.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.BitHelper">
            <summary>
            ABOUT:
            Helps with operations that rely on bit marking to indicate whether an item in the 
            collection should be added, removed, visited already, etc. 
            
            BitHelper doesn't allocate the array; you must pass in an array or ints allocated on the 
            stack or heap. ToIntArrayLength() tells you the int array size you must allocate. 
            
            USAGE:
            Suppose you need to represent a bit array of length (i.e. logical bit array length)
            BIT_ARRAY_LENGTH. Then this is the suggested way to instantiate BitHelper:
            ***************************************************************************
            int intArrayLength = BitHelper.ToIntArrayLength(BIT_ARRAY_LENGTH);
            BitHelper bitHelper;
            if (intArrayLength less than stack alloc threshold)
                int* m_arrayPtr = stackalloc int[intArrayLength];
                bitHelper = new BitHelper(m_arrayPtr, intArrayLength);
            else
                int[] m_arrayPtr = new int[intArrayLength];
                bitHelper = new BitHelper(m_arrayPtr, intArrayLength);
            ***************************************************************************
            
            IMPORTANT:
            The second ctor args, length, should be specified as the length of the int array, not
            the logical bit array. Because length is used for bounds checking into the int array,
            it's especially important to get this correct for the stackalloc version. See the code 
            samples above; this is the value gotten from ToIntArrayLength(). 
            
            The length ctor argument is the only exception; for other methods -- MarkBit and 
            IsMarked -- pass in values as indices into the logical bit array, and it will be mapped
            to the position within the array of ints.
            
            FUTURE OPTIMIZATIONS:
            A method such as FindFirstMarked/Unmarked Bit would be useful for callers that operate 
            on a bit array and then need to loop over it. In particular, if it avoided visiting 
            every bit, it would allow good perf improvements when the bit array is sparse.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.BitHelper.#ctor(System.Int32*,System.Int32)">
            <summary>
            Instantiates a BitHelper with a heap alloc'd array of ints
            </summary>
            <param name="bitArrayPtr">int array to hold bits</param>
            <param name="length">length of int array</param>
        </member>
        <member name="M:System.Collections.Generic.BitHelper.#ctor(System.Int32[],System.Int32)">
            <summary>
            Instantiates a BitHelper with a heap alloc'd array of ints
            </summary>
            <param name="bitArray">int array to hold bits</param>
            <param name="length">length of int array</param>
        </member>
        <member name="M:System.Collections.Generic.BitHelper.MarkBit(System.Int32)">
            <summary>
            Mark bit at specified position
            </summary>
            <param name="bitPosition"></param>
        </member>
        <member name="M:System.Collections.Generic.BitHelper.IsMarked(System.Int32)">
            <summary>
            Is bit at specified position marked?
            </summary>
            <param name="bitPosition"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.BitHelper.ToIntArrayLength(System.Int32)">
            <summary>
            How many ints must be allocated to represent n bits. Returns (n+31)/32, but 
            avoids overflow
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableHelpers">
            <summary>
            Internal helper functions for working with enumerables.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableHelpers.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>Converts an enumerable to an array using the same logic as List{T}.</summary>
            <param name="source">The enumerable to convert.</param>
            <param name="length">The number of items stored in the resulting array, 0-indexed.</param>
            <returns>
            The resulting array.  The length of the array may be greater than <paramref name="length"/>,
            which is the actual number of elements in the array.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.HashSet`1">
            <summary>
            Represents a set of values.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Implementation notes:
            This uses an array-based implementation similar to <see cref="T:System.Collections.Generic.Dictionary`2"/>, using a buckets array
            to map hash values to the Slots array. Items in the Slots array that hash to the same value
            are chained together through the "next" indices. 
            
            The capacity is always prime; so during resizing, the capacity is chosen as the next prime
            greater than double the last capacity. 
            
            The underlying data structures are lazily initialized. Because of the observation that, 
            in practice, hashtables tend to contain only a few elements, the initial capacity is
            set very small (3 elements) unless the ctor with a collection is used.
            
            The +/- 1 modifications in methods that add, check for containment, etc allow us to 
            distinguish a hash code of 0 from an uninitialized bucket. This saves us from having to 
            reset each bucket to -1 when resizing. See Contains, for example.
            
            Set methods such as UnionWith, IntersectWith, ExceptWith, and SymmetricExceptWith modify
            this set.
            
            Some operations can perform faster if we can assume "other" contains unique elements
            according to this equality comparer. The only times this is efficient to check is if
            other is a hashset. Note that checking that it's a hashset alone doesn't suffice; we
            also have to check that the hashset is using the same equality comparer. If other 
            has a different equality comparer, it will have unique elements according to its own
            equality comparer, but not necessarily according to ours. Therefore, to go these 
            optimized routes we check that other is a hashset using the same equality comparer.
            
            A HashSet with no elements has the properties of the empty set. (See IsSubset, etc. for 
            special empty set checks.)
            
            A couple of methods have a special case if other is this (e.g. SymmetricExceptWith). 
            If we didn't have these checks, we could be iterating over the set and modifying at
            the same time. 
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implementation Notes:
            Since resizes are relatively expensive (require rehashing), this attempts to minimize 
            the need to resize by setting the initial capacity based on size of collection. 
            </summary>
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Add item to this hashset. This is the explicit implementation of the <see cref="T:System.Collections.Generic.ICollection`1"/>
            interface. The other Add method returns bool indicating whether item was added.
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Clear">
            <summary>
            Remove all items from this set. This clears the elements but not the underlying 
            buckets and slots array. Follow this call by TrimExcess to release these.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
            <summary>
            Checks if this hashset contains the item
            </summary>
            <param name="item">item to check for containment</param>
            <returns>true if item contained; false if not</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items in this hashset to array, starting at arrayIndex
            </summary>
            <param name="array">array to add items to</param>
            <param name="arrayIndex">index to start at</param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
            <summary>
            Remove item from this hashset
            </summary>
            <param name="item">item to remove</param>
            <returns>true if removed; false if not (i.e. if the item wasn't in the HashSet)</returns>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.Count">
            <summary>
            Number of elements in this hashset
            </summary>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Whether this is readonly
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
            <summary>
            Add item to this HashSet. Returns bool indicating whether item was added (won't be 
            added if already present)
            </summary>
            <param name="item"></param>
            <returns>true if added, false if already present</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
            <summary>
            Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the original value if the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
            <remarks>
            This can be useful when you want to reuse a previously stored reference instead of 
            a newly constructed one (so that more sharing of references can occur) or to look up
            a value that has more complete data than the value you currently have, although their
            comparer functions indicate they are equal.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Take the union of this HashSet with other. Modifies this set.
            
            Implementation note: GetSuggestedCapacity (to increase capacity in advance avoiding 
            multiple resizes ended up not being useful in practice; quickly gets to the 
            point where it's a wasteful check.
            </summary>
            <param name="other">enumerable with items to add</param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Takes the intersection of this set with other. Modifies this set.
            
            Implementation Notes: 
            We get better perf if other is a hashset using same equality comparer, because we 
            get constant contains check in other. Resulting cost is O(n1) to iterate over this.
            
            If we can't go above route, iterate over the other and mark intersection by checking
            contains in this. Then loop over and delete any unmarked elements. Total cost is n2+n1. 
            
            Attempts to return early based on counts alone, using the property that the 
            intersection of anything with the empty set is the empty set.
            </summary>
            <param name="other">enumerable with items to add </param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove items in other from this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to remove</param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Takes symmetric difference (XOR) with other and this set. Modifies this set.
            </summary>
            <param name="other">enumerable with items to XOR</param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a subset of other.
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it's a subset of anything, including the empty set
            2. If other has unique elements according to this equality comparer, and this has more
            elements than other, then it can't be a subset.
            
            Furthermore, if other is a hashset using the same equality comparer, we can use a 
            faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a subset of other; false if not</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a proper subset of other (i.e. strictly contained in)
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it's a proper subset of a set that contains at least
            one element, but it's not a proper subset of the empty set.
            2. If other has unique elements according to this equality comparer, and this has >=
            the number of elements in other, then this can't be a proper subset.
            
            Furthermore, if other is a hashset using the same equality comparer, we can use a 
            faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a proper subset of other; false if not</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a superset of other
            
            Implementation Notes:
            The following properties are used up-front to avoid element-wise checks:
            1. If other has no elements (it's the empty set), then this is a superset, even if this
            is also the empty set.
            2. If other has unique elements according to this equality comparer, and this has less 
            than the number of elements in other, then this can't be a superset
            
            </summary>
            <param name="other"></param>
            <returns>true if this is a superset of other; false if not</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this is a proper superset of other (i.e. other strictly contained in this)
            
            Implementation Notes: 
            This is slightly more complicated than above because we have to keep track if there
            was at least one element not contained in other.
            
            The following properties are used up-front to avoid element-wise checks:
            1. If this is the empty set, then it can't be a proper superset of any set, even if 
            other is the empty set.
            2. If other is an empty set and this contains at least 1 element, then this is a proper
            superset.
            3. If other has unique elements according to this equality comparer, and other's count
            is greater than or equal to this count, then this can't be a proper superset
            
            Furthermore, if other has unique elements according to this equality comparer, we can
            use a faster element-wise check.
            </summary>
            <param name="other"></param>
            <returns>true if this is a proper superset of other; false if not</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this set overlaps other (i.e. they share at least one item)
            </summary>
            <param name="other"></param>
            <returns>true if these have at least one common element; false if disjoint</returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this and other contain the same elements. This is set equality: 
            duplicates and order are ignored
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Remove elements that match specified predicate. Returns the number of elements removed
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.Comparer">
            <summary>
            Gets the IEqualityComparer that is used to determine equality of keys for 
            the HashSet.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
            <summary>
            Sets the capacity of this list to the size of the list (rounded up to nearest prime),
            unless count is 0, in which case we release references.
            
            This method can be used to minimize a list's memory overhead once it is known that no
            new elements will be added to the list. To completely clear a list and release all 
            memory referenced by the list, execute the following statements:
            
            list.Clear();
            list.TrimExcess(); 
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
            <summary>
            Used for deep equality of HashSet testing
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Initialize(System.Int32)">
            <summary>
            Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
            greater than or equal to capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IncreaseCapacity">
            <summary>
            Expand to new capacity. New capacity is next prime greater than or equal to suggested 
            size. This is called when the underlying array is filled. This performs no 
            defragmentation, allowing faster execution; note that this is reasonable since 
            AddIfNotPresent attempts to insert new elements in re-opened spots.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SetCapacity(System.Int32,System.Boolean)">
            <summary>
            Set the underlying buckets array to size newSize and rehash.  Note that newSize
            *must* be a prime.  It is very likely that you want to call IncreaseCapacity()
            instead of this method.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.AddIfNotPresent(`0)">
            <summary>
            Adds value to HashSet if not contained already
            Returns true if added and false if already present
            </summary>
            <param name="value">value to find</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.ContainsAllElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if this contains of other's elements. Iterates over other's elements and 
            returns false as soon as it finds an element in other that's not in this.
            Used by SupersetOf, ProperSupersetOf, and SetEquals.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOfHashSetWithSameEC(System.Collections.Generic.HashSet{`0})">
             <summary>
             Implementation Notes:
             If other is a hashset and is using same equality comparer, then checking subset is 
             faster. Simply check that each element in this is in other.
             
             Note: if other doesn't use same equality comparer, then Contains check is invalid,
             which is why callers must take are of this.
             
             If callers are concerned about whether this is a proper subset, they take care of that.
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IntersectWithHashSetWithSameEC(System.Collections.Generic.HashSet{`0})">
            <summary>
            If other is a hashset that uses same equality comparer, intersect is much faster 
            because we can use other's Contains
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IntersectWithEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Iterate over other. If contained in this, mark an element in bit array corresponding to
            its position in _slots. If anything is unmarked (in bit array), remove it.
            
            This attempts to allocate on the stack, if below StackAllocThreshold.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.InternalIndexOf(`0)">
            <summary>
            Used internally by set operations which have to rely on bit array marking. This is like
            Contains but returns index in slots array. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWithUniqueHashSet(System.Collections.Generic.HashSet{`0})">
            <summary>
            if other is a set, we can assume it doesn't have duplicate elements, so use this
            technique: if can't remove, then it wasn't present in this set, so add.
            
            As with other methods, callers take care of ensuring that other is a hashset using the
            same equality comparer.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWithEnumerable(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Implementation notes:
             
             Used for symmetric except when other isn't a HashSet. This is more tedious because 
             other may contain duplicates. HashSet technique could fail in these situations:
             1. Other has a duplicate that's not in this: HashSet technique would add then 
             remove it.
             2. Other has a duplicate that's in this: HashSet technique would remove then add it
             back.
             In general, its presence would be toggled each time it appears in other. 
             
             This technique uses bit marking to indicate whether to add/remove the item. If already
             present in collection, it will get marked for deletion. If added from other, it will
             get marked as something not to remove.
            
             </summary>
             <param name="other"></param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.AddOrGetLocation(`0,System.Int32@)">
            <summary>
            Add if not already in hashset. Returns an out param indicating index where added. This 
            is used by SymmetricExcept because it needs to know the following things:
            - whether the item was already present in the collection or added from other
            - where it's located (if already present, it will get marked for removal, otherwise
            marked for keeping)
            </summary>
            <param name="value"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Determines counts that can be used to determine equality, subset, and superset. This
            is only used when other is an IEnumerable and not a HashSet. If other is a HashSet
            these properties can be checked faster without use of marking because we can assume 
            other has no duplicates.
            
            The following count checks are performed by callers:
            1. Equals: checks if unfoundCount = 0 and uniqueFoundCount = _count; i.e. everything 
            in other is in this and everything in this is in other
            2. Subset: checks if unfoundCount >= 0 and uniqueFoundCount = _count; i.e. other may
            have elements not in this and everything in this is in other
            3. Proper subset: checks if unfoundCount > 0 and uniqueFoundCount = _count; i.e
            other must have at least one element not in this and everything in this is in other
            4. Proper superset: checks if unfound count = 0 and uniqueFoundCount strictly less
            than _count; i.e. everything in other was in this and this had at least one element
            not contained in other.
            
            An earlier implementation used delegates to perform these checks rather than returning
            an ElementCount struct; however this was changed due to the perf overhead of delegates.
            </summary>
            <param name="other"></param>
            <param name="returnIfUnfound">Allows us to finish faster for equals and proper superset
            because unfoundCount must be 0.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.HashSetEquals(System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Internal method used for HashSetEqualityComparer. Compares set1 and set2 according 
            to specified comparer.
            
            Because items are hashed according to a specific equality comparer, we have to resort
            to n^2 search if they're using different equality comparers.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.AreEqualityComparersEqual(System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <summary>
            Checks if equality comparers are equal. This is used for algorithms that can
            speed up if it knows the other item has unique elements. I.e. if they're using 
            different equality comparers, then uniqueness assumption between sets break.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.InternalGetHashCode(`0)">
            <summary>
            Workaround Comparers that throw ArgumentNullException for GetHashCode(null).
            </summary>
            <param name="item"></param>
            <returns>hash code</returns>
        </member>
        <member name="T:System.Collections.Generic.HashSetEqualityComparer`1">
            <summary>
            Equality comparer for hashsets of hashsets
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>
            Provides a read-only, view of a generic list.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>
            Provides a read-only view of a generic dictionary.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>
            Provides a read-only, view of a generic list.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.TreeSet`1">
            <summary>
            This class is intended as a helper for backwards compatibility with existing SortedDictionaries.
            TreeSet has been converted into SortedSet{T}, which will be exposed publicly. SortedDictionaries
            have the problem where they have already been serialized to disk as having a backing class named
            TreeSet. To ensure that we can read back anything that has already been written to disk, we need to
            make sure that we have a class named TreeSet that does everything the way it used to.
            
            The only thing that makes it different from SortedSet is that it throws on duplicates
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.InOrderTreeWalk(System.Collections.Generic.TreeWalkPredicate{`0})">
            <summary>
            Does an in-order tree walk and calls the delegate for each node.
            </summary>
            <param name="action">
            The delegate to invoke on each node.
            If the delegate returns <c>false</c>, the walk is stopped.
            </param>
            <returns><c>true</c> if the entire tree has been walked; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.BreadthFirstTreeWalk(System.Collections.Generic.TreeWalkPredicate{`0})">
            <summary>
            Does a left-to-right breadth-first tree walk and calls the delegate for each node.
            </summary>
            <param name="action">
            The delegate to invoke on each node.
            If the delegate returns <c>false</c>, the walk is stopped.
            </param>
            <returns><c>true</c> if the entire tree has been walked; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.ReplaceChildOrRoot(System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node)">
            <summary>
            Replaces the child of a parent node, or replaces the root if the parent is <c>null</c>.
            </summary>
            <param name="parent">The (possibly <c>null</c>) parent.</param>
            <param name="child">The child node to replace.</param>
            <param name="newChild">The node to replace <paramref name="child" /> with.</param>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.ReplaceNode(System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node)">
            <summary>
            Replaces the matching node with its successor.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.InternalIndexOf(`0)">
            <summary>
            Searches for an item and returns its zero-based index in this set.
            </summary>
            <param name="item">The item.</param>
            <returns>The item's zero-based index in this set, or -1 if it isn't found.</returns>
            <remarks>
            <para>
            This implementation is based off of http://en.wikipedia.org/wiki/Binary_Tree#Methods_for_storing_binary_trees.
            </para>
            <para>
            This method is used with the <see cref="T:System.Collections.Generic.BitHelper"/> class. Note that this implementation is
            completely different from <see cref="T:System.Collections.Generic.SortedSet`1.TreeSubSet"/>'s, and that the two should not be mixed.
            </para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that can be used to create a collection that contains individual sets.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object, according to a specified comparer, that can be used to create a collection that contains individual sets.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.SortedSetEquals(System.Collections.Generic.SortedSet{`0},System.Collections.Generic.SortedSet{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Decides whether two sets have equal contents, using a fallback comparer if the sets do not have equivalent equality comparers.
            </summary>
            <param name="set1">The first set.</param>
            <param name="set2">The second set.</param>
            <param name="comparer">The fallback comparer to use if the sets do not have equal comparers.</param>
            <returns><c>true</c> if the sets have equal contents; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.HasEqualComparer(System.Collections.Generic.SortedSet{`0})">
            <summary>
            Determines whether two <see cref="T:System.Collections.Generic.SortedSet`1"/> instances have the same comparer.
            </summary>
            <param name="other">The other <see cref="T:System.Collections.Generic.SortedSet`1"/>.</param>
            <returns>A value indicating whether both sets have the same comparer.</returns>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
             <summary>
             This works similar to HashSet's CheckUniqueAndUnfound (description below), except that the bit
             array maps differently than in the HashSet. We can only use this for the bulk boolean checks.
            
             Determines counts that can be used to determine equality, subset, and superset. This
             is only used when other is an IEnumerable and not a HashSet. If other is a HashSet
             these properties can be checked faster without use of marking because we can assume
             other has no duplicates.
            
             The following count checks are performed by callers:
             1. Equals: checks if UnfoundCount = 0 and uniqueFoundCount = Count; i.e. everything
             in other is in this and everything in this is in other
             2. Subset: checks if UnfoundCount >= 0 and uniqueFoundCount = Count; i.e. other may
             have elements not in this and everything in this is in other
             3. Proper subset: checks if UnfoundCount > 0 and uniqueFoundCount = Count; i.e
             other must have at least one element not in this and everything in this is in other
             4. Proper superset: checks if unfound count = 0 and uniqueFoundCount strictly less
             than Count; i.e. everything in other was in this and this had at least one element
             not contained in other.
            
             An earlier implementation used delegates to perform these checks rather than returning
             an ElementCount struct; however this was changed due to the perf overhead of delegates.
             </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.GetRotation(System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node)">
            <summary>
            Gets the rotation this node should undergo during a removal.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.GetSibling(System.Collections.Generic.SortedSet{`0}.Node)">
            <summary>
            Gets the sibling of one of this node's children.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.Rotate(System.Collections.Generic.TreeRotation)">
            <summary>
            Does a rotation on this tree. May change the color of a grandchild from red to black.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.RotateLeft">
            <summary>
            Does a left rotation on this tree, making this node the new left child of the current right child.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.RotateLeftRight">
            <summary>
            Does a left-right rotation on this tree. The left child is rotated left, then this node is rotated right.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.RotateRight">
            <summary>
            Does a right rotation on this tree, making this node the new right child of the current left child.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.RotateRightLeft">
            <summary>
            Does a right-left rotation on this tree. The right child is rotated right, then this node is rotated left.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.Merge2Nodes">
            <summary>
            Combines two 2-nodes into a 4-node.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Node.ReplaceChild(System.Collections.Generic.SortedSet{`0}.Node,System.Collections.Generic.SortedSet{`0}.Node)">
            <summary>
            Replaces a child of this node with a new node.
            </summary>
            <param name="child">The child to replace.</param>
            <param name="newChild">The node to replace <paramref name="child"/> with.</param>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
            <summary>
            Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the default value of <typeparamref name="T"/> when the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
            <remarks>
            This can be useful when you want to reuse a previously stored reference instead of 
            a newly constructed one (so that more sharing of references can occur) or to look up
            a value that has more complete data than the value you currently have, although their
            comparer functions indicate they are equal.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.SortedSet`1.TreeSubSet">
            <summary>
            This class represents a subset view into the tree. Any changes to this view
            are reflected in the actual tree. It uses the comparer of the underlying tree.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.TreeSubSet.VersionCheck">
            <summary>
            Checks whether this subset is out of date, and updates it if necessary.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SortedSetEqualityComparer`1">
            <summary>
            A comparer for two <see cref="T:System.Collections.Generic.SortedSet`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SortedSetEqualityComparer`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create a new SetEqualityComparer, given a comparer for member order and another for member equality (these
            must be consistent in their definition of equality)
            </summary>        
        </member>
        <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
            <summary>
            Implementation of a dynamic data collection based on generic Collection&lt;T&gt;,
            implementing INotifyCollectionChanged to notify listeners
            when items get added, removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of ObservableCollection that is empty and has default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the ObservableCollection class that contains
            elements copied from the specified collection and has sufficient capacity
            to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <remarks>
            The elements are copied onto the ObservableCollection in the
            same order they are read by the enumerator of the collection.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> collection is a null reference </exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the ObservableCollection class
            that contains elements copied from the specified list
            </summary>
            <param name="list">The list whose elements are copied to the new list.</param>
            <remarks>
            The elements are copied onto the ObservableCollection in the
            same order they are read by the enumerator of the list.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> list is a null reference </exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Move item at oldIndex to newIndex.
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is added to list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Called by base class ObservableCollection&lt;T&gt; when an item is to be moved within the list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise CollectionChanged event to any listeners.
            Properties/methods modifying this ObservableCollection will raise
            a collection changed event through this virtual method.
            </summary>
            <remarks>
            When overriding this method, either call its base implementation
            or call <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy"/> to guard against reentrant collection changes.
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
            <summary>
            Disallow reentrant attempts to change this collection. E.g. a event handler
            of the CollectionChanged event is not allowed to make changes to this collection.
            </summary>
            <remarks>
            typical usage is to wrap e.g. a OnCollectionChanged call with a using() scope:
            <code>
                    using (BlockReentrancy())
                    {
                        CollectionChanged(this, new NotifyCollectionChangedEventArgs(action, item, index));
                    }
            </code>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
            <summary> Check and assert for reentrant attempts to change this collection. </summary>
            <exception cref="T:System.InvalidOperationException"> raised when changing the collection
            while another collection change is still being notified to other listeners </exception>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCountPropertyChanged">
            <summary>
            Helper to raise a PropertyChanged event for the Count property
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnIndexerPropertyChanged">
            <summary>
            Helper to raise a PropertyChanged event for the Indexer property
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
            <summary>
            Read-only wrapper around an ObservableCollection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Initializes a new instance of ReadOnlyObservableCollection that
            wraps the given ObservableCollection.
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            CollectionChanged event (per <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />).
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
            <remarks>
            see <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            raise PropertyChanged event to any listeners
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
            <summary>
            A collection implementing this interface will notify listeners of dynamic changes,
            e.g. when items get added and removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            The event handler receives an argument of type
            <seealso cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
            containing data related to this event.
            </remarks>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
            <summary>
            This enum describes the action that caused a CollectionChanged event.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
            <summary> One or more items were added to the collection. </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
            <summary> One or more items were removed from the collection. </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
            <summary> One or more items were replaced in the collection. </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
            <summary> One or more items were moved within the collection. </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
            <summary> The contents of the collection changed dramatically. </summary>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
            <summary>
            Arguments for the CollectionChanged event.
            A collection that supports INotifyCollectionChangedThis raises this event
            whenever an item is added or removed, or when the contents of the collection
            changes dramatically.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a reset change.
            </summary>
            <param name="action">The action that caused the event (must be Reset).</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
            </summary>
            <param name="action">The action that caused the event; can only be Reset, Add or Remove action.</param>
            <param name="changedItem">The item affected by the change.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="changedItem">The item affected by the change.</param>
            <param name="index">The index where the change occurred.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a multi-item change.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="changedItems">The items affected by the change.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a multi-item change (or a reset).
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="startingIndex">The index where the change occurred.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event.
            </summary>
            <param name="action">Can only be a Replace action.</param>
            <param name="newItem">The new item replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event.
            </summary>
            <param name="action">Can only be a Replace action.</param>
            <param name="newItem">The new item replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
            <param name="index">The index of the item being replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event.
            </summary>
            <param name="action">Can only be a Replace action.</param>
            <param name="newItems">The new items replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event.
            </summary>
            <param name="action">Can only be a Replace action.</param>
            <param name="newItems">The new items replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
            <param name="startingIndex">The starting index of the items being replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a one-item Move event.
            </summary>
            <param name="action">Can only be a Move action.</param>
            <param name="changedItem">The item affected by the change.</param>
            <param name="index">The new index for the changed item.</param>
            <param name="oldIndex">The old index for the changed item.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs that describes a multi-item Move event.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="index">The new index for the changed items.</param>
            <param name="oldIndex">The old index for the changed items.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Construct a NotifyCollectionChangedEventArgs with given fields (no validation). Used by WinRT marshaling.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
            <summary>
            The action that caused the event.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
            <summary>
            The items affected by the change.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
            <summary>
            The old items affected by the change (for Replace events).
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            The index where the change occurred.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            The old index where the change occurred (for Move events).
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
            <summary>
                The delegate to use for handlers that receive the CollectionChanged event.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
            <summary>
            <para>Provides data for the <see langword='ErrorsChanged'/>
            event.</para>
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref='T:System.ComponentModel.DataErrorsChangedEventArgs'/>
            class.</para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
            <summary>
               <para>Indicates the name of the property whose errors changed.</para>
            </summary>
        </member>
        <member name="T:System.ComponentModel.PropertyChangingEventArgs">
            <summary>
            <para>Provides data for the <see langword='PropertyChanging'/>
            event.</para>
            </summary>
        </member>
        <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref='T:System.ComponentModel.PropertyChangingEventArgs'/>
            class.</para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
            <summary>
               <para>Indicates the name of the property that is changing.</para>
            </summary>
        </member>
        <member name="T:System.ComponentModel.PropertyChangingEventHandler">
            <summary>
               <para>Represents the method that will handle the
               <see langword='PropertyChanging'/> event raised when a
                  property is changing on a component.</para>
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.Contract">
            <summary>
            Contains static methods for representing program contracts such as preconditions, postconditions, and invariants.
            </summary>
            <remarks>
            WARNING: A binary rewriter must be used to insert runtime enforcement of these contracts.
            Otherwise some contracts like Ensures can only be checked statically and will not throw exceptions during runtime when contracts are violated.
            Please note this class uses conditional compilation to help avoid easy mistakes.  Defining the preprocessor
            symbol CONTRACTS_PRECONDITIONS will include all preconditions expressed using Contract.Requires in your 
            build.  The symbol CONTRACTS_FULL will include postconditions and object invariants, and requires the binary rewriter.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
            <summary>
            Represents the result (a.k.a. return value) of a method or property.
            </summary>
            <typeparam name="T">Type of return value of the enclosing method or property.</typeparam>
            <returns>Return value of the enclosing method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
            <summary>
            Represents the final (output) value of an out parameter when returning from a method.
            </summary>
            <typeparam name="T">Type of the out parameter.</typeparam>
            <param name="value">The out parameter.</param>
            <returns>The output value of the out parameter.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
            <summary>
            Represents the value of <paramref name="value"/> as it was at the start of the method or property.
            </summary>
            <typeparam name="T">Type of <paramref name="value"/>.  This can be inferred.</typeparam>
            <param name="value">Value to represent.  This must be a field or parameter.</param>
            <returns>Value of <paramref name="value"/> at the start of the method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for all integers starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for all integers 
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for all elements in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for all elements in
            <paramref name="collection"/>.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for any integer starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for any integer
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for any element in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for an element in
            <paramref name="collection"/>.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
            <summary>
            Marker to indicate the end of the contract section of a method.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.AssertMustUseRewriter(System.Diagnostics.Contracts.ContractFailureKind,System.String)">
            <summary>
            This method is used internally to trigger a failure indicating to the "programmer" that he is using the interface incorrectly.
            It is NEVER used to indicate failure of actual contracts at runtime.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ReportFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
            <summary>
            Without contract rewriting, failing Assert/Assumes end up calling this method.
            Code going through the contract rewriter never calls this method. Instead, the rewriter produced failures call
            System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent, followed by 
            System.Runtime.CompilerServices.ContractHelper.TriggerFailure.
            </summary>
        </member>
        <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
            <summary>
            Allows a managed application environment such as an interactive interpreter (IronPython)
            to be notified of contract failures and 
            potentially "handle" them, either by throwing a particular exception type, etc.  If any of the
            event handlers sets the Cancel flag in the ContractFailedEventArgs, then the Contract class will
            not pop up an assert dialog box or trigger escalation policy.  Hooking this event requires 
            full trust, because it will inform you of bugs in the appdomain and because the event handler
            could allow you to continue execution.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
            <summary>
            Enables writing abbreviations for contracts that get copied to other methods
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
            <summary>
            Types marked with this attribute specify that a separate type contains the contracts for this type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
            <summary>
            Types marked with this attribute specify that they are a contract for the type that is the argument of the constructor.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
            <summary>
            This attribute is used to mark a method as being the invariant
            method for a class. The method can have any name, but it must
            return "void" and take no parameters. The body of the method
            must consist solely of one or more calls to the method
            Contract.Invariant. A suggested name for the method is 
            "ObjectInvariant".
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
            <summary>
            Allows setting contract and tool options at assembly, type, or method granularity.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
            <summary>
            Allows a field f to be used in the method contracts for a method m when f has less visibility than m.
            For instance, if the method is public, but the field is private.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
            <summary>
            Attribute that specifies that an assembly is a reference assembly with contracts.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
            <summary>
            Methods (and properties) marked with this attribute can be used within calls to Contract methods, but have no runtime behavior associated with them.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
            <summary>
            Instructs downstream tools whether to assume the correctness of this assembly, type or member without performing any verification or not.
            Can use [ContractVerification(false)] to explicitly mark assembly, type or member as one to *not* have verification performed on it.
            Most specific element found (member, type, then assembly) takes precedence.
            (That is useful if downstream tools allow a user to decide which polarity is the default, unmarked case.)
            </summary>
            <remarks>
            Apply this attribute to a type to apply to all members of the type, including nested types.
            Apply this attribute to an assembly to apply to all types and members of the assembly.
            Apply this attribute to a property to apply to both the getter and setter.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>
            Methods and classes marked with this attribute can be used within calls to Contract methods. Such methods not make any visible state changes.
            </summary>
        </member>
        <member name="E:System.Runtime.CompilerServices.ContractHelper.InternalContractFailed">
            <summary>
            Allows a managed application environment such as an interactive interpreter (IronPython) or a
            web browser host (Jolt hosting Silverlight in IE) to be notified of contract failures and 
            potentially "handle" them, either by throwing a particular exception type, etc.  If any of the
            event handlers sets the Cancel flag in the ContractFailedEventArgs, then the Contract class will
            not pop up an assert dialog box or trigger escalation policy.  Hooking this event requires 
            full trust.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
            <summary>
            Rewriter will call this method on a contract failure to allow listeners to be notified.
            The method should not perform any failure (assert/throw) itself.
            This method has 3 functions:
            1. Call any contract hooks (such as listeners to Contract failed events)
            2. Determine if the listeners deem the failure as handled (then resultFailureMessage should be set to null)
            3. Produce a localized resultFailureMessage used in advertising the failure subsequently.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
            <summary>
            Rewriter calls this method to get the default failure behavior.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed type when used as the return type of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1">
            <summary>Represents a builder for asynchronous methods that returns a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1._methodBuilder">
            <summary>The <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1"/> to which most operations are delegated.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1._result">
            <summary>The result for this builder, if it's completed before any awaits occur.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1._haveResult">
            <summary>true if <see cref="F:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1._result"/> contains the synchronous result for the async method; otherwise, false.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1._useBuilder">
            <summary>true if the builder should be used for setting/getting the result; otherwise, false.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Create">
            <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1"/> struct.</summary>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start``1(``0@)">
            <summary>Begins running the builder with the associated state machine.</summary>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>Associates the builder with the specified state machine.</summary>
            <param name="stateMachine">The state machine instance to associate with the builder.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(`0)">
            <summary>Marks the task as successfully completed.</summary>
            <param name="result">The result to use to complete the task.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>Marks the task as failed and binds the specified exception to the task.</summary>
            <param name="exception">The exception to bind to the task.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Task">
            <summary>Gets the task for this builder.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">the awaiter</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">the awaiter</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.m_synchronizationContext">
            <summary>The synchronization context associated with this operation.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
            IMPORTANT: Keep this in sync with corhdr.h
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1">
            <summary>Provides an awaitable type that enables configured awaits on a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</summary>
            <typeparam name="TResult">The type of the result produced.</typeparam>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1._value">
            <summary>The wrapped <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1._continueOnCapturedContext">
            <summary>true to attempt to marshal the continuation back to the original context captured; otherwise, false.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.#ctor(System.Threading.Tasks.ValueTask{`0},System.Boolean)">
            <summary>Initializes the awaitable.</summary>
            <param name="value">The wrapped <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original synchronization context captured; otherwise, false.
            </param>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.GetAwaiter">
            <summary>Returns an awaiter for this <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/> instance.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter">
            <summary>Provides an awaiter for a <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/>.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter._value">
            <summary>The value being awaited.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter._continueOnCapturedContext">
            <summary>The value to pass to ConfigureAwait.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.#ctor(System.Threading.Tasks.ValueTask{`0},System.Boolean)">
            <summary>Initializes the awaiter.</summary>
            <param name="value">The value to be awaited.</param>
            <param name="continueOnCapturedContext">The value to pass to ConfigureAwait.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.IsCompleted">
            <summary>Gets whether the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/> has completed.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult">
            <summary>Gets the result of the ValueTask.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
            <summary>Schedules the continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/>.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.AsTask">
            <summary>Gets the task underlying <see cref="F:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter._value"/>.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.System#Runtime#CompilerServices#IConfiguredValueTaskAwaiter#GetTask">
            <summary>Gets the task underlying the incomplete <see cref="F:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter._value"/>.</summary>
            <remarks>This method is used when awaiting and IsCompleted returned false; thus we expect the value task to be wrapping a non-null task.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IConfiguredValueTaskAwaiter">
            <summary>
            Internal interface used to enable extract the Task from arbitrary configured ValueTask awaiters.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsByRefLikeAttribute">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsReadOnlyAttribute">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ITuple">
            <summary>
            This interface is required for types that want to be indexed into by dynamic patterns.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ITuple.Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.TupleElementNamesAttribute">
            <summary>
            Indicates that the use of <see cref="T:System.ValueTuple"/> on a member is meant to be treated as a tuple with element names.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.TupleElementNamesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see
            cref="T:System.Runtime.CompilerServices.TupleElementNamesAttribute"/> class.
            </summary>
            <param name="transformNames">
            Specifies, in a pre-order depth-first traversal of a type's
            construction, which <see cref="T:System.ValueType"/> occurrences are
            meant to carry element names.
            </param>
            <remarks>
            This constructor is meant to be used on types that contain an
            instantiation of <see cref="T:System.ValueType"/> that contains
            element names.  For instance, if <c>C</c> is a generic type with
            two type parameters, then a use of the constructed type <c>C{<see
            cref="T:System.ValueTuple`2"/>, <see
            cref="T:System.ValueTuple`3"/></c> might be intended to
            treat the first type argument as a tuple with element names and the
            second as a tuple without element names. In which case, the
            appropriate attribute specification should use a
            <c>transformNames</c> value of <c>{ "name1", "name2", null, null,
            null }</c>.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.TupleElementNamesAttribute.TransformNames">
            <summary>
            Specifies, in a pre-order depth-first traversal of a type's
            construction, which <see cref="T:System.ValueTuple"/> elements are
            meant to carry element names.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter`1">
            <summary>Provides an awaiter for a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.ValueTaskAwaiter`1._value">
            <summary>The value being awaited.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.#ctor(System.Threading.Tasks.ValueTask{`0})">
            <summary>Initializes the awaiter.</summary>
            <param name="value">The value to be awaited.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter`1.IsCompleted">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.ValueTask`1"/> has completed.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult">
            <summary>Gets the result of the ValueTask.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.OnCompleted(System.Action)">
            <summary>Schedules the continuation action for this ValueTask.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.AsTask">
            <summary>Gets the task underlying <see cref="F:System.Runtime.CompilerServices.ValueTaskAwaiter`1._value"/>.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.System#Runtime#CompilerServices#IValueTaskAwaiter#GetTask">
            <summary>Gets the task underlying the incomplete <see cref="F:System.Runtime.CompilerServices.ValueTaskAwaiter`1._value"/>.</summary>
            <remarks>This method is used when awaiting and IsCompleted returned false; thus we expect the value task to be wrapping a non-null task.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IValueTaskAwaiter">
            <summary>
            Internal interface used to enable extract the Task from arbitrary ValueTask awaiters.
            </summary>>
        </member>
        <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
            <summary>
            Provides an awaitable context for switching into a target environment.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
            <summary>
            Gets an awaiter for this <see cref="T:System.Runtime.CompilerServices.YieldAwaitable"/>.
            </summary>
            <returns>An awaiter for this awaitable.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
            <summary>
            Provides an awaiter that switches into a target environment.
            </summary>
        </member>
        <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
            <summary>
            The ExceptionDispatchInfo object stores the stack trace information and
            Watson information that the exception contains at the point where it is
            captured. The exception can be thrown at another time and possibly on
            another thread by calling the ExceptionDispatchInfo.Throw method. The
            exception is thrown as if it had flowed from the point where it was
            captured to the point where the Throw method is called.
            </summary>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
            <summary>
            Creates an ExceptionDispatchInfo object that represents the specified exception at the current point in code.
            </summary>
            <param name="source">The exception whose state is captured, and which is represented by the returned object.</param>
            <returns>An object that represents the specified exception at the current point in code. </returns>
        </member>
        <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
            <summary>
            Gets the exception that is represented by the current instance.
            </summary>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
            <summary>
            Throws the exception that is represented by the current ExceptionDispatchInfo object, after restoring the state that was saved when the exception was captured.
            </summary>
        </member>
        <member name="T:System.Runtime.ExceptionServices.ExceptionSerializer">
            <summary>
            Provides methods to help serialization of <see cref="T:System.Exception"/> instance.
            </summary>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.GetObjectData(System.Exception,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.
            </summary>
            <param name="ex">The target object.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.SetObjectData(System.Exception,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Reads a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> data which contains
            the data needed to deserialize to a new instance.
            </summary>
            <param name="ex">The new instance.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.AsSerializable(System.Exception)">
            <summary>
            Wraps a <see cref="T:System.Exception"/> instance into a new serializable type.
            </summary>
            <param name="ex">The target instance.</param>
            <returns>A new <see cref="T:System.Exception2"/> instance.</returns>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.GetDefaultMessage">
            <summary>
            Gets the default message set for <see cref="T:System.Exception"/> when no
            message is defined.
            </summary>
            <returns>The default message for current culture.</returns>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.SetErrorCode(System.Exception,System.Int32)">
            <summary>
            Sets the error code for a <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex">The target object.</param>
            <param name="hResult">The error code.</param>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.SetMessage(System.Exception,System.String)">
            <summary>
            Sets the message for a <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex">The target object.</param>
            <param name="message">The message text to set.</param>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionSerializer.SetInnerException(System.Exception,System.Exception)">
            <summary>
            Sets the inner exception for a <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex">The target object.</param>
            <param name="innerException">The inner exception to set.</param>
        </member>
        <member name="T:System.Runtime.Serialization.FormatterConverter">
            <summary>
            Represents a base implementation of the <see cref="T:System.Runtime.Serialization.IFormatterConverter"/>
            interface that uses the <see cref="T:System.Convert"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Serialization.FormatterConverter"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts a value to the given <see cref="T:System.Type"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> into which <paramref name="value"/> is converted.</param>
            <returns>The converted <paramref name="value"/> or null if the <paramref name="type"/> parameter is null.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.TypeCode)">
            <summary>
            Converts a value to the given <see cref="T:System.TypeCode"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <param name="typeCode">The <see cref="T:System.TypeCode"/> into which <paramref name="value"/> is converted.</param>
            <returns>The converted <paramref name="value"/> or null if the <paramref name="typeCode"/> parameter is <see cref="F:System.TypeCode.Empty"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToBoolean(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToChar(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToSByte(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToByte(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt16(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt16(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt32(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt32(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt64(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt64(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToSingle(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToDouble(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToDecimal(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToDateTime(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.FormatterConverter.ToString(System.Object)">
            <summary>
            Converts a value to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted <paramref name="value"/>.</returns>
        </member>
        <member name="T:System.Runtime.Serialization.IDeserializationCallback">
            <summary>
            Indicates that a class is to be notified when deserialization of the
            entire object graph has been completed.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">
            <para>The object that initiated the callback.</para>
            <para>The functionality for this parameter is not currently implemented.</para>
            </param>
        </member>
        <member name="T:System.Runtime.Serialization.IFormatterConverter">
            <summary>
            Provides the connection between an instance of <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            and the formatter-provided class best suited to parse the data inside the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts a value to the given <see cref="T:System.Type" />.
            </summary>
            <param name="value">The object to be converted.</param>
            <param name="type">The <see cref="T:System.Type" /> into which <paramref name="value" /> is to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.TypeCode)">
            <summary>
            Converts a value to the given <see cref="T:System.TypeCode" />.
            </summary>
            <param name="value">The object to be converted.</param>
            <param name="typeCode">The <see cref="T:System.TypeCode" /> into which <paramref name="value" /> is to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToBoolean(System.Object)">
            <summary>Converts a value to a <see cref="T:System.Boolean" />.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToChar(System.Object)">
            <summary>Converts a value to a Unicode character.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSByte(System.Object)">
            <summary>Converts a value to a <see cref="T:System.SByte" />.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToByte(System.Object)">
            <summary>Converts a value to an 8-bit unsigned integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt16(System.Object)">
            <summary>Converts a value to a 16-bit signed integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt16(System.Object)">
            <summary>Converts a value to a 16-bit unsigned integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt32(System.Object)">
            <summary>Converts a value to a 32-bit signed integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt32(System.Object)">
            <summary>Converts a value to a 32-bit unsigned integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt64(System.Object)">
            <summary>Converts a value to a 64-bit signed integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt64(System.Object)">
            <summary>Converts a value to a 64-bit unsigned integer.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSingle(System.Object)">
            <summary>Converts a value to a single-precision floating-point number.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDouble(System.Object)">
            <summary>Converts a value to a double-precision floating-point number.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDecimal(System.Object)">
            <summary>Converts a value to a <see cref="T:System.Decimal" />.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDateTime(System.Object)">
            <summary>Converts a value to a <see cref="T:System.DateTime" />.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatterConverter.ToString(System.Object)">
            <summary>Converts a value to a <see cref="T:System.String" />.</summary>
            <param name="value">The object to be converted.</param>
            <returns>The converted <paramref name="value" />.</returns>
        </member>
        <member name="T:System.Runtime.Serialization.ISerializable">
            <summary>
            Allows an object to control its own serialization and deserialization.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="T:System.Runtime.Serialization.SerializationEntry">
            <summary>
            Holds the value, <see cref="T:System.Type" />, and name of a serialized object.
            </summary>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationEntry.Value">
            <summary>
            Gets the value contained in the object.
            </summary>
            <returns>The value contained in the object.</returns>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationEntry.Name">
            <summary>
            Gets the name of the object.
            </summary>
            <returns>The name of the object.</returns>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationEntry.ObjectType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the object.
            </summary>
            <returns>The <see cref="T:System.Type" /> of the object.</returns>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationEntry.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:System.Runtime.Serialization.SerializationEntry"/> class.
            </summary>
            <param name="entryName">The name of object.</param>
            <param name="entryValue">The value contained in the object.</param>
            <param name="entryType">The <see cref="T:System.Type"/> of the object.</param>
        </member>
        <member name="T:System.Runtime.Serialization.SerializationInfo">
            <summary>
            Stores all the data needed to serialize or deserialize an object.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
            <param name="converter">The <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> used during deserialization.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type" /> or <paramref name="converter" /> is null.
            </exception>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
            <param name="converter">The <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> used during deserialization.</param>
            <param name="requireSameTokenInPartialTrust">Indicates whether the object requires same token in partial trust.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type" /> or <paramref name="converter" /> is null.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="requireSameTokenInPartialTrust"/> is true.</exception>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationInfo.FullTypeName">
            <summary>
            Gets or sets the full name of the <see cref="T:System.Type" /> to serialize.
            </summary>
            <returns>The full name of the type to serialize.</returns>
            <exception cref="T:System.ArgumentNullException">The value this property is set to is null.</exception>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationInfo.MemberCount">
            <summary>
            Gets the number of members that have been added to the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.
            </summary>
            <returns>
            The number of members that have been added to the current <see cref="T:System.Runtime.Serialization.SerializationInfo" />.
            </returns>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationInfo.ObjectType">
            <summary>
            Returns the type of the object to be serialized.
            </summary>
            <returns>The type of the object being serialized.</returns>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationInfo.IsFullTypeNameSetExplicit">
            <summary>
            Gets whether the full type name has been explicitly set.
            </summary>
            <returns>
            True if the full type name has been explicitly set; otherwise false.
            </returns>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)">
            <summary>
            Sets the <see cref="T:System.Type" /> of the object to serialize.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator">
            <summary>
            Returns an enumerator used to iterate through the name-value pairs
            in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.
            </summary>
            <returns>
            An enumerator for parsing the name-value pairs contained in the
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.
            </returns>
        </member>
        <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.System#Collections#IEnumerator#Current">
            <internalonly/>
        </member>
        <member name="T:System.Runtime.Serialization.StreamingContext">
            <summary>
            Describes the source and destination of a given serialized stream, and
            provides an additional caller-defined context.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            class with a given context state.
            </summary>
            <param name="state">
            A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates"/>
            values that specify the source or destination context for this
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </param>
        </member>
        <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            class with a given context state.
            </summary>
            <param name="state">
            A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates"/>
            values that specify the source or destination context for this
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </param>
            <param name="additional">
            Any additional information to be associated with the <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            This information is available to any object that implements
            <see cref="T:System.Runtime.Serialization.ISerializable"/> or any
            serialization surrogate.
            Most users do not need to set this parameter.
            </param>
        </member>
        <member name="P:System.Runtime.Serialization.StreamingContext.Context">
            <summary>
            Gets context specified as part of the additional context.
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:System.Runtime.Serialization.StreamingContext"/> instances contain the same values.
            </summary>
            <param name="obj">An object to compare with the current instance.</param>
            <returns>
            true if the specified object is an instance of <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            and equals the value of the current instance; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
            <summary>
            Returns a hash code of this object.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.StreamingContextStates"/> value that contains the
            source or destination of the serialization for this
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </returns>
        </member>
        <member name="P:System.Runtime.Serialization.StreamingContext.State">
            <summary>
            Gets the source or destination of the transmitted data.
            </summary>
        </member>
        <member name="T:System.Runtime.Serialization.StreamingContextStates">
            <summary>
            Defines a set of flags that specifies the source or destination context for the stream during serialization.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
            <summary>
            Specifies that the source or destination context is a different process on the same computer.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
            <summary>
            Specifies that the source or destination context is a different computer.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
            <summary>
            Specifies that the source or destination context is a file. Users
            can assume that files will last longer than the process that
            created them and not serialize objects in such a way that
            deserialization will require accessing any data from the current
            process.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
            <summary>
            Specifies that the source or destination context is a persisted
            store, which could include databases, files, or other backing
            stores. Users can assume that persisted data will last longer than
            the process that created the data and not serialize objects so that
            deserialization will require accessing any data from the current
            process.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
            <summary>
            Specifies that the data is remoted to a context in an unknown
            location. Users cannot make any assumptions whether this is on the
            same computer.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
            <summary>
            Specifies that the serialization context is unknown.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
            <summary>
            Specifies that the object graph is being cloned. Users can assume
            that the cloned graph will continue to exist within the same
            process and be safe to access handles or other references to
            unmanaged resources.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
            <summary>
            Specifies that the source or destination context is a different AppDomain.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
            <summary>
            Specifies that the serialized data can be transmitted to or
            received from any of the other contexts.
            </summary>
        </member>
        <member name="M:System.Enum2.Format(System.Type,System.Object,System.String)">
            <summary>
            Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format. 
            </summary>
            <remarks>
            The valid format values are: 
            "G" or "g" - If value is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of value is returned.
            For example, suppose the only enumerated constant is named, Red, and its value is 1. If value is specified as 1, then this format returns "Red". However, if value is specified as 2, this format returns "2".
            "X" or "x" - Represents value in hexadecimal without a leading "0x". 
            "D" or "d" - Represents value in decimal form.
            "F" or "f" - Behaves identically to "G" or "g", except the FlagsAttribute is not required to be present on the Enum declaration. 
            </remarks>
            <param name="enumType">The enumeration type of the value to convert.</param>
            <param name="value">The value to convert.</param>
            <param name="format">The output format to use.</param>
            <returns>A string representation of value.</returns>
        </member>
        <member name="M:System.Enum2.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <returns> A string containing the name of the enumerated constant in enumType whose value is value, or null if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"> enumType is not an System.Enum.  -or-  value is neither of type enumType nor does it have the same underlying type as enumType.</exception>
        </member>
        <member name="M:System.Enum2.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>A string array of the names of the constants in enumType. The elements of the array are sorted by the values of the enumerated constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
        </member>
        <member name="M:System.Enum2.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>An System.Array of the values of the constants in enumType. The elements of the array are sorted by the values of the enumeration constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
        </member>
        <member name="T:System.IObservable`1">
            <summary>
            Interface for exposing an Observable in the
            Observer pattern.
            </summary>
        </member>
        <member name="T:System.IObserver`1">
            <summary>
            Interface for exposing an Observer in the
            Observer pattern.
            </summary>
        </member>
        <member name="M:System.IO.StreamCopyToFactory.ValidateCopyToArgs(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Validate the arguments to CopyTo, as would Stream.CopyTo.
            </summary>
        </member>
        <member name="T:System.IProgress`1">
            <summary>Defines a provider for progress updates.</summary>
            <typeparam name="T">The type of progress update value.</typeparam>
        </member>
        <member name="M:System.IProgress`1.Report(`0)">
            <summary>Reports a progress update.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="T:System.Lazy`1">
            <summary>
            Provides support for lazy initialization.
            </summary>
            <typeparam name="T">Specifies the type of element being lazily initialized.</typeparam>
            <remarks>
            <para>
            By default, all public and protected members of <see cref="T:System.Lazy`1"/> are thread-safe and may be used
            concurrently from multiple threads.  These thread-safety guarantees may be removed optionally and per instance
            using parameters to the type's constructors.
            </para>
            </remarks>
        </member>
        <member name="T:System.Lazy`1.Boxed">
            <summary>
            wrapper class to box the initialized value, this is mainly created to avoid boxing/unboxing the value each time the value is called in case T is 
            a value type
            </summary>
        </member>
        <member name="T:System.Lazy`1.LazyInternalExceptionHolder">
            <summary>
            Wrapper class to wrap the excpetion thrown by the value factory
            </summary>
        </member>
        <member name="M:System.Lazy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that 
            uses <typeparamref name="T"/>'s default constructor for lazy initialization.
            </summary>
            <remarks>
            An instance created with this constructor may be used concurrently from multiple threads.
            </remarks>
        </member>
        <member name="M:System.Lazy`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class that
            uses a pre-initialized specified value.
            </summary>
            <remarks>
            An instance created with this constructor should be usable by multiple threads
            concurrently.
            </remarks>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that uses a
            specified initialization function.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it is
            needed.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null
            reference (Nothing in Visual Basic).</exception>
            <remarks>
            An instance created with this constructor may be used concurrently from multiple threads.
            </remarks>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/>
            class that uses <typeparamref name="T"/>'s default constructor and a specified thread-safety mode.
            </summary>
            <param name="isThreadSafe">true if this instance should be usable by multiple threads concurrently; false if the instance will only be used by one thread at a time.
            </param>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/>
            class that uses <typeparamref name="T"/>'s default constructor and a specified thread-safety mode.
            </summary>
            <param name="mode">The lazy thread-safety mode mode</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> mode contains an invalid valuee</exception>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class
            that uses a specified initialization function and a specified thread-safety mode.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it is needed.
            </param>
            <param name="isThreadSafe">true if this instance should be usable by multiple threads concurrently; false if the instance will only be used by one thread at a time.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is
            a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class
            that uses a specified initialization function and a specified thread-safety mode.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it is needed.
            </param>
            <param name="mode">The lazy thread-safety mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is
            a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> mode contains an invalid value.</exception>
        </member>
        <member name="M:System.Lazy`1.GetObjectFromMode(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Static helper function that returns an object based on the given mode. it also throws an exception if the mode is invalid
            </summary>
        </member>
        <member name="M:System.Lazy`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>Forces initialization during serialization.</summary>
            <param name="context">The StreamingContext for the serialization operation.</param>
        </member>
        <member name="M:System.Lazy`1.ToString">
            <summary>Creates and returns a string representation of this instance.</summary>
            <returns>The result of calling <see cref="M:System.Object.ToString"/> on the <see
            cref="P:System.Lazy`1.Value"/>.</returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:System.Lazy`1.Value"/> is null.
            </exception>
        </member>
        <member name="P:System.Lazy`1.ValueForDebugDisplay">
            <summary>Gets the value of the Lazy&lt;T&gt; for debugging display purposes.</summary>
        </member>
        <member name="P:System.Lazy`1.Mode">
            <summary>
            Gets a value indicating whether this instance may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="P:System.Lazy`1.IsValueFaulted">
            <summary>
            Gets whether the value creation is faulted or not
            </summary>
        </member>
        <member name="P:System.Lazy`1.IsValueCreated">
            <summary>Gets a value indicating whether the <see cref="T:System.Lazy{T}"/> has been initialized.
            </summary>
            <value>true if the <see cref="T:System.Lazy{T}"/> instance has been initialized;
            otherwise, false.</value>
            <remarks>
            The initialization of a <see cref="T:System.Lazy{T}"/> instance may result in either
            a value being produced or an exception being thrown.  If an exception goes unhandled during initialization, 
            <see cref="P:System.Lazy`1.IsValueCreated"/> will return false.
            </remarks>
        </member>
        <member name="P:System.Lazy`1.Value">
            <summary>Gets the lazily initialized value of the current <see cref="T:System.Lazy`1"/>.</summary>
            <value>The lazily initialized value of the current <see cref="T:System.Lazy`1"/>.</value>
            <exception cref="T:System.MissingMemberException">
            The <see cref="T:System.Threading.Lazy{T}"/> was initialized to use the default constructor 
            of the type being lazily initialized, and that type does not have a public, parameterless constructor.
            </exception>
            <exception cref="T:System.MemberAccessException">
            The <see cref="T:System.Threading.Lazy{T}"/> was initialized to use the default constructor 
            of the type being lazily initialized, and permissions to access the constructor were missing.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Threading.Lazy{T}"/> was constructed with the <see cref="T:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication"/> or
            <see cref="T:System.Threading.LazyThreadSafetyMode.None"/>  and the initialization function attempted to access <see cref="P:System.Lazy`1.Value"/> on this instance.
            </exception>
            <remarks>
            If <see cref="P:System.Lazy`1.IsValueCreated"/> is false, accessing <see cref="P:System.Lazy`1.Value"/> will force initialization.
            Please <see cref="T:System.Threading.LazyThreadSafetyMode"/> for more information on how <see cref="T:System.Lazy`1"/> will
            behave if an exception is thrown from initialization delegate.
            </remarks>
        </member>
        <member name="M:System.Lazy`1.LazyInitValue">
            <summary>
            local helper method to initialize the value 
            </summary>
            <returns>The inititialized T value</returns>
        </member>
        <member name="M:System.Lazy`1.CreateValue">
            <summary>Creates an instance of T using m_valueFactory in case its not null or use reflection to create a new T()</summary>
            <returns>An instance of Boxed.</returns>
        </member>
        <member name="T:System.System_LazyDebugView`1">
            <summary>A debugger view of the Lazy&lt;T&gt; to surface additional debugging properties and 
            to ensure that the Lazy&lt;T&gt; does not become initialized if it was not already.</summary>
        </member>
        <member name="M:System.System_LazyDebugView`1.#ctor(System.Lazy{`0})">
            <summary>Constructs a new debugger view object for the provided Lazy object.</summary>
            <param name="lazy">A Lazy object to browse in the debugger.</param>
        </member>
        <member name="P:System.System_LazyDebugView`1.IsValueCreated">
            <summary>Returns whether the Lazy object is initialized or not.</summary>
        </member>
        <member name="P:System.System_LazyDebugView`1.Value">
            <summary>Returns the value of the Lazy object.</summary>
        </member>
        <member name="P:System.System_LazyDebugView`1.Mode">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="P:System.System_LazyDebugView`1.IsValueFaulted">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="M:System.Linq.Enumerable2.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <param name="resultSelector">
            A function that specifies how to merge the elements from the two sequences.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains merged elements of two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/>, <paramref name="second"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="T:System.Linq.IQueryable">
            <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
            </summary>
        </member>
        <member name="P:System.Linq.IQueryable.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="P:System.Linq.IQueryable.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
        </member>
        <member name="P:System.Linq.IQueryable.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="T:System.Linq.IQueryable`1">
            <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
            </summary>
            <typeparam name="T">The type of the data in the data source.</typeparam>
        </member>
        <member name="T:System.Linq.IQueryProvider">
            <summary>
            Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable"/> object.
            </summary>
            <remarks>
            The <see cref="T:System.Linq.IQueryProvider"/> interface is intended for implementation by query providers.
            </remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.</returns>
            <remarks>
            The CreateQuery method is used to create new <see cref="T:System.Linq.IQueryable"/> objects, given an expression tree. The query that is represented by the returned object is associated with a specific LINQ provider.
            Several of the standard query operator methods defined in Queryable, such as OfType{TResult} and Cast{TResult}, call this method. They pass it a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> that represents a LINQ query.
            </remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the specified expression tree.</returns>
            <remarks>
            The <see cref="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)"/> method is used to create new <see cref="T:System.Linq.IQueryable`1"/> objects, given an expression tree. The query that is represented by the returned object is associated with a specific LINQ provider.
            Most of the Queryable standard query operator methods that return enumerable results call this method.They pass it a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> that represents a LINQ query.
            </remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>The value that results from executing the specified query.</returns>
            <remarks>
            The <see cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)"/> method executes queries that return a single value (instead of an enumerable sequence of values). Expression trees that represent queries that return enumerable results are executed when their associated <see cref="T:System.Linq.IQueryable"/> object is enumerated.
            </remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the strongly-typed query represented by a specified expression tree.
            </summary>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>The value that results from executing the specified query.</returns>
            <remarks>
            The <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)"/> method executes queries that return a single value (instead of an enumerable sequence of values). Expression trees that represent queries that return enumerable results are executed when the <see cref="T:System.Linq.IQueryable`1"/> object that contains the expression tree is enumerated.
            The Queryable standard query operator methods that return singleton results call <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)"/>. They pass it a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> that represents a LINQ query.
            </remarks>
        </member>
        <member name="T:System.Linq.IOrderedQueryable">
            <summary>
            Represents the result of a sorting operation.
            </summary>
        </member>
        <member name="T:System.Linq.IOrderedQueryable`1">
            <summary>
            Represents the result of a sorting operation.
            </summary>
            <typeparam name="T">The type of the content of the data source.</typeparam>
        </member>
        <member name="T:System.Net.WebRequestAsyncExtensions">
            <summary>
            Provides asynchronous methods for <see cref="T:System.Net.WebRequest"/> class.
            </summary>
        </member>
        <member name="M:System.Net.WebRequestAsyncExtensions.GetRequestStreamAsync(System.Net.WebRequest)">
            <summary>
            Asynchronously retrieves a <see cref="T:System.IO.Stream" /> for writing data
            to the Internet resource.
            </summary>
            <param name="source">The object to retrieve a stream.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:System.Net.WebRequestAsyncExtensions.GetResponseAsync(System.Net.WebRequest)">
            <summary>
            Asynchronously retrieves a response to an Internet request.
            </summary>
            <param name="source">The object to retrieve a response.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:System.PInvoke.StdIoStream">
            <summary>
            Defines for the current Stdio Stream
            </summary>
        </member>
        <member name="F:System.PInvoke.StdIoStream.Input">
            <summary>
            The standard input stream (typically the console)
            </summary>
        </member>
        <member name="F:System.PInvoke.StdIoStream.Output">
            <summary>
            The standard output stream (typically the console)
            </summary>
        </member>
        <member name="F:System.PInvoke.StdIoStream.ErrorOutput">
            <summary>
            The standard error output stream
            </summary>
        </member>
        <member name="T:System.PInvoke.SystemParametersInfoAction">
            <summary>
            Specifies the system-wide parameter to query or set.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetMouse">
            <summary>
            Retrieves the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetMouse">
            <summary>
            Sets the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetDeskWallpaper">
            <summary>
            For Windows CE 2.12 and later, sets the desktop wallpaper.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetDeskPattern">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetWorkArea">
            <summary>
            Sets the size of the work area — the portion of the screen not obscured by the system taskbar or by toolbars displayed on the desktop by applications.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetWorkArea">
            <summary>
            Retrieves the size of the work area on the primary screen.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetShowSounds">
            <summary>
            Retrieves whether the show sounds option is on or off.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetShowSounds">
            <summary>
            Turns the show sounds accessibility option on or off.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetWheelScrollLines">
            <summary>
            Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetWheelScrollLines">
            <summary>
            Sets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetFontSmoothingContrast">
            <summary>
            Retrieves a contrast value that is used in smoothing text displayed using Microsoft® ClearType®.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetFontSmoothingContrast">
            <summary>
            Sets the contrast value used when displaying text in a ClearType font.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetScreenSaveTimeout">
            <summary>
            Retrieves the screen saver time-out value, in seconds.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetScreenSaveTimeout">
            <summary>
            Sets the screen saver time-out value to the value of the uiParam parameter.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetBatteryIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetBatteryIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetExternalIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetExternalIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.SetWakeupIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on after a user notification that reactivates the suspended device.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetWakeupIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on after a user notification that reactivates a suspended device.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetPlatformType">
            <summary>
            Get the platform name e.g. PocketPC, Smartphone etc.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoAction.GetOemInfo">
            <summary>
            Get OEM specific information.
            </summary>
        </member>
        <member name="T:System.PInvoke.ProcessorArchitecture">
            <summary>
            Processor Architecture values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.WinAPI.Core.GetSystemInfo(OpenNETCF.WinAPI.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.Intel">
            <summary>
            Processor is Intel x86 based.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.MIPS">
            <summary>
            Processor is MIPS based.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.Alpha">
            <summary>
            Processor is Alpha based.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.PPC">
            <summary>
            Processor is Power PC based.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.SHX">
            <summary>
            Processor is SH3, SH4 etc.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.ARM">
            <summary>
            Processor is ARM based.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.IA64">
            <summary>
            Processor is Intel 64bit.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.Alpha64">
            <summary>
            Processor is Alpha 64bit.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorArchitecture.Unknown">
            <summary>
            Unknown processor architecture.
            </summary>
        </member>
        <member name="T:System.PInvoke.ProcessorType">
            <summary>
            Processor type values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.Win32.Core.GetSystemInfo(OpenNETCF.Win32.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Intel_386">
            <summary>
            Processor is Intel 80386.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Intel_486">
            <summary>
            Processor is Intel 80486.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Intel_Pentium">
            <summary>
            Processor is Intel Pentium (80586).
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Intel_PentiumII">
            <summary>
            Processor is Intel Pentium II (80686).
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Intel_IA64">
            <summary>
            Processor is Intel 64bit (IA64).
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.MIPS_R4000">
            <summary>
            Processor is MIPS R4000.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Alpha_21064">
            <summary>
            Processor is Alpha 21064.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.PPC_403">
            <summary>
            Processor is Power PC 403.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.PPC_601">
            <summary>
            Processor is Power PC 601.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.PPC_603">
            <summary>
            Processor is Power PC 603.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.PPC_604">
            <summary>
            Processor is Power PC 604.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.PPC_620">
            <summary>
            Processor is Power PC 620.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Hitachi_SH3">
            <summary>
            Processor is Hitachi SH3.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Hitachi_SH3E">
            <summary>
            Processor is Hitachi SH3E.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Hitachi_SH4">
            <summary>
            Processor is Hitachi SH4.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.Motorola_821">
            <summary>
            Processor is Motorola 821.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.SHx_SH3">
            <summary>
            Processor is SH3.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.SHx_SH4">
            <summary>
            Processor is SH4.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.StrongARM">
            <summary>
            Processor is StrongARM.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.ARM720">
            <summary>
            Processor is ARM 720.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.ARM820">
            <summary>
            Processor is ARM 820.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.ARM920">
            <summary>
            Processor is ARM 920.
            </summary>
        </member>
        <member name="F:System.PInvoke.ProcessorType.ARM_7TDMI">
            <summary>
            Processor is ARM 7 TDMI.
            </summary>
        </member>
        <member name="T:System.PInvoke.SystemParametersInfoFlags">
            <summary>
            Specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoFlags.None">
            <summary>
            No notifications are sent on settings changed.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoFlags.UpdateIniFile">
            <summary>
            Writes the new system-wide parameter setting to the user profile.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemParametersInfoFlags.SendChange">
            <summary>
            Broadcasts the WM_SETTINGCHANGE message after updating the user profile.
            </summary>
        </member>
        <member name="T:System.PInvoke.DevicePowerState">
            <summary>
            Device Power State
            </summary>
        </member>
        <member name="F:System.PInvoke.DevicePowerState.Unsepecified">
            <summary>
            The device power state is not specified
            </summary>
        </member>
        <member name="F:System.PInvoke.DevicePowerState.FullOn">
            <summary>
            Set to full on (D0)
            </summary>
        </member>
        <member name="F:System.PInvoke.DevicePowerState.LowPower">
            <summary>
            Set to low power mode (D1)
            </summary>
        </member>
        <member name="F:System.PInvoke.DevicePowerState.Standby">
            <summary>
            Set to standby mode (D2)
            </summary>
        </member>
        <member name="F:System.PInvoke.DevicePowerState.Sleep">
            <summary>
            Set to Sleep mode (D3)
            </summary>
        </member>
        <member name="F:System.PInvoke.DevicePowerState.Off">
            <summary>
            Power off (D4)
            </summary>
        </member>
        <member name="T:System.PInvoke.NotificationEvent">
            <summary>
            Available notification events
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.None">
            <summary>   
            No events—remove all event registrations for this application.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.TimeChange">
            <summary>   
            When the system time is changed.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.SyncEnd">
            <summary>   
            When data synchronization finishes.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.OnACPower">
            <summary>
            The user turned the AC power on.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.OffACPower">
            <summary>
            The user turned the alternating current (AC) power off.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.NetConnect">
            <summary>
            The device connected to a network.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.NetDisconnect">
            <summary>
            The device disconnected from a network.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.DeviceChange">
            <summary>   
            When a PC Card device is changed.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.IRDiscovered">
            <summary>
            The device discovered a server by using infrared communications.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.RS232Detected">
            <summary>   
            When an RS232 connection is made.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.RestoreEnd">
            <summary>   
            When a full device data restore completes.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.Wakeup">
            <summary>   
            When the device wakes up.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.TimeZoneChange">
            <summary>   
            When the time zone is changed.   
            </summary>   
        </member>
        <member name="F:System.PInvoke.NotificationEvent.MachineNameChange">
            <summary>
            When the machines name changes.
            Requires Windows CE.NET 4.2.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.RndisFNDetected">
            <summary>
            RNDISFN interface is instantiated.
            Requires Windows CE 5.0.
            </summary>
        </member>
        <member name="F:System.PInvoke.NotificationEvent.InternetProxyChange">
            <summary>
            The Internet Proxy used by the device has changed.
            Requires Windows CE 5.0.
            </summary>
        </member>
        <member name="T:System.PInvoke.TimeZoneState">
            <summary>
            Return values from <see cref="M:OpenNETCF.Win32.DateTime2.GetTimeZoneInformation"/>.
            </summary>
        </member>
        <member name="F:System.PInvoke.TimeZoneState.Unknown">
            <summary>
            The system cannot determine the current time zone.
            This value is returned if daylight savings time is not used in the current time zone, because there are no transition dates.
            </summary>
        </member>
        <member name="F:System.PInvoke.TimeZoneState.Standard">
            <summary>
            The system is operating in the range covered by the StandardDate member of the <see cref="T:OpenNETCF.WindowsCE.TimeZoneInformation"/> structure.
            </summary>
        </member>
        <member name="F:System.PInvoke.TimeZoneState.Daylight">
            <summary>
            The system is operating in the range covered by the DaylightDate member of the <see cref="T:OpenNETCF.WindowsCE.TimeZoneInformation"/> structure.
            </summary>
        </member>
        <member name="T:System.PInvoke.NativeMethods.SystemParametersInfoAction">
            <summary>
            Specifies the system-wide parameter to query or set.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetMouse">
            <summary>
            Retrieves the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetMouse">
            <summary>
            Sets the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetDeskWallpaper">
            <summary>
            For Windows CE 2.12 and later, sets the desktop wallpaper.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetDeskPattern">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetWorkArea">
            <summary>
            Sets the size of the work area — the portion of the screen not obscured by the system taskbar or by toolbars displayed on the desktop by applications.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetWorkArea">
            <summary>
            Retrieves the size of the work area on the primary screen.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetShowSounds">
            <summary>
            Retrieves whether the show sounds option is on or off.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetShowSounds">
            <summary>
            Turns the show sounds accessibility option on or off.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetWheelScrollLines">
            <summary>
            Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetWheelScrollLines">
            <summary>
            Sets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetFontSmoothingContrast">
            <summary>
            Retrieves a contrast value that is used in smoothing text displayed using Microsoft® ClearType®.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetFontSmoothingContrast">
            <summary>
            Sets the contrast value used when displaying text in a ClearType font.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetScreenSaveTimeout">
            <summary>
            Retrieves the screen saver time-out value, in seconds.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetScreenSaveTimeout">
            <summary>
            Sets the screen saver time-out value to the value of the uiParam parameter.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetBatteryIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetBatteryIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetExternalIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetExternalIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.SetWakeupIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on after a user notification that reactivates the suspended device.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetWakeupIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on after a user notification that reactivates a suspended device.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetPlatformType">
            <summary>
            Get the platform name e.g. PocketPC, Smartphone etc.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoAction.GetOemInfo">
            <summary>
            Get OEM specific information.
            </summary>
        </member>
        <member name="T:System.PInvoke.NativeMethods.SystemParametersInfoFlags">
            <summary>
            Specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoFlags.None">
            <summary>
            No notifications are sent on settings changed.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoFlags.UpdateIniFile">
            <summary>
            Writes the new system-wide parameter setting to the user profile.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.SystemParametersInfoFlags.SendChange">
            <summary>
            Broadcasts the WM_SETTINGCHANGE message after updating the user profile.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.BatteryPercentageUnknown">
            <summary>
            The remaining battery power is unknown.
            </summary>
        </member>
        <member name="T:System.PInvoke.NativeMethods.MemoryStatus">
            <summary>
            This structure contains information about current memory availability. The GlobalMemoryStatus function uses this structure.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.MemoryLoad">
            <summary>
            Specifies a number between 0 and 100 that gives a general idea of current memory utilization, in which 0 indicates no memory use and 100 indicates full memory use.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.TotalPhysical">
            <summary>
            Indicates the total number of bytes of physical memory.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.AvailablePhysical">
            <summary>
            Indicates the number of bytes of physical memory available.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.TotalPageFile">
            <summary>
            Indicates the total number of bytes that can be stored in the paging file. Note that this number does not represent the actual physical size of the paging file on disk.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.AvailablePageFile">
            <summary>
            Indicates the number of bytes available in the paging file.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.TotalVirtual">
            <summary>
            Indicates the total number of bytes that can be described in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="F:System.PInvoke.NativeMethods.MemoryStatus.AvailableVirtual">
            <summary>
            Indicates the number of bytes of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="T:System.PInvoke.SystemInfo">
            <summary>
            This structure contains information about the current computer system. This includes the processor type, page size, memory addresses, and OEM identifier.
            </summary>
            <seealso cref="M:System.PInvoke.NativeMethods.GetSystemInfo(System.PInvoke.SystemInfo@)"/>
        </member>
        <member name="F:System.PInvoke.SystemInfo.ProcessorArchitecture">
            <summary>
            The system's processor architecture.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.PageSize">
            <summary>
            The page size and the granularity of page protection and commitment.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.MinimumApplicationAddress">
            <summary>
            Pointer to the lowest memory address accessible to applications and dynamic-link libraries (DLLs). 
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.MaximumApplicationAddress">
            <summary>
            Pointer to the highest memory address accessible to applications and DLLs.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.ActiveProcessorMask">
            <summary>
            Specifies a mask representing the set of processors configured into the system. Bit 0 is processor 0; bit 31 is processor 31. 
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.NumberOfProcessors">
            <summary>
            Specifies the number of processors in the system.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.ProcessorType">
            <summary>
            Specifies the type of processor in the system.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.AllocationGranularity">
            <summary>
            Specifies the granularity with which virtual memory is allocated.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.ProcessorLevel">
            <summary>
            Specifies the system’s architecture-dependent processor level.
            </summary>
        </member>
        <member name="F:System.PInvoke.SystemInfo.ProcessorRevision">
            <summary>
            Specifies an architecture-dependent processor revision.
            </summary>
        </member>
        <member name="T:System.Progress`1">
            <summary>
            Provides an IProgress{T} that invokes callbacks for each reported progress value.
            </summary>
            <typeparam name="T">Specifies the type of the progress report value.</typeparam>
            <remarks>
            Any handler provided to the constructor or event handlers registered with
            the <see cref="E:System.Progress`1.ProgressChanged"/> event are invoked through a
            <see cref="T:System.Threading.SynchronizationContext"/> instance captured
            when the instance is constructed.  If there is no current SynchronizationContext
            at the time of construction, the callbacks will be invoked on the ThreadPool.
            </remarks>
        </member>
        <member name="F:System.Progress`1._synchronizationContext">
            <summary>The synchronization context captured upon construction.  This will never be null.</summary>
        </member>
        <member name="F:System.Progress`1._handler">
            <summary>The handler specified to the constructor.  This may be null.</summary>
        </member>
        <member name="F:System.Progress`1._invokeHandlers">
            <summary>A cached delegate used to post invocation to the synchronization context.</summary>
        </member>
        <member name="M:System.Progress`1.#ctor">
            <summary>Initializes the <see cref="T:System.Progress`1"/>.</summary>
        </member>
        <member name="M:System.Progress`1.#ctor(System.Action{`0})">
            <summary>Initializes the <see cref="T:System.Progress`1"/> with the specified callback.</summary>
            <param name="handler">
            A handler to invoke for each reported progress value.  This handler will be invoked
            in addition to any delegates registered with the <see cref="E:System.Progress`1.ProgressChanged"/> event.
            Depending on the <see cref="T:System.Threading.SynchronizationContext"/> instance captured by
            the <see cref="T:System.Progress`1"/> at construction, it's possible that this handler instance
            could be invoked concurrently with itself.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="E:System.Progress`1.ProgressChanged">
            <summary>Raised for each reported progress value.</summary>
            <remarks>
            Handlers registered with this event will be invoked on the
            <see cref="T:System.Threading.SynchronizationContext"/> captured when the instance was constructed.
            </remarks>
        </member>
        <member name="M:System.Progress`1.OnReport(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:System.Progress`1.InvokeHandlers(System.Object)">
            <summary>Invokes the action and event callbacks.</summary>
            <param name="state">The progress value.</param>
        </member>
        <member name="T:System.ProgressStatics">
            <summary>Holds static values for <see cref="T:System.Progress`1"/>.</summary>
            <remarks>This avoids one static instance per type T.</remarks>
        </member>
        <member name="F:System.ProgressStatics.DefaultContext">
            <summary>A default synchronization context that targets the ThreadPool.</summary>
        </member>
        <member name="T:System.Threading.Barrier">
            <summary>
            Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.
            </summary>
            <remarks>
            <para>
            A group of tasks cooperate by moving through a series of phases, where each in the group signals it
            has arrived at the <see cref="T:System.Threading.Barrier"/> in a given phase and implicitly waits for all others to
            arrive. The same <see cref="T:System.Threading.Barrier"/> can be used for multiple phases.
            </para>
            <para>
            All public and protected members of <see cref="T:System.Threading.Barrier"/> are thread-safe and may be used
            concurrently from multiple threads, with the exception of Dispose, which
            must only be used when all other operations on the <see cref="T:System.Threading.Barrier"/> have
            completed.
            </para>
            </remarks>
        </member>
        <member name="P:System.Threading.Barrier.ParticipantsRemaining">
            <summary>
            Gets the number of participants in the barrier that haven't yet signaled
            in the current phase.
            </summary>
            <remarks>
            This could be 0 during a post-phase action delegate execution or if the
            ParticipantCount is 0.
            </remarks>
        </member>
        <member name="P:System.Threading.Barrier.ParticipantCount">
            <summary>
            Gets the total number of participants in the barrier.
            </summary>
        </member>
        <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
            <summary>
            Gets the number of the barrier's current phase.
            </summary>
        </member>
        <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Barrier"/> class.
            </summary>
            <param name="participantCount">The number of participating threads.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="participantCount"/> is less than 0
            or greater than <see cref="T:System.Int16.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Barrier"/> class.
            </summary>
            <param name="participantCount">The number of participating threads.</param>
            <param name="postPhaseAction">The <see cref="T:System.Action`1"/> to be executed after each
            phase.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="participantCount"/> is less than 0
            or greater than <see cref="T:System.Int32.MaxValue"/>.</exception>
            <remarks>
            The <paramref name="postPhaseAction"/> delegate will be executed after
            all participants have arrived at the barrier in one phase.  The participants
            will not be released to the next phase until the postPhaseAction delegate
            has completed execution.
            </remarks>
        </member>
        <member name="M:System.Threading.Barrier.GetCurrentTotal(System.Int32,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Extract the three variables current, total and sense from a given big variable
            </summary>
            <param name="currentTotal">The integer variable that contains the other three variables</param>
            <param name="current">The current participant count</param>
            <param name="total">The total participants count</param>
            <param name="sense">The sense flag</param>
        </member>
        <member name="M:System.Threading.Barrier.SetCurrentTotal(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Write the three variables current. total and the sense to the m_currentTotal
            </summary>
            <param name="currentTotal">The old current total to compare</param>
            <param name="current">The current participant count</param>
            <param name="total">The total participants count</param>
            <param name="sense">The sense flag</param>
            <returns>True if the CAS succeeded, false otherwise</returns>
        </member>
        <member name="M:System.Threading.Barrier.AddParticipant">
            <summary>
            Notifies the <see cref="T:System.Threading.Barrier"/> that there will be an additional participant.
            </summary>
            <returns>The phase number of the barrier in which the new participants will first
            participate.</returns>
            <exception cref="T:System.InvalidOperationException">
            Adding a participant would cause the barrier's participant count to 
            exceed <see cref="T:System.Int16.MaxValue"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
            <summary>
            Notifies the <see cref="T:System.Threading.Barrier"/> that there will be additional participants.
            </summary>
            <param name="participantCount">The number of additional participants to add to the
            barrier.</param>
            <returns>The phase number of the barrier in which the new participants will first
            participate.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount"/> is less than
            0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Adding <paramref name="participantCount"/> participants would cause the
            barrier's participant count to exceed <see cref="T:System.Int16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.RemoveParticipant">
            <summary>
            Notifies the <see cref="T:System.Threading.Barrier"/> that there will be one less participant.
            </summary>
            <exception cref="T:System.InvalidOperationException">The barrier already has 0
            participants.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
            <summary>
            Notifies the <see cref="T:System.Threading.Barrier"/> that there will be fewer participants.
            </summary>
            <param name="participantCount">The number of additional participants to remove from the barrier.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="participantCount"/> is less than
            0.</exception>
            <exception cref="T:System.InvalidOperationException">The barrier already has 0 participants.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.SignalAndWait">
            <summary>
            Signals that a participant has reached the <see cref="T:System.Threading.Barrier"/> and waits for all other
            participants to reach the barrier as well.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action, the barrier currently has 0 participants,
            or the barrier is being used by more threads than are registered as participants.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
            <summary>
            Signals that a participant has reached the <see cref="T:System.Threading.Barrier"/> and waits for all other
            participants to reach the barrier, while observing a <see
            cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action, the barrier currently has 0 participants,
            or the barrier is being used by more threads than are registered as participants.
            </exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> has been
            canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
            <summary>
            Signals that a participant has reached the <see cref="T:System.Threading.Barrier"/> and waits for all other
            participants to reach the barrier as well, using a
            <see cref="T:System.TimeSpan"/> to measure the time interval.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of
            milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to
            wait indefinitely.</param>
            <returns>true if all other participants reached the barrier; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/>is a negative number
            other than -1 milliseconds, which represents an infinite time-out, or it is greater than
            <see cref="T:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action, the barrier currently has 0 participants,
            or the barrier is being used by more threads than are registered as participants.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Signals that a participant has reached the <see cref="T:System.Threading.Barrier"/> and waits for all other
            participants to reach the barrier as well, using a
            <see cref="T:System.TimeSpan"/> to measure the time interval, while observing a <see
            cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of
            milliseconds to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to
            wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <returns>true if all other participants reached the barrier; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/>is a negative number
            other than -1 milliseconds, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action, the barrier currently has 0 participants,
            or the barrier is being used by more threads than are registered as participants.
            </exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> has been
            canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
            <summary>
            Signals that a participant has reached the <see cref="T:System.Threading.Barrier"/> and waits for all other
            participants to reach the barrier as well, using a
            32-bit signed integer to measure the time interval.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <returns>true if all other participants reached the barrier; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action, the barrier currently has 0 participants,
            or the barrier is being used by more threads than are registered as participants.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Signals that a participant has reached the barrier and waits for all other participants to reach
            the barrier as well, using a
            32-bit signed integer to measure the time interval, while observing a <see
            cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <returns>true if all other participants reached the barrier; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action, the barrier currently has 0 participants,
            or the barrier is being used by more threads than are registered as participants.
            </exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> has been
            canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.Barrier.FinishPhase(System.Boolean)">
            <summary>
            Finish the phase by invoking the post phase action, and setting the event, this must be called by the 
            last arrival thread
            </summary>
            <param name="observedSense">The current phase sense</param>
        </member>
        <member name="M:System.Threading.Barrier.InvokePostPhaseAction(System.Object)">
            <summary>
            Helper method to call the post phase action
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:System.Threading.Barrier.SetResetEvents(System.Boolean)">
            <summary>
            Sets the current phase event and reset the next phase event
            </summary>
            <param name="observedSense">The current phase sense</param>
        </member>
        <member name="M:System.Threading.Barrier.WaitCurrentPhase(System.Threading.ManualResetEventSlim,System.Int64)">
            <summary>
            Wait until the current phase finishes completely by spinning until either the event is set,
            or the phase count is incremented more than one time
            </summary>
            <param name="currentPhaseEvent">The current phase event</param>
            <param name="observedPhase">The current phase for that thread</param>
        </member>
        <member name="M:System.Threading.Barrier.DiscontinuousWait(System.Threading.ManualResetEventSlim,System.Int32,System.Threading.CancellationToken,System.Int64)">
            <summary>
            The reason of discontinuous waiting instead of direct waiting on the event is to avoid the race where the sense is 
            changed twice because the next phase is finished (due to either RemoveParticipant is called or another thread joined
            the next phase instead of the current thread) so the current thread will be stuck on the event because it is reset back
            The maxWait and the shift numbers are arbitrarily chosen, there were no references picking them
            </summary>
            <param name="currentPhaseEvent">The current phase event</param>
            <param name="totalTimeout">wait timeout in milliseconds</param>
            <param name="token">cancellation token passed to SignalAndWait</param>
            <param name="observedPhase">The current phase number for this thread</param>
            <returns>True if the event is set or the phase number changed, false if the timeout expired</returns>
        </member>
        <member name="M:System.Threading.Barrier.Dispose">
            <summary>
            Releases all resources used by the current instance of <see cref="T:System.Threading.Barrier"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The method was invoked from within a post-phase action.
            </exception>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.Barrier"/>, Dispose is not thread-safe and may not be
            used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, releases the unmanaged resources used by the
            <see cref="T:System.Threading.Barrier"/>, and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release
            only unmanaged resources.</param>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.Barrier"/>, Dispose is not thread-safe and may not be
            used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.Barrier.ThrowIfDisposed">
            <summary>
            Throw ObjectDisposedException if the barrier is disposed
            </summary>
        </member>
        <member name="T:System.Threading.BarrierPostPhaseException">
            <summary>
            The exception that is thrown when the post-phase action of a <see cref="T:System.Threading.Barrier"/> fails.
            </summary>
        </member>
        <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"/> class.
            </summary>
        </member>
        <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"/> class with the specified inner exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"/> class with a specified error message.
            </summary>
            <param name="message">A string that describes the exception.</param>
        </member>
        <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.BarrierPostPhaseException"/> class with a specified error message and inner exception.
            </summary>
            <param name="message">A string that describes the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the BarrierPostPhaseException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Threading.LazyThreadSafetyMode">
            <summary>
            Specifies how a <see cref="T:System.Lazy`1"/> instance should synchronize access among multiple threads.
            </summary>
        </member>
        <member name="F:System.Threading.LazyThreadSafetyMode.None">
            <summary>
            This mode makes no guarantees around the thread-safety of the <see cref="T:System.Lazy`1"/> instance.  If used from multiple threads, the behavior of the <see cref="T:System.Lazy`1"/> is undefined.
            This mode should be used when a <see cref="T:System.Lazy`1"/> is guaranteed to never be initialized from more than one thread simultaneously and high performance is crucial. 
            If valueFactory throws an exception when the <see cref="T:System.Lazy`1"/> is initialized, the exception will be cached and returned on subsequent accesses to Value. Also, if valueFactory recursively
            accesses Value on this <see cref="T:System.Lazy`1"/> instance, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
        </member>
        <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
            <summary>
            When multiple threads attempt to simultaneously initialize a <see cref="T:System.Lazy`1"/> instance, this mode allows each thread to execute the
            valueFactory but only the first thread to complete initialization will be allowed to set the final value of the  <see cref="T:System.Lazy`1"/>.
            Once initialized successfully, any future calls to Value will return the cached result.  If valueFactory throws an exception on any thread, that exception will be
            propagated out of Value. If any thread executes valueFactory without throwing an exception and, therefore, successfully sets the value, that value will be returned on
            subsequent accesses to Value from any thread.  If no thread succeeds in setting the value, IsValueCreated will remain false and subsequent accesses to Value will result in
            the valueFactory delegate re-executing.  Also, if valueFactory recursively accesses Value on this  <see cref="T:System.Lazy`1"/> instance, an exception will NOT be thrown.
            </summary>
        </member>
        <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
            <summary>
            This mode uses locks to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1"/> instance in a thread-safe manner.  In general,
            taken if this mode is used in conjunction with a <see cref="T:System.Lazy`1"/> valueFactory delegate that uses locks internally, a deadlock can occur if not
            handled carefully.  If valueFactory throws an exception when the<see cref="T:System.Lazy`1"/> is initialized, the exception will be cached and returned on
            subsequent accesses to Value. Also, if valueFactory recursively accesses Value on this <see cref="T:System.Lazy`1"/> instance, a  <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
        </member>
        <member name="T:System.Threading.LazyInitializer">
            <summary>
            Provides lazy initialization routines.
            </summary>
            <remarks>
            These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using
            references to ensure targets have been initialized as they are accessed.
            </remarks>
        </member>
        <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
            <summary>
            Initializes a target reference type with the type's default constructor if the target has not
            already been initialized.
            </summary>
            <typeparam name="T">The refence type of the reference to be initialized.</typeparam>
            <param name="target">A reference of type <typeparamref name="T"/> to initialize if it has not
            already been initialized.</param>
            <returns>The initialized reference of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.MissingMemberException">Type <typeparamref name="T"/> does not have a default
            constructor.</exception>
            <exception cref="T:System.MemberAccessException">
            Permissions to access the constructor of type <typeparamref name="T"/> were missing.
            </exception>
            <remarks>
            <para>
            This method may only be used on reference types. To ensure initialization of value
            types, see other overloads of EnsureInitialized.
            </para>
            <para>
            This method may be used concurrently by multiple threads to initialize <paramref name="target"/>.  
            In the event that multiple threads access this method concurrently, multiple instances of <typeparamref name="T"/>
            may be created, but only one will be stored into <paramref name="target"/>. In such an occurrence, this method will not dispose of the
            objects that were not stored.  If such objects must be disposed, it is up to the caller to determine 
            if an object was not used and to then dispose of the object appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
            <summary>
            Initializes a target reference type using the specified function if it has not already been
            initialized.
            </summary>
            <typeparam name="T">The reference type of the reference to be initialized.</typeparam>
            <param name="target">The reference of type <typeparamref name="T"/> to initialize if it has not
            already been initialized.</param>
            <param name="valueFactory">The <see cref="T:System.Func{T}"/> invoked to initialize the
            reference.</param>
            <returns>The initialized reference of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.MissingMemberException">Type <typeparamref name="T"/> does not have a
            default constructor.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="valueFactory"/> returned
            null.</exception>
            <remarks>
            <para>
            This method may only be used on reference types, and <paramref name="valueFactory"/> may
            not return a null reference (Nothing in Visual Basic). To ensure initialization of value types or
            to allow null reference types, see other overloads of EnsureInitialized.
            </para>
            <para>
            This method may be used concurrently by multiple threads to initialize <paramref name="target"/>.  
            In the event that multiple threads access this method concurrently, multiple instances of <typeparamref name="T"/>
            may be created, but only one will be stored into <paramref name="target"/>. In such an occurrence, this method will not dispose of the
            objects that were not stored.  If such objects must be disposed, it is up to the caller to determine 
            if an object was not used and to then dispose of the object appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:System.Threading.LazyInitializer.EnsureInitializedCore``1(``0@,System.Func{``0})">
            <summary>
            Initialize the target using the given delegate (slow path).
            </summary>
            <typeparam name="T">The reference type of the reference to be initialized.</typeparam>
            <param name="target">The variable that need to be initialized</param>
            <param name="valueFactory">The delegate that will be executed to initialize the target</param>
            <returns>The initialized variable</returns>
        </member>
        <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
            <summary>
            Initializes a target reference or value type with its default constructor if it has not already
            been initialized.
            </summary>
            <typeparam name="T">The type of the reference to be initialized.</typeparam>
            <param name="target">A reference or value of type <typeparamref name="T"/> to initialize if it
            has not already been initialized.</param>
            <param name="initialized">A reference to a boolean that determines whether the target has already
            been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing
            <paramref name="target"/>. If <paramref name="syncLock"/> is null, a new object will be instantiated.</param>
            <returns>The initialized value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
            <summary>
            Initializes a target reference or value type with a specified function if it has not already been
            initialized.
            </summary>
            <typeparam name="T">The type of the reference to be initialized.</typeparam>
            <param name="target">A reference or value of type <typeparamref name="T"/> to initialize if it
            has not already been initialized.</param>
            <param name="initialized">A reference to a boolean that determines whether the target has already
            been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing
            <paramref name="target"/>. If <paramref name="syncLock"/> is null, a new object will be instantiated.</param>
            <param name="valueFactory">The <see cref="T:System.Func{T}"/> invoked to initialize the
            reference or value.</param>
            <returns>The initialized value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:System.Threading.LazyInitializer.EnsureInitializedCore``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
            <summary>
            Ensure the target is initialized and return the value (slow path). This overload permits nulls
            and also works for value type targets. Uses the supplied function to create the value.
            </summary>
            <typeparam name="T">The type of target.</typeparam>
            <param name="target">A reference to the target to be initialized.</param>
            <param name="initialized">A reference to a location tracking whether the target has been initialized.</param>
            <param name="syncLock">A reference to a location containing a mutual exclusive lock. If <paramref name="syncLock"/> is null, 
            a new object will be instantiated.</param>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> to invoke in order to produce the lazily-initialized value.
            </param>
            <returns>The initialized object.</returns>
        </member>
        <member name="T:System.Threading.ManualResetEventSlim">
            <summary>
            Provides a slimmed down version of <see cref="T:System.Threading.ManualResetEvent"/>.
            </summary>
            <remarks>
            All public and protected members of <see cref="T:System.Threading.ManualResetEventSlim"/> are thread-safe and may be used
            concurrently from multiple threads, with the exception of Dispose, which
            must only be used when all other operations on the <see cref="T:System.Threading.ManualResetEventSlim"/> have
            completed, and Reset, which should only be used when no other threads are
            accessing the event.
            </remarks>
        </member>
        <member name="P:System.Threading.ManualResetEventSlim.WaitHandle">
            <summary>
            Gets the underlying <see cref="T:System.Threading.WaitHandle"/> object for this <see
            cref="T:System.Threading.ManualResetEventSlim"/>.
            </summary>
            <value>The underlying <see cref="T:System.Threading.WaitHandle"/> event object fore this <see
            cref="T:System.Threading.ManualResetEventSlim"/>.</value>
            <remarks>
            Accessing this property forces initialization of an underlying event object if one hasn't
            already been created.  To simply wait on this <see cref="T:System.Threading.ManualResetEventSlim"/>, 
            the public Wait methods should be preferred.
            </remarks>
        </member>
        <member name="P:System.Threading.ManualResetEventSlim.IsSet">
            <summary>
            Gets whether the event is set.
            </summary>
            <value>true if the event has is set; otherwise, false.</value>
        </member>
        <member name="P:System.Threading.ManualResetEventSlim.SpinCount">
            <summary>
            Gets the number of spin waits that will be occur before falling back to a true wait.
            </summary>
        </member>
        <member name="P:System.Threading.ManualResetEventSlim.Waiters">
            <summary>
            How many threads are waiting.
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim"/>
            class with an initial state of nonsignaled.
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim"/>
            class with a boolean value indicating whether to set the initial state to signaled.
            </summary>
            <param name="initialState">true to set the initial state signaled; false to set the initial state
            to nonsignaled.</param>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim"/>
            class with a Boolean value indicating whether to set the initial state to signaled and a specified
            spin count.
            </summary>
            <param name="initialState">true to set the initial state to signaled; false to set the initial state
            to nonsignaled.</param>
            <param name="spinCount">The number of spin waits that will occur before falling back to a true
            wait.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="spinCount"/> is less than
            0 or greater than the maximum allowed value.</exception>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Initialize(System.Boolean,System.Int32)">
            <summary>
            Initializes the internal state of the event.
            </summary>
            <param name="initialState">Whether the event is set initially or not.</param>
            <param name="spinCount">The spin count that decides when the event will block.</param>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.EnsureLockObjectCreated">
            <summary>
            Helper to ensure the lock object is created before first use.
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.LazyInitializeEvent">
            <summary>
            This method lazily initializes the event object. It uses CAS to guarantee that
            many threads racing to call this at once don't result in more than one event
            being stored and used. The event will be signaled or unsignaled depending on
            the state of the thin-event itself, with synchronization taken into account.
            </summary>
            <returns>True if a new event was created and stored, false otherwise.</returns>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Set">
            <summary>
            Sets the state of the event to signaled, which allows one or more threads waiting on the event to
            proceed.
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Set(System.Boolean)">
            <summary>
            Private helper to actually perform the Set.
            </summary>
            <param name="duringCancellation">Indicates whether we are calling Set() during cancellation.</param>
            <exception cref="T:System.OperationCanceledException">The object has been canceled.</exception>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Reset">
            <summary>
            Sets the state of the event to nonsignaled, which causes threads to block.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ManualResetEventSlim"/>, <see cref="M:System.Threading.ManualResetEventSlim.Reset"/> is not
            thread-safe and may not be used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Wait">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"/> is set.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The maximum number of waiters has been exceeded.
            </exception>
            <remarks>
            The caller of this method blocks indefinitely until the current instance is set. The caller will
            return immediately if the event is currently in a set state.
            </remarks>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"/> receives a signal,
            while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <exception cref="T:System.InvalidOperationException">
            The maximum number of waiters has been exceeded.
            </exception>
            <exception cref="T:System.OperationCanceledExcepton"><paramref name="cancellationToken"/> was
            canceled.</exception>
            <remarks>
            The caller of this method blocks indefinitely until the current instance is set. The caller will
            return immediately if the event is currently in a set state.
            </remarks>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"/> is set, using a
            <see cref="T:System.TimeSpan"/> to measure the time interval.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim"/> was set; otherwise,
            false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative
            number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater
            than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The maximum number of waiters has been exceeded.
            </exception>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"/> is set, using a
            <see cref="T:System.TimeSpan"/> to measure the time interval, while observing a <see
            cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim"/> was set; otherwise,
            false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative
            number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater
            than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.Threading.OperationCanceledException"><paramref
            name="cancellationToken"/> was canceled.</exception>
            <exception cref="T:System.InvalidOperationException">
            The maximum number of waiters has been exceeded.
            </exception>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"/> is set, using a
            32-bit signed integer to measure the time interval.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim"/> was set; otherwise,
            false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">
            The maximum number of waiters has been exceeded.
            </exception>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"/> is set, using a
            32-bit signed integer to measure the time interval, while observing a <see
            cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <returns>true if the <see cref="T:System.Threading.ManualResetEventSlim"/> was set; otherwise,
            false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
            <exception cref="T:System.InvalidOperationException">
            The maximum number of waiters has been exceeded.
            </exception>
            <exception cref="T:System.Threading.OperationCanceledException"><paramref
            name="cancellationToken"/> was canceled.</exception>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Dispose">
            <summary>
            Releases all resources used by the current instance of <see cref="T:System.Threading.ManualResetEventSlim"/>.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ManualResetEventSlim"/>, <see cref="M:System.Threading.ManualResetEventSlim.Dispose"/> is not
            thread-safe and may not be used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, releases the unmanaged resources used by the 
            <see cref="T:System.Threading.ManualResetEventSlim"/>, and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ManualResetEventSlim"/>, <see cref="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)"/> is not
            thread-safe and may not be used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.ThrowIfDisposed">
            <summary>
            Throw ObjectDisposedException if the MRES is disposed
            </summary>
        </member>
        <member name="F:System.Threading.ManualResetEventSlim.s_cancellationTokenCallback">
            <summary>
            Private helper method to wake up waiters when a cancellationToken gets canceled.
            </summary>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.UpdateStateAtomically(System.Int32,System.Int32)">
            <summary>
            Private helper method for updating parts of a bit-string state value.
            Mainly called from the IsSet and Waiters properties setters
            </summary>
            <remarks>
            Note: the parameter types must be int as CompareExchange cannot take a Uint
            </remarks>
            <param name="newBits">The new value</param>
            <param name="updateBitsMask">The mask used to set the bits</param>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.ExtractStatePortionAndShiftRight(System.Int32,System.Int32,System.Int32)">
            <summary>
            Private helper method - performs Mask and shift, particular helpful to extract a field from a packed word.
            eg ExtractStatePortionAndShiftRight(0x12345678, 0xFF000000, 24) => 0x12, ie extracting the top 8-bits as a simple integer 
            
            ?? is there a common place to put this rather than being private to MRES?
            </summary>
            <param name="state"></param>
            <param name="mask"></param>
            <param name="rightBitShiftCount"></param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.ManualResetEventSlim.ExtractStatePortion(System.Int32,System.Int32)">
            <summary>
            Performs a Mask operation, but does not perform the shift.
            This is acceptable for boolean values for which the shift is unnecessary
            eg (val &amp; Mask) != 0 is an appropriate way to extract a boolean rather than using
            ((val &amp; Mask) &gt;&gt; shiftAmount) == 1
            
            ?? is there a common place to put this rather than being private to MRES?
            </summary>
            <param name="state"></param>
            <param name="mask"></param>
        </member>
        <member name="T:System.Threading.ReaderWriterLockSlim">
            <summary>
            A reader-writer lock implementation that is intended to be simple, yet very
            efficient.  In particular only 1 interlocked operation is taken for any lock 
            operation (we use spin locks to achieve this).  The spin lock is never held
            for more than a few instructions (in particular, we never call event APIs
            or in fact any non-trivial API while holding the spin lock).   
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.GetThreadRWCount(System.Boolean)">
            <summary>
            This routine retrieves/sets the per-thread counts needed to enforce the
            various rules related to acquiring the lock. 
            
            DontAllocate is set to true if the caller just wants to get an existing
            entry for this thread, but doesn't want to add one if an existing one
            could not be found.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.LazyCreateEvent(System.Threading.EventWaitHandle@,System.Threading.ReaderWriterLockSlim.EnterLockType)">
            <summary>
            A routine for lazily creating a event outside the lock (so if errors
            happen they are outside the lock and that we don't do much work
            while holding a spin lock).  If all goes well, reenter the lock and
            set 'waitEvent' 
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.WaitOnEvent(System.Threading.EventWaitHandle,System.UInt32@,System.Threading.ReaderWriterLockSlim.TimeoutTracker,System.Threading.ReaderWriterLockSlim.EnterLockType)">
            <summary>
            Waits on 'waitEvent' with a timeout  
            Before the wait 'numWaiters' is incremented and is restored before leaving this routine.
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateWaiters">
            <summary>
            Determines the appropriate events to set, leaves the locks, and sets the events. 
            </summary>
        </member>
        <member name="F:System.Threading.ReaderWriterLockSlim.SpinLock._enterDeprioritizationState">
            <summary>
            Used to deprioritize threads attempting to enter the lock when they would not make progress after doing so.
            <see cref="M:System.Threading.ReaderWriterLockSlim.SpinLock.EnterSpin(System.Threading.ReaderWriterLockSlim.EnterSpinLockReason)"/> avoids acquiring the lock as long as the operation for which it
            was called is deprioritized.
            
            Layout:
            - Low 16 bits: Number of threads that have deprioritized an enter-any-write operation
            - High 16 bits: Number of threads that have deprioritized an enter-any-read operation
            </summary>
        </member>
        <member name="T:System.Threading.Semaphore">
            <summary>
            Limits the number of threads that can access a resource, or a particular type of resource, concurrently.
            </summary>
        </member>
        <member name="M:System.Threading.Semaphore.WaitOne">
            <summary>
            When overridden in a derived class, blocks the current thread until the current Threading.WaitHandle receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, WaitHandle.WaitOne() never returns.</returns>
        </member>
        <member name="M:System.Threading.Semaphore.WaitOne(System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current Threading.WaitHandle receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Threading.Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Semaphore.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            When overridden in a derived class, blocks the current thread until the current instance receives a signal, using a TimeSpan to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="timeout">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="notApplicableOnCE">Just pass false</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Semaphore.Close">
            <summary>
            Releases all resources held by the current <see cref="T:System.Threading.WaitHandle"/>
            </summary>
        </member>
        <member name="T:System.Threading.SemaphoreSlim">
            <summary>
            Limits the number of threads that can access a resource or pool of resources concurrently.
            </summary>
            <remarks>
            <para>
            The <see cref="T:System.Threading.SemaphoreSlim"/> provides a lightweight semaphore class that doesn't
            use Windows kernel semaphores.
            </para>
            <para>
            All public and protected members of <see cref="T:System.Threading.SemaphoreSlim"/> are thread-safe and may be used
            concurrently from multiple threads, with the exception of Dispose, which
            must only be used when all other operations on the <see cref="T:System.Threading.SemaphoreSlim"/> have
            completed.
            </para>
            </remarks>
        </member>
        <member name="P:System.Threading.SemaphoreSlim.CurrentCount">
            <summary>
            Gets the current count of the <see cref="T:System.Threading.SemaphoreSlim"/>.
            </summary>
            <value>The current count of the <see cref="T:System.Threading.SemaphoreSlim"/>.</value>
        </member>
        <member name="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
            <summary>
            Returns a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait on the semaphore.
            </summary>
            <value>A <see cref="T:System.Threading.WaitHandle"/> that can be used to wait on the
            semaphore.</value>
            <remarks>
            A successful wait on the <see cref="P:System.Threading.SemaphoreSlim.AvailableWaitHandle"/> does not imply a successful wait on
            the <see cref="T:System.Threading.SemaphoreSlim"/> itself, nor does it decrement the semaphore's
            count. <see cref="P:System.Threading.SemaphoreSlim.AvailableWaitHandle"/> exists to allow a thread to block waiting on multiple
            semaphores, but such a wait should be followed by a true wait on the target semaphore.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The <see
            cref="T:System.Threading.SemaphoreSlim"/> has been disposed.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim"/> class, specifying
            the initial number of requests that can be granted concurrently.
            </summary>
            <param name="initialCount">The initial number of requests for the semaphore that can be granted
            concurrently.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialCount"/>
            is less than 0.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim"/> class, specifying
            the initial and maximum number of requests that can be granted concurrently.
            </summary>
            <param name="initialCount">The initial number of requests for the semaphore that can be granted
            concurrently.</param>
            <param name="maxCount">The maximum number of requests for the semaphore that can be granted
            concurrently.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="initialCount"/>
            is less than 0. -or-
            <paramref name="initialCount"/> is greater than <paramref name="maxCount"/>. -or-
            <paramref name="maxCount"/> is less than 0.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Wait">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim"/>, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> token to
            observe.</param>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> was
            canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim"/>, using a <see
            cref="T:System.TimeSpan"/> to measure the time interval.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim"/>;
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative
            number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater
            than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim"/>, using a <see
            cref="T:System.TimeSpan"/> to measure the time interval, while observing a <see
            cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to
            observe.</param>
            <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim"/>;
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative
            number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater
            than <see cref="F:System.Int32.MaxValue"/>.</exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> was canceled.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim"/>, using a 32-bit
            signed integer to measure the time interval.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim"/>;
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim"/>,
            using a 32-bit signed integer to measure the time interval, 
            while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to
            wait indefinitely.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>true if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1,
            which represents an infinite time-out.</exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> was canceled.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(System.Int32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Local helper function, waits on the monitor until the monitor recieves signal or the
            timeout is expired
            </summary>
            <param name="millisecondsTimeout">The maximum timeout</param>
            <param name="startTime">The start ticks to calculate the elapsed time</param>
            <param name="cancellationToken">The CancellationToken to observe.</param>
            <returns>true if the monitor recieved a signal, false if the timeout expired</returns>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitAsync">
            <summary>
            Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim"/>.
            </summary>
            <returns>A task that will complete when the semaphore has been entered.</returns>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim"/>, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <returns>A task that will complete when the semaphore has been entered.</returns>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> token to observe.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The current instance has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
            <summary>
            Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim"/>,
            using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered 
            the <see cref="T:System.Threading.SemaphoreSlim"/>, otherwise with a result of false.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1,
            which represents an infinite time-out.
            </exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
            <summary>
            Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim"/>, using a <see
            cref="T:System.TimeSpan"/> to measure the time interval.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered 
            the <see cref="T:System.Threading.SemaphoreSlim"/>, otherwise with a result of false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents 
            an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim"/>, using a <see
            cref="T:System.TimeSpan"/> to measure the time interval, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> token to observe.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered 
            the <see cref="T:System.Threading.SemaphoreSlim"/>, otherwise with a result of false.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The current instance has already been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents 
            an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim"/>,
            using a 32-bit signed integer to measure the time interval, 
            while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered 
            the <see cref="T:System.Threading.SemaphoreSlim"/>, otherwise with a result of false.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a negative number other than -1,
            which represents an infinite time-out.
            </exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.CreateAndAddAsyncWaiter">
            <summary>Creates a new task and stores it into the async waiters list.</summary>
            <returns>The created task.</returns>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.RemoveAsyncWaiter(System.Threading.SemaphoreSlim.TaskNode)">
            <summary>Removes the waiter task from the linked list.</summary>
            <param name="task">The task to remove.</param>
            <returns>true if the waiter was in the list; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.WaitUntilCountOrTimeoutAsync(System.Threading.SemaphoreSlim.TaskNode,System.Int32,System.Threading.CancellationToken)">
            <summary>Performs the asynchronous wait.</summary>
            <param name="asyncWaiter"></param>
            <param name="millisecondsTimeout">The timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task to return to the caller.</returns>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Release">
            <summary>
            Exits the <see cref="T:System.Threading.SemaphoreSlim"/> once.
            </summary>
            <returns>The previous count of the <see cref="T:System.Threading.SemaphoreSlim"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
            <summary>
            Exits the <see cref="T:System.Threading.SemaphoreSlim"/> a specified number of times.
            </summary>
            <param name="releaseCount">The number of times to exit the semaphore.</param>
            <returns>The previous count of the <see cref="T:System.Threading.SemaphoreSlim"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="releaseCount"/> is less
            than 1.</exception>
            <exception cref="T:System.Threading.SemaphoreFullException">The <see cref="T:System.Threading.SemaphoreSlim"/> has
            already reached its maximum size.</exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has already been
            disposed.</exception>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.QueueWaiterTask(System.Threading.SemaphoreSlim.TaskNode)">
            <summary>
            Queues a waiter task to the ThreadPool. We use this small helper method so that
            the larger Release(count) method does not need to be SecuritySafeCritical.
            </summary>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Dispose">
            <summary>
            Releases all resources used by the current instance of <see
            cref="T:System.Threading.SemaphoreSlim"/>.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.SemaphoreSlim"/>, <see cref="M:System.Threading.SemaphoreSlim.Dispose"/> is not
            thread-safe and may not be used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, releases the unmanaged resources used by the 
            <see cref="T:System.Threading.ManualResetEventSlim"/>, and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.SemaphoreSlim"/>, <see cref="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)"/> is not
            thread-safe and may not be used concurrently with other members of this instance.
            </remarks>
        </member>
        <member name="F:System.Threading.SemaphoreSlim.s_cancellationTokenCanceledEventHandler">
            <summary>
            Private helper method to wake up waiters when a cancellationToken gets canceled.
            </summary>
        </member>
        <member name="M:System.Threading.SemaphoreSlim.CheckDispose">
            <summary>
            Checks the dispose status by checking the lock object, if it is null means that object
            has been disposed and throw ObjectDisposedException
            </summary>
        </member>
        <member name="T:System.Threading.SpinLock">
            <summary>
            Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop
            repeatedly checking until the lock becomes available.
            </summary>
            <remarks>
            <para>
            Spin locks can be used for leaf-level locks where the object allocation implied by using a <see
            cref="T:System.Threading.Monitor"/>, in size or due to garbage collection pressure, is overly
            expensive. Avoiding blocking is another reason that a spin lock can be useful, however if you expect
            any significant amount of blocking, you are probably best not using spin locks due to excessive
            spinning. Spinning can be beneficial when locks are fine grained and large in number (for example, a
            lock per node in a linked list) as well as when lock hold times are always extremely short. In
            general, while holding a spin lock, one should avoid blocking, calling anything that itself may
            block, holding more than one spin lock at once, making dynamically dispatched calls (interface and
            virtuals), making statically dispatched calls into any code one doesn't own, or allocating memory.
            </para>
            <para>
            <see cref="T:System.Threading.SpinLock"/> should only be used when it's been determined that doing so will improve an
            application's performance. It's also important to note that <see cref="T:System.Threading.SpinLock"/> is a value type,
            for performance reasons. As such, one must be very careful not to accidentally copy a SpinLock
            instance, as the two instances (the original and the copy) would then be completely independent of
            one another, which would likely lead to erroneous behavior of the application. If a SpinLock instance
            must be passed around, it should be passed by reference rather than by value.
            </para>
            <para>
            Do not store <see cref="T:System.Threading.SpinLock"/> instances in readonly fields.
            </para>
            <para>
            All members of <see cref="T:System.Threading.SpinLock"/> are thread-safe and may be used from multiple threads
            concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:System.Threading.SpinLock.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.SpinLock"/>
            structure with the option to track thread IDs to improve debugging.
            </summary>
            <remarks>
            The default constructor for <see cref="T:System.Threading.SpinLock"/> tracks thread ownership.
            </remarks>
            <param name="enableThreadOwnerTracking">Whether to capture and use thread IDs for debugging
            purposes.</param>
        </member>
        <member name="M:System.Threading.SpinLock.Enter(System.Boolean@)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.SpinLock"/>
            structure with the option to track thread IDs to improve debugging.
            </summary>
            <remarks>
            The default constructor for <see cref="T:System.Threading.SpinLock"/> tracks thread ownership.
            </remarks>
            <summary>
            Acquires the lock in a reliable manner, such that even if an exception occurs within the method
            call, <paramref name="lockTaken"/> can be examined reliably to determine whether the lock was
            acquired.
            </summary>
            <remarks>
            <see cref="T:System.Threading.SpinLock"/> is a non-reentrant lock, meaning that if a thread holds the lock, it is
            not allowed to enter the lock again. If thread ownership tracking is enabled (whether it's
            enabled is available through <see cref="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled"/>), an exception will be
            thrown when a thread tries to re-enter a lock it already holds. However, if thread ownership
            tracking is disabled, attempting to enter a lock already held will result in deadlock.
            </remarks>
            <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref
            name="lockTaken"/> must be initialized to false prior to calling this method.</param>
            <exception cref="T:System.Threading.LockRecursionException">
            Thread ownership tracking is enabled, and the current thread has already acquired this lock.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="lockTaken"/> argument must be initialized to false prior to calling Enter.
            </exception>
        </member>
        <member name="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
            <summary>
            Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within
            the method call, <paramref name="lockTaken"/> can be examined reliably to determine whether the
            lock was acquired.
            </summary>
            <remarks>
            Unlike <see cref="M:System.Threading.SpinLock.Enter(System.Boolean@)"/>, TryEnter will not block waiting for the lock to be available. If the
            lock is not available when TryEnter is called, it will return immediately without any further
            spinning.
            </remarks>
            <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref
            name="lockTaken"/> must be initialized to false prior to calling this method.</param>
            <exception cref="T:System.Threading.LockRecursionException">
            Thread ownership tracking is enabled, and the current thread has already acquired this lock.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="lockTaken"/> argument must be initialized to false prior to calling TryEnter.
            </exception>
        </member>
        <member name="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
            <summary>
            Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within
            the method call, <paramref name="lockTaken"/> can be examined reliably to determine whether the
            lock was acquired.
            </summary>
            <remarks>
            Unlike <see cref="M:System.Threading.SpinLock.Enter(System.Boolean@)"/>, TryEnter will not block indefinitely waiting for the lock to be
            available. It will block until either the lock is available or until the <paramref
            name="timeout"/>
            has expired.
            </remarks>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref
            name="lockTaken"/> must be initialized to false prior to calling this method.</param>
            <exception cref="T:System.Threading.LockRecursionException">
            Thread ownership tracking is enabled, and the current thread has already acquired this lock.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="lockTaken"/> argument must be initialized to false prior to calling TryEnter.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative
            number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater
            than <see cref="F:System.Int32.MaxValue"/> milliseconds.
            </exception>
        </member>
        <member name="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
            <summary>
            Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within
            the method call, <paramref name="lockTaken"/> can be examined reliably to determine whether the
            lock was acquired.
            </summary>
            <remarks>
            Unlike <see cref="M:System.Threading.SpinLock.Enter(System.Boolean@)"/>, TryEnter will not block indefinitely waiting for the lock to be
            available. It will block until either the lock is available or until the <paramref
            name="millisecondsTimeout"/> has expired.
            </remarks>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="lockTaken">True if the lock is acquired; otherwise, false. <paramref
            name="lockTaken"/> must be initialized to false prior to calling this method.</param>
            <exception cref="T:System.Threading.LockRecursionException">
            Thread ownership tracking is enabled, and the current thread has already acquired this lock.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="lockTaken"/> argument must be initialized to false prior to calling TryEnter.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is
            a negative number other than -1, which represents an infinite time-out.</exception>
        </member>
        <member name="M:System.Threading.SpinLock.ContinueTryEnter(System.Int32,System.Boolean@)">
            <summary>
            Try acquire the lock with long path, this is usually called after the first path in Enter and
            TryEnter failed The reason for short path is to make it inline in the run time which improves the
            performance. This method assumed that the parameter are validated in Enter ir TryENter method
            </summary>
            <param name="millisecondsTimeout">The timeout milliseconds</param>
            <param name="lockTaken">The lockTaken param</param>
        </member>
        <member name="M:System.Threading.SpinLock.DecrementWaiters">
            <summary>
            decrements the waiters, in case of the timeout is expired
            </summary>
        </member>
        <member name="M:System.Threading.SpinLock.ContinueTryEnterWithThreadTracking(System.Int32,System.UInt32,System.Boolean@)">
            <summary>
            ContinueTryEnter for the thread tracking mode enabled
            </summary>
        </member>
        <member name="M:System.Threading.SpinLock.Exit">
            <summary>
            Releases the lock.
            </summary>
            <remarks>
            The default overload of <see cref="M:System.Threading.SpinLock.Exit"/> provides the same behavior as if calling <see
            cref="M:System.Threading.SpinLock.Exit(System.Boolean)"/> using true as the argument, but Exit() could be slightly faster than Exit(true).
            </remarks>
            <exception cref="T:System.Threading.SynchronizationLockException">
            Thread ownership tracking is enabled, and the current thread is not the owner of this lock.
            </exception>
        </member>
        <member name="M:System.Threading.SpinLock.Exit(System.Boolean)">
            <summary>
            Releases the lock.
            </summary>
            <param name="useMemoryBarrier">
            A Boolean value that indicates whether a memory fence should be issued in order to immediately
            publish the exit operation to other threads.
            </param>
            <remarks>
            Calling <see cref="M:System.Threading.SpinLock.Exit(System.Boolean)"/> with the <paramref name="useMemoryBarrier"/> argument set to
            true will improve the fairness of the lock at the expense of some performance. The default <see
            cref="M:System.Threading.SpinLock.Enter(System.Boolean@)"/>
            overload behaves as if specifying true for <paramref name="useMemoryBarrier"/>.
            </remarks>
            <exception cref="T:System.Threading.SynchronizationLockException">
            Thread ownership tracking is enabled, and the current thread is not the owner of this lock.
            </exception>
        </member>
        <member name="M:System.Threading.SpinLock.ExitSlowPath(System.Boolean)">
            <summary>
            The slow path for exit method if the fast path failed
            </summary>
            <param name="useMemoryBarrier">
            A Boolean value that indicates whether a memory fence should be issued in order to immediately
            publish the exit operation to other threads
            </param>
        </member>
        <member name="P:System.Threading.SpinLock.IsHeld">
            <summary>
            Gets whether the lock is currently held by any thread.
            </summary>
        </member>
        <member name="P:System.Threading.SpinLock.IsHeldByCurrentThread">
            <summary>
            Gets whether the lock is currently held by any thread.
            </summary>
            <summary>
            Gets whether the lock is held by the current thread.
            </summary>
            <remarks>
            If the lock was initialized to track owner threads, this will return whether the lock is acquired
            by the current thread. It is invalid to use this property when the lock was initialized to not
            track thread ownership.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thread ownership tracking is disabled.
            </exception>
        </member>
        <member name="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
            <summary>Gets whether thread ownership tracking is enabled for this instance.</summary>
        </member>
        <member name="T:System.Threading.SpinLock.SystemThreading_SpinLockDebugView">
            <summary>
            Internal class used by debug type proxy attribute to display the owner thread ID 
            </summary>
        </member>
        <member name="M:System.Threading.SpinLock.SystemThreading_SpinLockDebugView.#ctor(System.Threading.SpinLock)">
            <summary>
            SystemThreading_SpinLockDebugView constructor
            </summary>
            <param name="spinLock">The SpinLock to be proxied.</param>
        </member>
        <member name="P:System.Threading.SpinLock.SystemThreading_SpinLockDebugView.IsHeldByCurrentThread">
            <summary>
            Checks if the lock is held by the current thread or not
            </summary>
        </member>
        <member name="P:System.Threading.SpinLock.SystemThreading_SpinLockDebugView.OwnerThreadID">
            <summary>
            Gets the current owner thread, zero if it is released
            </summary>
        </member>
        <member name="P:System.Threading.SpinLock.SystemThreading_SpinLockDebugView.IsHeld">
            <summary>
             Gets whether the lock is currently held by any thread or not.
            </summary>
        </member>
        <member name="T:System.Threading.SpinWait">
            <summary>
            Provides support for spin-based waiting.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Threading.SpinWait"/> encapsulates common spinning logic. On single-processor machines, yields are
            always used instead of busy waits, and on computers with Intel(R) processors employing Hyper-Threading
            technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of
            spinning and true yielding.
            </para>
            <para>
            <see cref="T:System.Threading.SpinWait"/> is a value type, which means that low-level code can utilize SpinWait without
            fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications.
            In most cases, you should use the synchronization classes provided by the .NET Framework, such as
            <see cref="T:System.Threading.Monitor"/>. For most purposes where spin waiting is required, however,
            the <see cref="T:System.Threading.SpinWait"/> type should be preferred over the <see
            cref="T:System.Threading.Thread.SpinWait"/> method.
            </para>
            <para>
            While SpinWait is designed to be used in concurrent applications, it is not designed to be
            used from multiple threads concurrently.  SpinWait's members are not thread-safe.  If multiple
            threads must spin, each should use its own instance of SpinWait.
            </para>
            </remarks>
        </member>
        <member name="F:System.Threading.SpinWait.SpinCountforSpinBeforeWait">
            <summary>
            A suggested number of spin iterations before doing a proper wait, such as waiting on an event that becomes signaled
            when the resource becomes available.
            </summary>
            <remarks>
            These numbers were arrived at by experimenting with different numbers in various cases that currently use it. It's
            only a suggested value and typically works well when the proper wait is something like an event.
            
            Spinning less can lead to early waiting and more context switching, spinning more can decrease latency but may use
            up some CPU time unnecessarily. Depends on the situation too, for instance SemaphoreSlim uses more iterations
            because the waiting there is currently a lot more expensive (involves more spinning, taking a lock, etc.). It also
            depends on the likelihood of the spin being successful and how long the wait would be but those are not accounted
            for here.
            </remarks>
        </member>
        <member name="P:System.Threading.SpinWait.Count">
            <summary>
            Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce"/> has been called on this instance.
            </summary>
        </member>
        <member name="P:System.Threading.SpinWait.NextSpinWillYield">
            <summary>
            Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce"/> will yield the processor, triggering a
            forced context switch.
            </summary>
            <value>Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce"/> will yield the processor, triggering a
            forced context switch.</value>
            <remarks>
            On a single-CPU machine, <see cref="M:System.Threading.SpinWait.SpinOnce"/> always yields the processor. On machines with
            multiple CPUs, <see cref="M:System.Threading.SpinWait.SpinOnce"/> may yield after an unspecified number of calls.
            </remarks>
        </member>
        <member name="M:System.Threading.SpinWait.SpinOnce">
            <summary>
            Performs a single spin.
            </summary>
            <remarks>
            This is typically called in a loop, and may change in behavior based on the number of times a
            <see cref="M:System.Threading.SpinWait.SpinOnce"/> has been called thus far on this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.SpinWait.Reset">
            <summary>
            Resets the spin counter.
            </summary>
            <remarks>
            This makes <see cref="M:System.Threading.SpinWait.SpinOnce"/> and <see cref="P:System.Threading.SpinWait.NextSpinWillYield"/> behave as though no calls
            to <see cref="M:System.Threading.SpinWait.SpinOnce"/> had been issued on this instance. If a <see cref="T:System.Threading.SpinWait"/> instance
            is reused many times, it may be useful to reset it to avoid yielding too soon.
            </remarks>
        </member>
        <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
            <summary>
            Spins until the specified condition is satisfied.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns true.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="condition"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
            <summary>
            Spins until the specified condition is satisfied or until the specified timeout is expired.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns true.</param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, 
            or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <returns>True if the condition is satisfied within the timeout; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="condition"/> argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number
            other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
            <summary>
            Spins until the specified condition is satisfied or until the specified timeout is expired.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns true.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>True if the condition is satisfied within the timeout; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="condition"/> argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
        </member>
        <member name="T:System.Threading.PlatformHelper">
            <summary>
            A helper class to get the number of processors, it updates the numbers of processors every sampling interval.
            </summary>
        </member>
        <member name="P:System.Threading.PlatformHelper.ProcessorCount">
            <summary>
            Gets the number of available processors
            </summary>
        </member>
        <member name="F:System.Threading.PlatformHelper.IsSingleProcessor">
            <summary>
            Gets whether the current machine has only a single processor.
            </summary>
            <remarks>This typically does not change on a machine, so it's checked only once.</remarks>
        </member>
        <member name="T:System.Threading.SendOrPostCallback">
            <summary>
            Represents a method to be called when a message is to be dispatched to
            a synchronization context.
            </summary>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:System.Threading.SynchronizationContext">
            <summary>
            Provides the basic functionality for propagating a synchronization
            context in various synchronization models.
            </summary>
        </member>
        <member name="M:System.Threading.SynchronizationContext.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Threading.SynchronizationContext"/> class.
            </summary>
        </member>
        <member name="P:System.Threading.SynchronizationContext.Current">
            <summary>
            Gets the synchronization context for the current thread.
            </summary>
        </member>
        <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            Sets the current synchronization context.
            </summary>
            <param name="syncContext">
            The <see cref="T:System.Threading.SynchronizationContext"/> object to be set.
            </param>
        </member>
        <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches a synchronous
            message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches an asynchronous
            message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Threading.SynchronizationContext.OperationStarted">
            <summary>
                Optional override for subclasses, for responding to notification that operation is starting.
            </summary>
        </member>
        <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
            <summary>
                Optional override for subclasses, for responding to notification that operation has completed.
            </summary>
        </member>
        <member name="M:System.Threading.SynchronizationContext.CreateCopy">
            <summary>
            When overridden in a derived class, creates a copy of the
            synchronization context.
            </summary>
            <returns>A new <see cref="T:System.Threading.SynchronizationContext"/> object.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Task`1">
            <summary>
            Represents an asynchronous operation that produces a result at some time in the future.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </typeparam>
        </member>
        <member name="P:System.Threading.Tasks.Task`1.Result">
            <summary>
            Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <remarks>
            The get accessor for this property ensures that the asynchronous operation is complete before
            returning. Once the result of the computation is available, it is stored and will be returned
            immediately on later calls to <see cref="P:System.Threading.Tasks.Task`1.Result"/>.
            </remarks>
            <exception cref="T:System.AggregateException">An exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task`1"/>.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor">
            <summary>
            Internal constructor to create an empty task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Object,System.Threading.CancellationToken)">
            <summary>
            Internal constructor to create an empty task.
            </summary>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(`0,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Internal constructor to create an already-completed task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to be assigned to this task.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function and creation options.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the task's behavior.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function and creation options.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the task's behavior.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function and state.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="state">An object representing data to be used by the action.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified action, state, and options.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="state">An object representing data to be used by the function.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to be assigned to the new task.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified action, state, and options.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="state">An object representing data to be used by the function.</param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the task's behavior.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified action, state, and options.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="state">An object representing data to be used by the function.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to be assigned to the new task.</param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the task's behavior.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Delegate,System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.Task)">
            <summary>
            Internal constructor to allow creation of continue tasks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.ExecuteTaskAction">
            <summary>
            Unbox task action and execute it.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
            <summary>
            Creates an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original
            context captured; otherwise, false.
            </param>
            <returns>A new awaiter instance.</returns>
        </member>
        <member name="T:System.Threading.Tasks.InternalTaskOptions">
            <summary>
            Task creation flags which are only used internally.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.InternalTaskOptions.None">
            <summary> Specifies "No internal task options" </summary>
        </member>
        <member name="F:System.Threading.Tasks.InternalTaskOptions.InternalOptionsMask">
            <summary>Used to filter out internal vs. public task creation options.</summary>
        </member>
        <member name="F:System.Threading.Tasks.InternalTaskOptions.LazyCancellation">
            <summary>
            Store the presence of TaskContinuationOptions.LazyCancellation, since it does not directly
            translate into any TaskCreationOptions.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.InternalTaskOptions.QueuedByRuntime">
            <summary>Specifies that the task will be queued by the runtime before handing it over to the user. 
            This flag will be used to skip the cancellationtoken registration step, which is only meant for unstarted tasks.</summary>
        </member>
        <member name="F:System.Threading.Tasks.InternalTaskOptions.DoNotDispose">
            <summary>
            Denotes that Dispose should be a complete nop for a Task.  Used when constructing tasks that are meant to be cached/reused.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.Task">
            <summary>
            Represents an asynchronous operation.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task.m_stateObject">
            <summary>
            A state object that can be optionally supplied, passed to action.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task.m_exceptions">
            <summary>
            A set of exceptions occurred when trying to execute current task.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.CompletedTask">
            <summary>
            Gets a task that's already been completed successfully.
            </summary>
            <remarks>
            May not always return the same instance.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.Exception">
            <summary>
            Gets the <see cref="T:System.AggregateException">Exception</see> that caused the <see
            cref="T:System.Threading.Tasks.Task">Task</see> to end prematurely. If the <see
            cref="T:System.Threading.Tasks.Task">Task</see> completed successfully or has not yet thrown any
            exceptions, this will return null.
            </summary>
            <remarks>
            Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a
            <see cref="T:System.AggregateException"/> in calls to <see cref="M:System.Threading.Tasks.Task.Wait">Wait</see>
            or in accesses to the <see cref="P:System.Threading.Tasks.Task.Exception"/> property.  Any exceptions not observed by the time
            the Task instance is garbage collected will be propagated on the finalizer thread.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.Id">
            <summary>
            Gets a unique ID for this <see cref="T:System.Threading.Tasks.Task">Task</see> instance.
            </summary>
            <remarks>
            Task IDs are assigned on-demand and do not necessarily represent the order in the which Task
            instances were created.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.IsCompleted">
            <summary>
            Gets whether this <see cref="T:System.Threading.Tasks.Task">Task</see> has completed.
            </summary>
            <remarks>
            <see cref="P:System.Threading.Tasks.Task.IsCompleted"/> will return true when the Task is in one of the three
            final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion">RanToCompletion</see>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">Faulted</see>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled">Canceled</see>.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.CreationOptions">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used
            to create this task.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.IsFaulted">
            <summary>
            Gets whether the <see cref="T:System.Threading.Tasks.Task"/> completed due to an unhandled exception.
            </summary>
            <remarks>
            If <see cref="P:System.Threading.Tasks.Task.IsFaulted"/> is true, the Task's <see cref="P:System.Threading.Tasks.Task.Status"/> will be equal to
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">TaskStatus.Faulted</see>, and its
            <see cref="P:System.Threading.Tasks.Task.Exception"/> property will be non-null.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.Factory">
            <summary>
            Provides access to factory methods for creating
            <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>
            instances.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.Status">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskStatus">TaskStatus</see> of this Task. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor">
            <summary>
            Internal constructor to create an empty task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Object,System.Threading.CancellationToken)">
            <summary>
            Internal constructor to create an empty task.
            </summary>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that will be assigned to the new task.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Internal constructor to create an already-completed task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Delegate,System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.Task)">
            <summary>
            Internal constructor to allow creation of continue tasks.
            </summary>
            <param name="action">The delegate that represents the code to execute in the Task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken" /> that will be assigned to the new task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the Task's behavior.</param>
            <param name="continueSource">The task that run before current one.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action.
            </summary>
            <param name="action">The delegate that represents the code to execute in the Task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action and <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.
            </summary>
            <param name="action">The delegate that represents the code to execute in the Task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            that will be assigned to the new Task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action and creation options.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the Task's behavior.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action and creation options.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the Task's behavior.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action and state.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action, state, and options.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken"/> that will be assigned to the new task.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action, state, and options.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the Task's behavior.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action, state, and options.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.Task.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">
            The <see cref="T:System.Threading.Tasks.TaskCreationOptions">TaskCreationOptions</see> used to
            customize the Task's behavior.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="creationOptions"/> argument specifies an invalid value for <see
            cref="T:System.Threading.Tasks.TaskCreationOptions"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.EnsureStartOnce">
            <summary>
            Throws an exception when called more than once.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.Start">
            <summary>
            Starts the <see cref="T:System.Threading.Tasks.Task"/>, scheduling it for execution to the current <see
            cref="T:System.Threading.ThreadPool">ThreadPool</see>.
            </summary>
            <remarks>
            A task may only be started and run only once.  Any attempts to schedule a task a second time
            will result in an exception.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Threading.Tasks.Task"/> is already been started.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Threading.Tasks.Task"/> could not be enqueued for execution.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.TaskStartAction">
            <summary>
            Executes the action designed for current task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.TaskStartAction(System.Object)">
            <summary>
            Executes the action designed for current task.
            </summary>
            <param name="stateObject">Ignored.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.ExecuteTaskAction">
            <summary>
            Unbox task action and execute it.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.RunSynchronously">
            <summary>
            Runs the <see cref="T:System.Threading.Tasks.Task"/> synchronously on the current <see cref="T:System.Threading.Thread"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Threading.Tasks.Task"/> is already been started.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution.
            </summary>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution
            within a specified time interval.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to
            wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <returns>
            true if the <see cref="T:System.Threading.Tasks.Task"/> completed execution within
            the allotted time; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            timeout is a negative number other than -1 milliseconds, which
            represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution.
            </summary>
            <param name="cancellationToken">
            A <see cref="P:System.Threading.Tasks.Task.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <exception cref="T:System.OperationCanceledException">
            The <paramref name="cancellationToken"/> was canceled.
            </exception>
            <exception cref="T:System.AggregateException">
            The <see cref="T:System.Threading.Tasks.Task"/> was canceled -or- an exception was thrown during the execution of the <see
            cref="T:System.Threading.Tasks.Task"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
            <summary>
            Waits for the System.Threading.Tasks.Task to complete execution
            within a specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or
            System.Threading.Timeout.Infinite (-1) to wait indefinitely.
            </param>
            <returns>
            true if the System.Threading.Tasks.Task completed execution within
            the allotted time; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            millisecondsTimeout is a negative number other than -1, which
            represents an infinite time-out.
            </exception>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of the
            System.Threading.Tasks.Task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to
            wait indefinitely.
            </param>
            <param name="cancellationToken">
            A <see cref="P:System.Threading.Tasks.Task.CancellationToken"/> to observe while waiting for the task to complete.
            </param>
            <returns>
            true if the <see cref="T:System.Threading.Tasks.Task"/> completed execution within the allotted time; otherwise, false.
            </returns>
            <exception cref="T:System.AggregateException">
            The <see cref="T:System.Threading.Tasks.Task"/> was canceled -or- an exception was thrown during the execution of the <see
            cref="T:System.Threading.Tasks.Task"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an
            infinite time-out.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The <paramref name="cancellationToken"/> was canceled.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.GetAwaiter">
            <summary>
            Gets an awaiter to await this <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <returns>A new awaiter instance.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original
            context captured; otherwise, false.
            </param>
            <returns>A new awaiter instance.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.Yield">
            <summary>
            Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
            <returns>
            A context that, when awaited, will asynchronously transition back into the current context at the 
            time of the await. If the current SynchronizationContext is non-null, that is treated as the current context.
            Otherwise, TaskScheduler.Current is treated as the current context.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.Dispose">
            <summary>
            Disposes the <see cref="T:System.Threading.Tasks.Task"/>, releasing all of its unmanaged resources.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.AsyncState">
            <summary>
            Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task">Task</see> was created,
            or null if none was supplied.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait for the task to
            complete.
            </summary>
            <remarks>
            Using the wait functionality provided by <see cref="M:System.Threading.Tasks.Task.Wait"/>
            should be preferred over using <see cref="P:System.IAsyncResult.AsyncWaitHandle"/> for similar
            functionality.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.Tasks.Task"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value>true if the asynchronous operation completed synchronously; otherwise, false.</value>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <param name="continuationAction">
            An action to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task as an argument.
            </param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationAction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <param name="continuationAction">
            An action to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task as and the caller-supplied state object as arguments.
            </param>
            <param name="state">An object representing data to be used by the continuation action.</param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationAction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the continuation.
            </typeparam>
            <param name="continuationFunction">
            A function to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task as an argument.
            </param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task`1"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationFunction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the continuation.
            </typeparam>
            <param name="continuationFunction">
            A function to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task and the caller-supplied state object as arguments.
            </param>
            <param name="state">An object representing data to be used by the continuation function.</param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task`1"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationFunction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.AggregateException">
            At least one of the <see cref="T:System.Threading.Tasks.Task"/> instances was canceled -or- an exception was thrown during
            the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"/> instances.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <returns>
            true if all of the <see cref="T:System.Threading.Tasks.Task"/> instances completed execution within the allotted time;
            otherwise, false.
            </returns>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see
            cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.AggregateException">
            At least one of the <see cref="T:System.Threading.Tasks.Task"/> instances was canceled -or- an exception was thrown during
            the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"/> instances.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents an
            infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <returns>
            true if all of the <see cref="T:System.Threading.Tasks.Task"/> instances completed execution within the allotted time;
            otherwise, false.
            </returns>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to
            wait indefinitely.</param>
            <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.AggregateException">
            At least one of the <see cref="T:System.Threading.Tasks.Task"/> instances was canceled -or- an exception was thrown during
            the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"/> instances.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an
            infinite time-out.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <returns>The index of the completed task in the <paramref name="tasks"/> array argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see
            cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>
            The index of the completed task in the <paramref name="tasks"/> array argument, or -1 if the
            timeout occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents an
            infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to
            wait indefinitely.
            </param>
            <returns>
            The index of the completed task in the <paramref name="tasks"/> array argument, or -1 if the
            timeout occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an
            infinite time-out.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed
            successfully with the specified result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed exceptionally with the specified exception.</summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed exceptionally with the specified exception.</summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task"/> that's completed due to cancellation with the specified token.</summary>
            <param name="cancellationToken">The token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed due to cancellation with the specified token.</summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="cancellationToken">The token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a Task handle for that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <returns>A Task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a proxy for the
            Task returned by <paramref name="function"/>.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task that represents a proxy for the Task returned by <paramref name="function"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task(TResult) that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a proxy for the
            Task(TResult) returned by <paramref name="function"/>.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy Task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="delay">The time span to wait before completing the returned Task</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="delay"/> is less than -1 or greater than Int32.MaxValue.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="delay">The time span to wait before completing the returned Task</param>
            <param name="cancellationToken">The cancellation token that will be checked prior to completing the returned task.</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="delay"/> is less than -1 or greater than Int32.MaxValue.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned Task</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="millisecondsDelay"/> is less than -1.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned Task</param>
            <param name="cancellationToken">The cancellation token that will be checked prior to completing the returned task.</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="millisecondsDelay"/> is less than -1.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task.
            </exception>       
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task, or was empty.
            </exception>
        </member>
        <member name="F:System.Threading.Tasks.Task.ContingentProperties.m_action">
            <summary>
            The body of the task. Might be <see cref="T:System.Action"/>,
            <see cref="T:System.Action`1"/>, <see cref="T:System.Func`1"/> or
            <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task.ContingentProperties.m_taskCompletedEvent">
            <summary>
            A thread-safe event which notifies that current task is completed its execution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContingentProperties.SetCompleted">
            <summary>
            Sets the internal completion event.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskContinuationOptions">
            <summary>
            Specifies flags that control optional behavior for the creation and execution of continuation tasks.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
            <summary>
            Default = "Continue on any, no task options, run asynchronously"
            Specifies that the default behavior should be used.  Continuations, by default, will
            be scheduled when the antecedent task completes, regardless of the task's final <see
            cref="T:System.Threading.Tasks.TaskStatus">TaskStatus</see>.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
            <summary>
            A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> to schedule a
            task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to
            be run sooner, and tasks scheduled later will be more likely to be run later.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
            <summary>
            Specifies that a task will be a long-running, course-grained operation.  It provides
            a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> that
            oversubscription may be warranted.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
            <summary>
            Specifies that a task is attached to a parent in the task hierarchy.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
            <summary>
            Specifies that an InvalidOperationException will be thrown if an attempt is made to attach a child task to the created task.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
            <summary>
            Prevents the ambient scheduler from being seen as the current scheduler in the created task.  This means that operations
            like StartNew or ContinueWith that are performed in the created task will see TaskScheduler.Default as the current scheduler.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
            <summary>
            In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
            <summary>
            Specifies that the continuation task should not be scheduled if its antecedent ran to completion.
            This option is not valid for multi-task continuations.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
            <summary>
            Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled
            exception. This option is not valid for multi-task continuations.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
            <summary>
            Specifies that the continuation task should not be scheduled if its antecedent was canceled. This
            option is not valid for multi-task continuations.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
            <summary>
            Specifies that the continuation task should be scheduled only if its antecedent ran to
            completion. This option is not valid for multi-task continuations.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
            <summary>
            Specifies that the continuation task should be scheduled only if its antecedent threw an
            unhandled exception. This option is not valid for multi-task continuations.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
            <summary>
            Specifies that the continuation task should be scheduled only if its antecedent was canceled.
            This option is not valid for multi-task continuations.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
            <summary>
            Specifies that the continuation task should be executed synchronously. With this option
            specified, the continuation will be run on the same thread that causes the antecedent task to
            transition into its final state. If the antecedent is already complete when the continuation is
            created, the continuation will run on the thread creating the continuation.  Only very
            short-running continuations should be executed synchronously.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskCreationOptions">
            <summary>
            Specifies flags that control optional behavior for the creation and execution of tasks.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
            <summary>
            Specifies that the default behavior should be used.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
            <summary>
            A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> to schedule a
            task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to
            be run sooner, and tasks scheduled later will be more likely to be run later.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
            <summary>
            Specifies that a task will be a long-running, course-grained operation. It provides a hint to the
            <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> that oversubscription may be
            warranted. 
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
            <summary>
            Specifies that a task is attached to a parent in the task hierarchy.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
            <summary>
            Specifies that an InvalidOperationException will be thrown if an attempt is made to attach a child task to the created task.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
            <summary>
            Prevents the ambient scheduler from being seen as the current scheduler in the created task.  This means that operations
            like StartNew or ContinueWith that are performed in the created task will see TaskScheduler.Default as the current scheduler.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously">
            <summary>
            Forces continuations added to the current task to be executed asynchronously.
            This option has precedence over TaskContinuationOptions.ExecuteSynchronously
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensions">
            <summary>Provides a set of static methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task"/> instances.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation of a <see cref="T:System.Threading.Tasks.Task`1"/>.</summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task`1"/> to unwrap.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation of the provided <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a proxy <see cref="T:System.Threading.Tasks.Task`1"/> that represents the
            asynchronous operation of a <see cref="T:System.Threading.Tasks.Task`1"/> inside
            another <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task`1"/> inside another <see cref="T:System.Threading.Tasks.Task`1"/> to unwrap.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous
            operation of the provided <see cref="T:System.Threading.Tasks.Task`1"/> inside
            another <see cref="T:System.Threading.Tasks.Task`1"/>.
            </returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskFactory">
            <summary>
            Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task"/> objects.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
            <summary>
            Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"/> instance with the default configuration.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
            <summary>
            Creates and starts a task.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <returns>The started task.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task">Task</see>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="action"/> 
            argument is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task">Task</see>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="action"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"/></param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <param name="scheduler">The <see
            cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>
            that is used to schedule the created <see
            cref="T:System.Threading.Tasks.Task">Task</see>.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task">Task</see>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="action"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="scheduler"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/> delegate.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/>
            delegate.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"/></param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task">Task</see>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="action"/>
            argument is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/>
            delegate.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task">Task</see>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="action"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/>
            delegate.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task">Task.</see></param>
            <param name="scheduler">The <see
            cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>
            that is used to schedule the created <see
            cref="T:System.Threading.Tasks.Task">Task</see>.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task">Task</see>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="action"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="scheduler"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="function">
            A function delegate that returns the future result to be available
            through the <see cref="T:System.Threading.Tasks.Task`1"/>.
            </param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the
            <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
            </typeparam>
            <param name="function">A function delegate that returns the future result to be available through
            the <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"/></param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="function"/>
            argument is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the
            <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
            </typeparam>
            <param name="function">A function delegate that returns the future result to be available through
            the <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="function"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the
            <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
            </typeparam>
            <param name="function">A function delegate that returns the future result to be available through
            the <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="scheduler">The <see
            cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>
            that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}">
            Task{TResult}</see>.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="function"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="scheduler"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">
            The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"/>.
            </typeparam>
            <param name="function">
            A function delegate that returns the future result to be available
            through the <see cref="T:System.Threading.Tasks.Task`1"/>.
            </param>
            <param name="state">
            An object containing data to be used by the <paramref name="function"/> delegate.
            </param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the
            <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
            </typeparam>
            <param name="function">A function delegate that returns the future result to be available through
            the <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="state">An object containing data to be used by the <paramref name="function"/>
            delegate.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task"/></param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="function"/>
            argument is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the
            <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
            </typeparam>
            <param name="function">A function delegate that returns the future result to be available through
            the <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="state">An object containing data to be used by the <paramref name="function"/>
            delegate.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="function"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task{TResult}"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the
            <see cref="T:System.Threading.Tasks.Task{TResult}">Task</see>.
            </typeparam>
            <param name="function">A function delegate that returns the future result to be available through
            the <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="state">An object containing data to be used by the <paramref name="function"/>
            delegate.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the
            created
            <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</param>
            <param name="scheduler">The <see
            cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see>
            that is used to schedule the created <see cref="T:System.Threading.Tasks.Task{TResult}">
            Task{TResult}</see>.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task{TResult}"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="function"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref
            name="scheduler"/>
            argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the
            <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions
            value.</exception>
            <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken">CancellationToken</see>
            has already been disposed.
            </exception>
        </member>
        <member name="T:System.Threading.Tasks.TaskStatus">
            <summary>
            Represents the current stage in the lifecycle of a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Created">
            <summary> 
            The task has been initialized but has not yet been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary> 
            The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running but has not yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task has finished executing and is implicitly waiting for
            attached child tasks to complete.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task completed execution successfully.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken
            while the token was in signaled state, or the task's CancellationToken was already signaled before the
            task started executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.ValueTask`1">
            <summary>
            Provides a value type that wraps a <see cref="T:System.Threading.Tasks.Task`1"/> and a <typeparamref name="TResult"/>,
            only one of which is used.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <remarks>
            <para>
            Methods may return an instance of this value type when it's likely that the result of their
            operations will be available synchronously and when the method is expected to be invoked so
            frequently that the cost of allocating a new <see cref="T:System.Threading.Tasks.Task`1"/> for each call will
            be prohibitive.
            </para>
            <para>
            There are tradeoffs to using a <see cref="T:System.Threading.Tasks.ValueTask`1"/> instead of a <see cref="T:System.Threading.Tasks.Task`1"/>.
            For example, while a <see cref="T:System.Threading.Tasks.ValueTask`1"/> can help avoid an allocation in the case where the 
            successful result is available synchronously, it also contains two fields whereas a <see cref="T:System.Threading.Tasks.Task`1"/>
            as a reference type is a single field.  This means that a method call ends up returning two fields worth of
            data instead of one, which is more data to copy.  It also means that if a method that returns one of these
            is awaited within an async method, the state machine for that async method will be larger due to needing
            to store the struct that's two fields instead of a single reference.
            </para>
            <para>
            Further, for uses other than consuming the result of an asynchronous operation via await, 
            <see cref="T:System.Threading.Tasks.ValueTask`1"/> can lead to a more convoluted programming model, which can in turn actually 
            lead to more allocations.  For example, consider a method that could return either a <see cref="T:System.Threading.Tasks.Task`1"/> 
            with a cached task as a common result or a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.  If the consumer of the result 
            wants to use it as a <see cref="T:System.Threading.Tasks.Task`1"/>, such as to use with in methods like Task.WhenAll and Task.WhenAny, 
            the <see cref="T:System.Threading.Tasks.ValueTask`1"/> would first need to be converted into a <see cref="T:System.Threading.Tasks.Task`1"/> using 
            <see cref="M:System.Threading.Tasks.ValueTask`1.AsTask"/>, which leads to an allocation that would have been avoided if a cached 
            <see cref="T:System.Threading.Tasks.Task`1"/> had been used in the first place.
            </para>
            <para>
            As such, the default choice for any asynchronous method should be to return a <see cref="T:System.Threading.Tasks.Task"/> or 
            <see cref="T:System.Threading.Tasks.Task`1"/>. Only if performance analysis proves it worthwhile should a <see cref="T:System.Threading.Tasks.ValueTask`1"/> 
            be used instead of <see cref="T:System.Threading.Tasks.Task`1"/>.  There is no non-generic version of <see cref="T:System.Threading.Tasks.ValueTask`1"/> 
            as the Task.CompletedTask property may be used to hand back a successfully completed singleton in the case where
            a <see cref="T:System.Threading.Tasks.Task"/>-returning method completes synchronously and successfully.
            </para>
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.ValueTask`1._task">
            <summary>The task to be used if the operation completed asynchronously or if it completed synchronously but non-successfully.</summary>
        </member>
        <member name="F:System.Threading.Tasks.ValueTask`1._result">
            <summary>The result to be used if the operation completed successfully synchronously.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
            <summary>Initialize the <see cref="T:System.Threading.Tasks.ValueTask`1"/> with the result of the successful operation.</summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initialize the <see cref="T:System.Threading.Tasks.ValueTask`1"/> with a <see cref="T:System.Threading.Tasks.Task`1"/> that represents the operation.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
            <summary>Returns a value indicating whether this value is equal to a specified <see cref="T:System.Object"/>.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
            <summary>Returns a value indicating whether this value is equal to a specified <see cref="T:System.Threading.Tasks.ValueTask`1"/> value.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
            <summary>Returns a value indicating whether two <see cref="T:System.Threading.Tasks.ValueTask`1"/> values are equal.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
            <summary>Returns a value indicating whether two <see cref="T:System.Threading.Tasks.ValueTask`1"/> values are not equal.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.AsTask">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task`1"/> object to represent this ValueTask.  It will
            either return the wrapped task object if one exists, or it'll manufacture a new
            task object to represent the result.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.ValueTask`1"/> represents a completed operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.ValueTask`1"/> represents a successfully completed operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.ValueTask`1"/> represents a failed operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
            <summary>Gets whether the <see cref="T:System.Threading.Tasks.ValueTask`1"/> represents a canceled operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.ValueTask`1.Result">
            <summary>Gets the result.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
            <summary>Gets an awaiter for this value.</summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
            <summary>Configures an awaiter for this value.</summary>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the captured context; otherwise, false.
            </param>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.ToString">
            <summary>Gets a string-representation of this <see cref="T:System.Threading.Tasks.ValueTask`1"/>.</summary>
        </member>
        <member name="T:System.Threading.ThreadLocal`1">
            <summary>
            Provides thread-local storage of data.
            </summary>
            <typeparam name="T">Specifies the type of data stored per-thread.</typeparam>
            <remarks>
            <para>
            With the exception of <see cref="M:System.Threading.ThreadLocal`1.Dispose"/>, all public and protected members of 
            <see cref="T:System.Threading.ThreadLocal`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </para>
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.#ctor">
            <summary>
            Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance.
            </summary>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
            <summary>
            Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance.
            </summary>
            <param name="trackAllValues">Whether to track all values set on the instance and expose them through the Values property.</param>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
            <summary>
            Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance with the
            specified <paramref name="valueFactory"/> function.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce a lazily-initialized value when 
            an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value"/> without it having been previously initialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueFactory"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes the <see cref="T:System.Threading.ThreadLocal`1"/> instance with the
            specified <paramref name="valueFactory"/> function.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce a lazily-initialized value when 
            an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value"/> without it having been previously initialized.
            </param>
            <param name="trackAllValues">Whether to track all values set on the instance and expose them via the Values property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueFactory"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.Finalize">
            <summary>
            Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.
            </summary>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.Dispose">
            <summary>
            Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ThreadLocal{T}"/>, this method is not thread-safe.
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this <see cref="T:System.Threading.ThreadLocal{T}" /> instance.
            </summary>
            <param name="disposing">
            A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.ThreadLocal`1.Dispose"/>.
            </param>
            <remarks>
            Unlike most of the members of <see cref="T:System.Threading.ThreadLocal{T}"/>, this method is not thread-safe.
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.ToString">
            <summary>Creates and returns a string representation of this instance for the current thread.</summary>
            <returns>The result of calling <see cref="M:System.Object.ToString"/> on the <see cref="P:System.Threading.ThreadLocal`1.Value"/>.</returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:System.Threading.ThreadLocal`1.Value"/> for the current thread is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The initialization function referenced <see cref="P:System.Threading.ThreadLocal`1.Value"/> in an improper manner.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
            <remarks>
            Calling this method forces initialization for the current thread, as is the
            case with accessing <see cref="P:System.Threading.ThreadLocal`1.Value"/> directly.
            </remarks>
        </member>
        <member name="P:System.Threading.ThreadLocal`1.Value">
            <summary>
            Gets or sets the value of this instance for the current thread.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The initialization function referenced <see cref="P:System.Threading.ThreadLocal`1.Value"/> in an improper manner.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
            <remarks>
            If this instance was not previously initialized for the current thread,
            accessing <see cref="P:System.Threading.ThreadLocal`1.Value"/> will attempt to initialize it. If an initialization function was 
            supplied during the construction, that initialization will happen by invoking the function 
            to retrieve the initial value for <see cref="P:System.Threading.ThreadLocal`1.Value"/>.  Otherwise, the default value of 
            <typeparamref name="T"/> will be used.
            </remarks>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.CreateLinkedSlot(System.Threading.ThreadLocal{`0}.LinkedSlotVolatile[],System.Int32,`0)">
            <summary>
            Creates a LinkedSlot and inserts it into the linked list for this ThreadLocal instance.
            </summary>
        </member>
        <member name="P:System.Threading.ThreadLocal`1.Values">
            <summary>
            Gets a list for all of the values currently stored by all of the threads that have accessed this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.GetValuesAsList">
            <summary>Gets all of the threads' values in a list.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocal`1.ValuesCountForDebugDisplay">
            <summary>Gets the number of threads that have data in this instance.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocal`1.IsValueCreated">
            <summary>
            Gets whether <see cref="P:System.Threading.ThreadLocal`1.Value"/> is initialized on the current thread.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.ThreadLocal`1"/> instance has been disposed.
            </exception>
        </member>
        <member name="P:System.Threading.ThreadLocal`1.ValueForDebugDisplay">
            <summary>Gets the value of the ThreadLocal&lt;T&gt; for debugging display purposes. It takes care of getting
            the value for the current thread in the ThreadLocal mode.</summary>
        </member>
        <member name="P:System.Threading.ThreadLocal`1.ValuesForDebugDisplay">
            <summary>Gets the values of all threads that accessed the ThreadLocal&lt;T&gt;.</summary>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.GrowTable(System.Threading.ThreadLocal{`0}.LinkedSlotVolatile[]@,System.Int32)">
            <summary>
            Resizes a table to a certain length (or larger).
            </summary>
        </member>
        <member name="M:System.Threading.ThreadLocal`1.GetNewTableSize(System.Int32)">
            <summary>
            Chooses the next larger table size
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocal`1.LinkedSlotVolatile">
            <summary>
            A wrapper struct used as LinkedSlotVolatile[] - an array of LinkedSlot instances, but with volatile semantics
            on array accesses.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocal`1.LinkedSlot">
            <summary>
            A node in the doubly-linked list stored in the ThreadLocal instance.
            
            The value is stored in one of two places:
            
                1. If SlotArray is not null, the value is in SlotArray.Table[id]
                2. If SlotArray is null, the value is in FinalValue.
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocal`1.IdManager">
            <summary>
            A manager class that assigns IDs to ThreadLocal instances
            </summary>
        </member>
        <member name="T:System.Threading.ThreadLocal`1.FinalizationHelper">
            <summary>
            A class that facilitates ThreadLocal cleanup after a thread exits.
            
            After a thread with an associated thread-local table has exited, the FinalizationHelper 
            is responsible for removing back-references to the table. Since an instance of FinalizationHelper 
            is only referenced from a single thread-local slot, the FinalizationHelper will be GC'd once
            the thread has exited.
            
            The FinalizationHelper then locates all LinkedSlot instances with back-references to the table
            (all those LinkedSlot instances can be found by following references from the table slots) and
            releases the table so that it can get GC'd.
            </summary>
        </member>
        <member name="T:System.Threading.SystemThreading_ThreadLocalDebugView`1">
            <summary>A debugger view of the ThreadLocal&lt;T&gt; to surface additional debugging properties and 
            to ensure that the ThreadLocal&lt;T&gt; does not become initialized if it was not already.</summary>
        </member>
        <member name="M:System.Threading.SystemThreading_ThreadLocalDebugView`1.#ctor(System.Threading.ThreadLocal{`0})">
            <summary>Constructs a new debugger view object for the provided ThreadLocal object.</summary>
            <param name="tlocal">A ThreadLocal object to browse in the debugger.</param>
        </member>
        <member name="P:System.Threading.SystemThreading_ThreadLocalDebugView`1.IsValueCreated">
            <summary>Returns whether the ThreadLocal object is initialized or not.</summary>
        </member>
        <member name="P:System.Threading.SystemThreading_ThreadLocalDebugView`1.Value">
            <summary>Returns the value of the ThreadLocal object.</summary>
        </member>
        <member name="P:System.Threading.SystemThreading_ThreadLocalDebugView`1.Values">
            <summary>Return all values for all threads that have accessed this instance.</summary>
        </member>
        <member name="T:System.Threading.TimeoutHelper">
            <summary>
            A helper class to capture a start time using Environment.TickCout as a time in milliseconds, also updates a given timeout bu subtracting the current time from
            the start time
            </summary>
        </member>
        <member name="M:System.Threading.TimeoutHelper.GetTime">
            <summary>
            Returns the Environment.TickCount as a start time in milliseconds as a uint, TickCount tools over from positive to negative every ~ 25 days
            then ~25 days to back to positive again, uint is sued to ignore the sign and double the range to 50 days
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Threading.TimeoutHelper.UpdateTimeOut(System.UInt32,System.Int32)">
            <summary>
            Helper function to measure and update the elapsed time
            </summary>
            <param name="startTime"> The first time (in milliseconds) observed when the wait started</param>
            <param name="originalWaitMillisecondsTimeout">The original wait timeout in milliseconds</param>
            <returns>The new wait time in milliseconds, -1 if the time expired</returns>
        </member>
        <member name="T:System.Threading.Volatile">
            <summary>
            Methods for accessing memory with volatile semantics.
            </summary>
        </member>
        <member name="T:System.Threading.WaitHandle2">
            <summary>
            Provides means to wait for multiple handles.
            </summary>
        </member>
        <member name="F:System.Threading.WaitHandle2.WaitTimeout">
            <summary>
            Indicates that a <see cref="M:System.Threading.WaitHandle2.WaitAny(System.Threading.WaitHandle[],System.Int32)"/> operation
            timed out before any of the wait handles were signaled.
            </summary>
        </member>
        <member name="M:System.Threading.WaitHandle2.WaitAll(System.Threading.WaitHandle[])">
            <summary>
            Waits for all the elements in the specified array to receive a
            signal.
            </summary>
            <param name="waitHandles">
            A WaitHandle array containing the objects for which the current
            instance will wait.
            </param>
            <returns>
            True when every element in waitHandles has received a signal; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="waitHandles"/> parameter is null, or one or
            more of the objects in the <paramref name="waitHandles"/> array
            is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The number of objects in <paramref name="waitHandles"/> is greater
            than the system permits.
            </exception>
            <exception cref="T:System.ArgumentException">
            waitHandles is an array with no elements.
            </exception>
        </member>
        <member name="M:System.Threading.WaitHandle2.WaitAll(System.Threading.WaitHandle[],System.Int32)">
            <summary>
            Waits for all the elements in the specified array to receive a
            signal, using a 32-bit signed integer to specify the time interval.
            </summary>
            <param name="waitHandles">
            A WaitHandle array containing the objects for which the current
            instance will wait.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>
            to wait indefinitely.
            </param>
            <returns>
            True when every element in waitHandles has received a signal; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="waitHandles"/> parameter is null, or one or
            more of the objects in the <paramref name="waitHandles"/> array
            is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The number of objects in <paramref name="waitHandles"/> is greater
            than the system permits.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other
            than -1, which represents an infinite time-out.
            </exception>
            <exception cref="T:System.ArgumentException">
            waitHandles is an array with no elements.
            </exception>
        </member>
        <member name="M:System.Threading.WaitHandle2.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
            <summary>
            Waits for all the elements in the specified array to receive a
            signal, using a <see cref="T:System.TimeSpan"/> value to specify the time
            interval.
            </summary>
            <param name="waitHandles">
            A WaitHandle array containing the objects for which the current
            instance will wait.
            </param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1
            milliseconds to wait indefinitely.
            </param>
            <returns>
            True when every element in waitHandles has received a signal; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="waitHandles"/> parameter is null, or one or
            more of the objects in the <paramref name="waitHandles"/> array
            is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The number of objects in <paramref name="waitHandles"/> is greater
            than the system permits.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1,
            which represents an infinite time-out, or
            <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            waitHandles is an array with no elements.
            </exception>
        </member>
        <member name="M:System.Threading.WaitHandle2.WaitAny(System.Threading.WaitHandle[])">
            <summary>
            Waits for any of the elements in the specified array to receive a
            signal.
            </summary>
            <param name="waitHandles">
            A WaitHandle array containing the objects for which the current
            instance will wait.
            </param>
            <returns>
            The array index of the object that satisfied the wait.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="waitHandles"/> parameter is null, or one or
            more of the objects in the <paramref name="waitHandles"/> array
            is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The number of objects in <paramref name="waitHandles"/> is greater
            than the system permits.
            </exception>
            <exception cref="T:System.ArgumentException">
            waitHandles is an array with no elements.
            </exception>
        </member>
        <member name="M:System.Threading.WaitHandle2.WaitAny(System.Threading.WaitHandle[],System.Int32)">
            <summary>
            Waits for any of the elements in the specified array to receive a
            signal, using a 32-bit signed integer to specify the time interval.
            </summary>
            <param name="waitHandles">
            A WaitHandle array containing the objects for which the current
            instance will wait.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>
            to wait indefinitely.
            </param>
            <returns>
            The array index of the object that satisfied the wait, or
            <see cref="F:System.Threading.WaitHandle2.WaitTimeout"/> if no object satisfied the wait and a
            time interval equivalent to <paramref name="millisecondsTimeout"/>
            has passed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="waitHandles"/> parameter is null, or one or
            more of the objects in the <paramref name="waitHandles"/> array
            is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The number of objects in <paramref name="waitHandles"/> is greater
            than the system permits.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other
            than -1, which represents an infinite time-out.
            </exception>
            <exception cref="T:System.ArgumentException">
            waitHandles is an array with no elements.
            </exception>
        </member>
        <member name="M:System.Threading.WaitHandle2.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
            <summary>
            Waits for any of the elements in the specified array to receive a
            signal, using a 32-bit signed integer to specify the time interval.
            </summary>
            <param name="waitHandles">
            A WaitHandle array containing the objects for which the current
            instance will wait.
            </param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1
            milliseconds to wait indefinitely.
            </param>
            <returns>
            The array index of the object that satisfied the wait, or
            <see cref="F:System.Threading.WaitHandle2.WaitTimeout"/> if no object satisfied the wait and a
            time interval equivalent to <paramref name="timeout"/>
            has passed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="waitHandles"/> parameter is null, or one or
            more of the objects in the <paramref name="waitHandles"/> array
            is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The number of objects in <paramref name="waitHandles"/> is greater
            than the system permits.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1,
            which represents an infinite time-out, or
            <paramref name="timeout"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            waitHandles is an array with no elements.
            </exception>
        </member>
        <member name="T:System.ITupleInternal">
            <summary>
            Helper so we can call some tuple methods recursively without knowing the underlying types.
            </summary>
        </member>
        <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.TupleExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Tuple"/> instances to interop with C# tuples features (deconstruction syntax, converting from and to <see cref="T:System.ValueTuple"/>).
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``1(System.Tuple{``0},``0@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 1 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``2(System.Tuple{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``3(System.Tuple{``0,``1,``2},``0@,``1@,``2@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``4(System.Tuple{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``5(System.Tuple{``0,``1,``2,``3,``4},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``6(System.Tuple{``0,``1,``2,``3,``4,``5},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 21 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 1 element.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 21 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 1 element.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 21 elements.
            </summary>
        </member>
        <member name="T:System.IValueTupleInternal">
            <summary>
            Helper so we can call some tuple methods recursively without knowing the underlying types.
            </summary>
        </member>
        <member name="T:System.ValueTuple">
            <summary>
            The ValueTuple types (from arity 0 to 8) comprise the runtime implementation that underlies tuples in C# and struct tuples in F#.
            Aside from created via language syntax, they are most easily created via the ValueTuple.Create factory methods.
            The System.ValueTuple types differ from the System.Tuple types in that:
            - they are structs rather than classes,
            - they are mutable rather than readonly, and
            - their members (such as Item1, Item2, etc) are fields rather than properties.
            </summary>
        </member>
        <member name="M:System.ValueTuple.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.ValueTuple"/>.</returns>
        </member>
        <member name="M:System.ValueTuple.Equals(System.ValueTuple)">
            <summary>Returns a value indicating whether this instance is equal to a specified value.</summary>
            <param name="other">An instance to compare to this instance.</param>
            <returns>true if <paramref name="other"/> has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.ValueTuple.CompareTo(System.ValueTuple)">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>()</c>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="M:System.ValueTuple.Create">
            <summary>Creates a new struct 0-tuple.</summary>
            <returns>A 0-tuple.</returns>
        </member>
        <member name="M:System.ValueTuple.Create``1(``0)">
            <summary>Creates a new struct 1-tuple, or singleton.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <returns>A 1-tuple (singleton) whose value is (item1).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``2(``0,``1)">
            <summary>Creates a new struct 2-tuple, or pair.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <returns>A 2-tuple (pair) whose value is (item1, item2).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``3(``0,``1,``2)">
            <summary>Creates a new struct 3-tuple, or triple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <returns>A 3-tuple (triple) whose value is (item1, item2, item3).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``4(``0,``1,``2,``3)">
            <summary>Creates a new struct 4-tuple, or quadruple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <returns>A 4-tuple (quadruple) whose value is (item1, item2, item3, item4).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>Creates a new struct 5-tuple, or quintuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <returns>A 5-tuple (quintuple) whose value is (item1, item2, item3, item4, item5).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>Creates a new struct 6-tuple, or sextuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <returns>A 6-tuple (sextuple) whose value is (item1, item2, item3, item4, item5, item6).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>Creates a new struct 7-tuple, or septuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <returns>A 7-tuple (septuple) whose value is (item1, item2, item3, item4, item5, item6, item7).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>Creates a new struct 8-tuple, or octuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <param name="item8">The value of the eighth component of the tuple.</param>
            <returns>An 8-tuple (octuple) whose value is (item1, item2, item3, item4, item5, item6, item7, item8).</returns>
        </member>
        <member name="T:System.ValueTuple`1">
            <summary>Represents a 1-tuple, or singleton, as a value type.</summary>
            <typeparam name="T1">The type of the tuple's only component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`1.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`1"/> instance's first component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`1"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
        </member>
        <member name="M:System.ValueTuple`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`1"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`1.Equals(System.ValueTuple{`0})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`1"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its field
            is equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`1.CompareTo(System.ValueTuple{`0})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`1"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`1.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`1"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`1"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1)</c>,
            where <c>Item1</c> represents the value of <see cref="F:System.ValueTuple`1.Item1"/>. If the field is <see langword="null"/>,
            it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`2">
            <summary>
            Represents a 2-tuple, or pair, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`2.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`2"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`2.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`2"/> instance's first component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`2"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="M:System.ValueTuple`2.Equals(System.Object)">
             <summary>
             Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified object.
             </summary>
             <param name="obj">The object to compare with this instance.</param>
             <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            
             <remarks>
             The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
             <list type="bullet">
                 <item><description>It is a <see cref="T:System.ValueTuple`2"/> value type.</description></item>
                 <item><description>Its components are of the same types as those of the current instance.</description></item>
                 <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
             </list>
             </remarks>
        </member>
        <member name="M:System.ValueTuple`2.Equals(System.ValueTuple{`0,`1})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
             <summary>
             Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified object based on a specified comparison method.
             </summary>
             <param name="other">The object to compare with this instance.</param>
             <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
             <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            
             <remarks>
             This member is an explicit interface member implementation. It can be used only when the
              <see cref="T:System.ValueTuple`2"/> instance is cast to an <see cref="T:System.Collections.IStructuralEquatable"/> interface.
            
             The <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation is called only if <c>other</c> is not <see langword="null"/>,
              and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <see cref="T:System.ValueTuple`2"/>
              whose components are of the same types as those of the current instance. The IStructuralEquatable.Equals(Object, IEqualityComparer) method
              first passes the <see cref="F:System.ValueTuple`2.Item1"/> values of the <see cref="T:System.ValueTuple`2"/> objects to be compared to the
              <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation. If this method call returns <see langword="true"/>, the method is
              called again and passed the <see cref="F:System.ValueTuple`2.Item2"/> values of the two <see cref="T:System.ValueTuple`2"/> instances.
             </remarks>
        </member>
        <member name="M:System.ValueTuple`2.CompareTo(System.ValueTuple{`0,`1})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`2"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`2"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`2"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2)</c>,
            where <c>Item1</c> and <c>Item2</c> represent the values of the <see cref="F:System.ValueTuple`2.Item1"/>
            and <see cref="F:System.ValueTuple`2.Item2"/> fields. If either field value is <see langword="null"/>,
            it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`3">
            <summary>
            Represents a 3-tuple, or triple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`3.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`3.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`3.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's third component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`3"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
        </member>
        <member name="M:System.ValueTuple`3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`3"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`3.Equals(System.ValueTuple{`0,`1,`2})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`3"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`3.CompareTo(System.ValueTuple{`0,`1,`2})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`3.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`3"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`3.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`3"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`3"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`4">
            <summary>
            Represents a 4-tuple, or quadruple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`4.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's fourth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`4"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
        </member>
        <member name="M:System.ValueTuple`4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`4"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`4.Equals(System.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`4"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`4.CompareTo(System.ValueTuple{`0,`1,`2,`3})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`4.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`4"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`4.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`4"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`4"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`5">
            <summary>
            Represents a 5-tuple, or quintuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`5.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's fifth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`5"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
        </member>
        <member name="M:System.ValueTuple`5.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`5"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`5.Equals(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`5"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`5.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`5.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`5"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`5.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`5"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`5"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`6">
            <summary>
            Represents a 6-tuple, or sixtuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`6.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's sixth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`6"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
        </member>
        <member name="M:System.ValueTuple`6.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`6"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`6.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`6"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`6.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`6.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`6"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`6.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`6"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`6"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`7">
            <summary>
            Represents a 7-tuple, or sentuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`7.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's sixth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item7">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's seventh component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`7"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
            <param name="item7">The value of the tuple's seventh component.</param>
        </member>
        <member name="M:System.ValueTuple`7.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`7"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`7.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`7"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`7.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`7.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`7"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`7.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`7"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`7"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6, Item7)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.ValueTuple`8">
            <summary>
            Represents an 8-tuple, or octuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="TRest">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`8.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's sixth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item7">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's seventh component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Rest">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's eighth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`8"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
            <param name="item7">The value of the tuple's seventh component.</param>
            <param name="rest">The value of the tuple's eight component.</param>
        </member>
        <member name="M:System.ValueTuple`8.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`8"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`8.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`8"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`8.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`8.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`8"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`8.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`8"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`8"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6, Item7, Rest)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length">
            <summary>
            The number of positions in this data structure.
            </summary>
        </member>
        <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
            <summary>
            Get the element at position <param name="index"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Input.ICommand">
            <summary>
            An interface that allows an application author to define a method to be invoked.
            </summary>
        </member>
        <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
            <summary>
            Raised when the ability of the command to execute has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
            <summary>
            Returns whether the command can be executed.
            </summary>
            <param name="parameter">A parameter that may be used in executing the command. This parameter may be ignored by some implementations.</param>
            <returns>true if the command can be executed with the given parameter and current state. false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
            <summary>
            Defines the method that should be executed when the command is executed.
            </summary>
            <param name="parameter">A parameter that may be used in executing the command. This parameter may be ignored by some implementations.</param>
        </member>
    </members>
</doc>
