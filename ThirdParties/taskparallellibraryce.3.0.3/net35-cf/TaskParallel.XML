<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskParallel</name>
    </assembly>
    <members>
        <member name="T:System.AggregateException">
            <summary>Represents one or more errors that occur during application execution.</summary>
            <remarks>
            <see cref="T:System.AggregateException"/> is used to consolidate multiple failures into a single, throwable
            exception object.
            </remarks>
        </member>
        <member name="M:System.AggregateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class.
            </summary>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerException"/> argument
            is null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Allocates a new aggregate exception with the specified message and list of inner exceptions.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.GetBaseException">
            <summary>
            Returns the <see cref="T:System.AggregateException"/> that is the root cause of this exception.
            </summary>
        </member>
        <member name="P:System.AggregateException.InnerExceptions">
            <summary>
            Gets a read-only collection of the <see cref="T:System.Exception"/> instances that caused the
            current exception.
            </summary>
        </member>
        <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
            <summary>
            Invokes a handler on each <see cref="T:System.Exception"/> contained by this <see
            cref="T:System.AggregateException"/>.
            </summary>
            <param name="predicate">The predicate to execute for each exception. The predicate accepts as an
            argument the <see cref="T:System.Exception"/> to be processed and returns a Boolean to indicate
            whether the exception was handled.</param>
            <remarks>
            Each invocation of the <paramref name="predicate"/> returns true or false to indicate whether the
            <see cref="T:System.Exception"/> was handled. After all invocations, if any exceptions went
            unhandled, all unhandled exceptions will be put into a new <see cref="T:System.AggregateException"/>
            which will be thrown. Otherwise, the <see cref="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})"/> method simply returns. If any
            invocations of the <paramref name="predicate"/> throws an exception, it will halt the processing
            of any more exceptions and immediately propagate the thrown exception as-is.
            </remarks>
            <exception cref="T:System.AggregateException">An exception contained by this <see
            cref="T:System.AggregateException"/> was not handled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> argument is
            null.</exception>
        </member>
        <member name="M:System.AggregateException.Flatten">
            <summary>
            Flattens an <see cref="T:System.AggregateException"/> instances into a single, new instance.
            </summary>
            <returns>A new, flattened <see cref="T:System.AggregateException"/>.</returns>
            <remarks>
            If any inner exceptions are themselves instances of
            <see cref="T:System.AggregateException"/>, this method will recursively flatten all of them. The
            inner exceptions returned in the new <see cref="T:System.AggregateException"/>
            will be the union of all of the the inner exceptions from exception tree rooted at the provided
            <see cref="T:System.AggregateException"/> instance.
            </remarks>
        </member>
        <member name="M:System.AggregateException.ToString">
            <summary>
            Creates and returns a string representation of the current <see cref="T:System.AggregateException"/>.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="P:System.AggregateException.InnerExceptionCount">
            <summary>
            This helper property is used by the DebuggerDisplay.
            
            Note that we don't want to remove this property and change the debugger display to {InnerExceptions.Count} 
            because DebuggerDisplay should be a single property access or parameterless method call, so that the debugger 
            can use a fast path without using the expression evaluator.
            
            See http://msdn.microsoft.com/en-us/library/x810d419.aspx
            </summary>
        </member>
        <member name="T:System.Threading.SendOrPostCallback">
            <summary>
            Represents a method to be called when a message is to be dispatched to
            a synchronization context.
            </summary>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:System.Threading.SynchronizationContext">
            <summary>
            Provides the basic functionality for propagating a synchronization
            context in various synchronization models.
            </summary>
        </member>
        <member name="M:System.Threading.SynchronizationContext.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Threading.SynchronizationContext"/> class.
            </summary>
        </member>
        <member name="P:System.Threading.SynchronizationContext.Current">
            <summary>
            Gets the synchronization context for the current thread.
            </summary>
        </member>
        <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            Sets the current synchronization context.
            </summary>
            <param name="syncContext">
            The <see cref="T:System.Threading.SynchronizationContext"/> object to be set.
            </param>
        </member>
        <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches a synchronous
            message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches an asynchronous
            message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:System.Threading.SynchronizationContext.CreateCopy">
            <summary>
            When overridden in a derived class, creates a copy of the
            synchronization context.
            </summary>
            <returns>A new <see cref="T:System.Threading.SynchronizationContext"/> object.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Compatibility.TaskEx">
            <summary>
            Provides methods for creating and manipulating tasks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed successfully with the specified result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.FromException``1(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed exceptionally with the specified exception.</summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.Run(System.Action)">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a Task handle for that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <returns>A Task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a
            <see cref="T:System.Threading.Tasks.Task`1"/> handle for that work.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the work queued to execute in the ThreadPool.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a proxy for the
            Task returned by <paramref name="function"/>.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task that represents a proxy for the Task returned by <paramref name="function"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a proxy for the
            Task(TResult) returned by <paramref name="function"/>.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy Task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.Delay(System.TimeSpan)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="delay">The time span to wait before completing the returned Task</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="delay"/> is less than -1 or greater than Int32.MaxValue.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.Delay(System.Int32)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned Task</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="millisecondsDelay"/> is less than -1.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task.
            </exception>       
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Compatibility.TaskEx.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task, or was empty.
            </exception>
        </member>
        <member name="T:System.Threading.Tasks.Task`1">
            <summary>
            Represents an asynchronous operation that produces a result at some time in the future.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </typeparam>
        </member>
        <member name="P:System.Threading.Tasks.Task`1.Result">
            <summary>
            Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <remarks>
            The get accessor for this property ensures that the asynchronous operation is complete before
            returning. Once the result of the computation is available, it is stored and will be returned
            immediately on later calls to <see cref="P:System.Threading.Tasks.Task`1.Result"/>.
            </remarks>
            <exception cref="T:System.AggregateException">An exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task`1"/>.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(`0,System.Exception)">
            <summary>
            Internal constructor to create an already-completed task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task`1"/> with the specified function and state.
            </summary>
            <param name="function">
            The delegate that represents the code to execute in the task. When the function has completed,
            the task's <see cref="P:System.Threading.Tasks.Task`1.Result"/> property will be set to return the result value of the function.
            </param>
            <param name="state">An object representing data to be used by the action.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="function"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Delegate,System.Object,System.Threading.Tasks.Task)">
            <summary>
            Internal constructor to allow creation of continue tasks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.ExecuteTaskAction">
            <summary>
            Unbox task action and execute it.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.Task">
            <summary>
            Represents an asynchronous operation.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task._action">
            <summary>
            The body of the task. Might be <see cref="T:System.Action"/>,
            <see cref="T:System.Action`1"/>, <see cref="T:System.Func`1"/> or
            <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task._stateObject">
            <summary>
            A state object that can be optionally supplied, passed to action.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task._exceptions">
            <summary>
            A set of exceptions occurred when trying to execute current task.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task._taskCompletedEvent">
            <summary>
            A thread-safe event which notifies that current task is completed its execution.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Task._continueSource">
            <summary>
            The source which current task continues
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.CompletedTask">
            <summary>
            Gets a task that's already been completed successfully.
            </summary>
            <remarks>
            May not always return the same instance.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.Exception">
            <summary>
            Gets the <see cref="T:System.AggregateException">Exception</see> that caused the <see
            cref="T:System.Threading.Tasks.Task">Task</see> to end prematurely. If the <see
            cref="T:System.Threading.Tasks.Task">Task</see> completed successfully or has not yet thrown any
            exceptions, this will return null.
            </summary>
            <remarks>
            Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a
            <see cref="T:System.AggregateException"/> in calls to <see cref="M:System.Threading.Tasks.Task.Wait">Wait</see>
            or in accesses to the <see cref="P:System.Threading.Tasks.Task.Exception"/> property.  Any exceptions not observed by the time
            the Task instance is garbage collected will be propagated on the finalizer thread.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.Id">
            <summary>
            Gets a unique ID for this <see cref="T:System.Threading.Tasks.Task">Task</see> instance.
            </summary>
            <remarks>
            Task IDs are assigned on-demand and do not necessarily represent the order in the which Task
            instances were created.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.IsCompleted">
            <summary>
            Gets whether this <see cref="T:System.Threading.Tasks.Task">Task</see> has completed.
            </summary>
            <remarks>
            <see cref="P:System.Threading.Tasks.Task.IsCompleted"/> will return true when the Task is in one of the three
            final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion">RanToCompletion</see>,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">Faulted</see>, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled">Canceled</see>.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.IsFaulted">
            <summary>
            Gets whether the <see cref="T:System.Threading.Tasks.Task"/> completed due to an unhandled exception.
            </summary>
            <remarks>
            If <see cref="P:System.Threading.Tasks.Task.IsFaulted"/> is true, the Task's <see cref="P:System.Threading.Tasks.Task.Status"/> will be equal to
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted">TaskStatus.Faulted</see>, and its
            <see cref="P:System.Threading.Tasks.Task.Exception"/> property will be non-null.
            </remarks>
        </member>
        <member name="P:System.Threading.Tasks.Task.Factory">
            <summary>
            Provides access to factory methods for creating
            <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>
            instances.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.Status">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskStatus">TaskStatus</see> of this Task. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor">
            <summary>
            Internal constructor to create an empty task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Exception)">
            <summary>
            Internal constructor to create an already-completed task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Delegate,System.Object,System.Threading.Tasks.Task)">
            <summary>
            Internal constructor to allow creation of continue tasks.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action.
            </summary>
            <param name="action">The delegate that represents the code to execute in the Task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            Initializes a new <see cref="T:System.Threading.Tasks.Task"/> with the specified action and state.
            </summary>
            <param name="action">The delegate that represents the code to execute in the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Finalize">
            <summary>
            Destructor to enforces disposal of unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.EnsureStartOnce">
            <summary>
            Throws an exception when called more than once.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.Start">
            <summary>
            Starts the <see cref="T:System.Threading.Tasks.Task"/>, scheduling it for execution to the current <see
            cref="T:System.Threading.ThreadPool">ThreadPool</see>.
            </summary>
            <remarks>
            A task may only be started and run only once.  Any attempts to schedule a task a second time
            will result in an exception.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Threading.Tasks.Task"/> is already been started.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Threading.Tasks.Task"/> could not be enqueued for execution.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.TaskStartAction(System.Object)">
            <summary>
            Executes the action designed for current task.
            </summary>
            <param name="stateObject">Ignored.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.ExecuteTaskAction">
            <summary>
            Unbox task action and execute it.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.RunSynchronously">
            <summary>
            Runs the <see cref="T:System.Threading.Tasks.Task"/> synchronously on the current <see cref="T:System.Threading.Thread"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Threading.Tasks.Task"/> is already been started.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution.
            </summary>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution
            within a specified time interval.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to
            wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <returns>
            true if the <see cref="T:System.Threading.Tasks.Task"/> completed execution within
            the allotted time; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            timeout is a negative number other than -1 milliseconds, which
            represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
            <summary>
            Waits for the System.Threading.Tasks.Task to complete execution
            within a specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or
            System.Threading.Timeout.Infinite (-1) to wait indefinitely.
            </param>
            <returns>
            true if the System.Threading.Tasks.Task completed execution within
            the allotted time; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            millisecondsTimeout is a negative number other than -1, which
            represents an infinite time-out.
            </exception>
            <exception cref="T:System.AggregateException">
            An exception was thrown during the execution of the
            System.Threading.Tasks.Task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.BeginWait(System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous wait.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.BeginWait(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution.
            </summary>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original
            context captured; otherwise, false.
            </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous wait.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.BeginWait(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution
            within a specified time interval.
            </summary>
            <param name="timeout">
            A System.TimeSpan that represents the number of milliseconds to
            wait, or a System.TimeSpan that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous wait.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.BeginWait(System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution
            within a specified time interval.
            </summary>
            <param name="timeout">
            A System.TimeSpan that represents the number of milliseconds to
            wait, or a System.TimeSpan that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original
            context captured; otherwise, false.
            </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous wait.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.BeginWait(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution
            within a specified time interval.
            </summary>
            <param name="millisecondsTimeout">
            A System.TimeSpan that represents the number of milliseconds to
            wait, or a System.TimeSpan that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous wait.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.BeginWait(System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Waits asynchronously for the <see cref="T:System.Threading.Tasks.Task"/> to complete execution
            within a specified time interval.
            </summary>
            <param name="millisecondsTimeout">
            A System.TimeSpan that represents the number of milliseconds to
            wait, or a System.TimeSpan that represents -1 milliseconds to wait
            indefinitely.
            </param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original
            context captured; otherwise, false.
            </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="stateObject">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous wait.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.EndWait(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous wait.
            </summary>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> that stores state information for this asynchronous operation.
            </param>
            <returns>
            true if the <see cref="T:System.Threading.Tasks.Task"/> completed execution within
            the allotted time; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncResult"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="asyncResult"/> was not returned by a call to the <see cref="M:System.Threading.Tasks.Task.BeginWait(System.AsyncCallback,System.Object)"/> method.
            </exception>
            <exception cref="T:System.InvalidOperationException">Error waiting for <see cref="T:System.Threading.WaitHandle"/> signal.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Dispose">
            <summary>
            Disposes the <see cref="T:System.Threading.Tasks.Task"/>, releasing all of its unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:System.Threading.Tasks.Task"/>, releasing all of its unmanaged resources.
            </summary>
            <param name="disposing">
            A Boolean value that indicates whether this method is being called
            due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose"/>.
            </param>
        </member>
        <member name="P:System.Threading.Tasks.Task.AsyncState">
            <summary>
            Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task">Task</see> was created,
            or null if none was supplied.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait for the task to
            complete.
            </summary>
            <remarks>
            Using the wait functionality provided by <see cref="M:System.Threading.Tasks.Task.Wait"/>
            should be preferred over using <see cref="P:System.IAsyncResult.AsyncWaitHandle"/> for similar
            functionality.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Threading.Tasks.Task"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value>true if the asynchronous operation completed synchronously; otherwise, false.</value>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <param name="continuationAction">
            An action to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task as an argument.
            </param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationAction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <param name="continuationAction">
            An action to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task as and the caller-supplied state object as arguments.
            </param>
            <param name="state">An object representing data to be used by the continuation action.</param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationAction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the continuation.
            </typeparam>
            <param name="continuationFunction">
            A function to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task as an argument.
            </param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task`1"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationFunction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
            <summary>
            Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task"/> completes.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the continuation.
            </typeparam>
            <param name="continuationFunction">
            A function to run when the <see cref="T:System.Threading.Tasks.Task"/> completes. When run, the delegate will be
            passed the completed task and the caller-supplied state object as arguments.
            </param>
            <param name="state">An object representing data to be used by the continuation function.</param>
            <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task`1"/> will not be scheduled for execution until the current task has
            completed, whether it completes due to running to completion successfully, faulting due to an
            unhandled exception, or exiting out early due to being canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="continuationFunction"/> argument is null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.AggregateException">
            At least one of the <see cref="T:System.Threading.Tasks.Task"/> instances was canceled -or- an exception was thrown during
            the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"/> instances.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <returns>
            true if all of the <see cref="T:System.Threading.Tasks.Task"/> instances completed execution within the allotted time;
            otherwise, false.
            </returns>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see
            cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.AggregateException">
            At least one of the <see cref="T:System.Threading.Tasks.Task"/> instances was canceled -or- an exception was thrown during
            the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"/> instances.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents an
            infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <returns>
            true if all of the <see cref="T:System.Threading.Tasks.Task"/> instances completed execution within the allotted time;
            otherwise, false.
            </returns>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to
            wait indefinitely.</param>
            <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.AggregateException">
            At least one of the <see cref="T:System.Threading.Tasks.Task"/> instances was canceled -or- an exception was thrown during
            the execution of at least one of the <see cref="T:System.Threading.Tasks.Task"/> instances.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an
            infinite time-out.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <returns>The index of the completed task in the <paramref name="tasks"/> array argument.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, or a <see
            cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>
            The index of the completed task in the <paramref name="tasks"/> array argument, or -1 if the
            timeout occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> is a negative number other than -1 milliseconds, which represents an
            infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"/> objects to complete execution.
            </summary>
            <param name="tasks">
            An array of <see cref="T:System.Threading.Tasks.Task"/> instances on which to wait.
            </param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to
            wait indefinitely.
            </param>
            <returns>
            The index of the completed task in the <paramref name="tasks"/> array argument, or -1 if the
            timeout occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> argument contains a null element.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an
            infinite time-out.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed
            successfully with the specified result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed exceptionally with the specified exception.</summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed exceptionally with the specified exception.</summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a Task handle for that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <returns>A Task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="action"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task(TResult) that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a proxy for the
            Task returned by <paramref name="function"/>.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task that represents a proxy for the Task returned by <paramref name="function"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the ThreadPool and returns a proxy for the
            Task(TResult) returned by <paramref name="function"/>.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy Task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by <paramref name="function"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="function"/> parameter was null.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="delay">The time span to wait before completing the returned Task</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="delay"/> is less than -1 or greater than Int32.MaxValue.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
            <summary>
            Creates a Task that will complete after a time delay.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned Task</param>
            <returns>A Task that represents the time delay</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="millisecondsDelay"/> is less than -1.
            </exception>
            <remarks>
            After the specified time delay, the Task is completed in RanToCompletion state.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task.
            </exception>       
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when all of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of all of the supplied tasks.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> collection contained a null task, or was empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when any of the supplied tasks have completed.
            </summary>
            <param name="tasks">The tasks to wait on for completion.</param>
            <returns>A task that represents the completion of one of the supplied tasks.  The return Task's Result is the task that completed.</returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="tasks"/> argument was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="tasks"/> array contained a null task, or was empty.
            </exception>
        </member>
        <member name="T:System.Threading.Tasks.TaskFactory">
            <summary>
            Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task"/> objects.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
            <summary>
            Initializes a <see cref="T:System.Threading.Tasks.TaskFactory"/> instance with the default configuration.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
            <summary>
            Creates and starts a task.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <returns>The started task.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="action">The action delegate to execute asynchronously.</param>
            <param name="state">An object containing data to be used by the <paramref name="action"/> delegate.</param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="function">
            A function delegate that returns the future result to be available
            through the <see cref="T:System.Threading.Tasks.Task`1"/>.
            </param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">
            The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1"/>.
            </typeparam>
            <param name="function">
            A function delegate that returns the future result to be available
            through the <see cref="T:System.Threading.Tasks.Task`1"/>.
            </param>
            <param name="state">
            An object containing data to be used by the <paramref name="function"/> delegate.
            </param>
            <returns>The started <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="T:System.Threading.Tasks.TaskStatus">
            <summary>
            Represents the current stage in the lifecycle of a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Created">
            <summary> 
            The task has been initialized but has not yet been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary> 
            The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running but has not yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task has finished executing and is implicitly waiting for
            attached child tasks to complete.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task completed execution successfully.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken
            while the token was in signaled state, or the task's CancellationToken was already signaled before the
            task started executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="T:System.Threading.Compatibility.ThreadEx">
            <summary>
            Provides a portable <see cref="M:System.Threading.Compatibility.ThreadEx.Sleep(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:System.Threading.Compatibility.ThreadEx.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds for which the thread is blocked.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"/>.
            </exception>
        </member>
        <member name="T:System.Threading.SpinWait">
            <summary>
            Provides support for spin-based waiting.
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Threading.SpinWait"/> encapsulates common spinning logic. On single-processor machines, yields are
            always used instead of busy waits, and on computers with Intel™ processors employing Hyper-Threading™
            technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of
            spinning and true yielding.
            </para>
            <para>
            <see cref="T:System.Threading.SpinWait"/> is a value type, which means that low-level code can utilize SpinWait without
            fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications.
            In most cases, you should use the synchronization classes provided by the .NET Framework, such as
            <see cref="T:System.Threading.Monitor"/>. For most purposes where spin waiting is required, however,
            the <see cref="T:System.Threading.SpinWait"/> type should be preferred over the <see cref="T:System.Threading.SpinWait"/> method.
            </para>
            <para>
            While SpinWait is designed to be used in concurrent applications, it is not designed to be
            used from multiple threads concurrently.  SpinWait's members are not thread-safe.  If multiple
            threads must spin, each should use its own instance of SpinWait.
            </para>
            </remarks>
        </member>
        <member name="P:System.Threading.SpinWait.Count">
            <summary>
            Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce"/> has been called on this instance.
            </summary>
        </member>
        <member name="P:System.Threading.SpinWait.NextSpinWillYield">
            <summary>
            Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce"/> will yield the processor, triggering a
            forced context switch.
            </summary>
            <value>Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce"/> will yield the processor, triggering a
            forced context switch.</value>
            <remarks>
            On a single-CPU machine, <see cref="M:System.Threading.SpinWait.SpinOnce"/> always yields the processor. On machines with
            multiple CPUs, <see cref="M:System.Threading.SpinWait.SpinOnce"/> may yield after an unspecified number of calls.
            </remarks>
        </member>
        <member name="M:System.Threading.SpinWait.SpinOnce">
            <summary>
            Performs a single spin.
            </summary>
            <remarks>
            This is typically called in a loop, and may change in behavior based on the number of times a
            <see cref="M:System.Threading.SpinWait.SpinOnce"/> has been called thus far on this instance.
            </remarks>
        </member>
        <member name="M:System.Threading.SpinWait.Reset">
            <summary>
            Resets the spin counter.
            </summary>
            <remarks>
            This makes <see cref="M:System.Threading.SpinWait.SpinOnce"/> and <see cref="P:System.Threading.SpinWait.NextSpinWillYield"/> behave as though no calls
            to <see cref="M:System.Threading.SpinWait.SpinOnce"/> had been issued on this instance. If a <see cref="T:System.Threading.SpinWait"/> instance
            is reused many times, it may be useful to reset it to avoid yielding too soon.
            </remarks>
        </member>
        <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
            <summary>
            Spins until the specified condition is satisfied.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns true.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="condition"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
            <summary>
            Spins until the specified condition is satisfied or until the specified timeout is expired.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns true.</param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait, 
            or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <returns>True if the condition is satisfied within the timeout; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="condition"/> argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is a negative number
            other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than
            <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
            <summary>
            Spins until the specified condition is satisfied or until the specified timeout is expired.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns true.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see
            cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>True if the condition is satisfied within the timeout; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="condition"/> argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout"/> is a
            negative number other than -1, which represents an infinite time-out.</exception>
        </member>
        <member name="T:System.Threading.PlatformHelper">
            <summary>
            A helper class to get the number of processors, it updates the numbers of processors every sampling interval.
            </summary>
        </member>
        <member name="P:System.Threading.PlatformHelper.ProcessorCount">
            <summary>
            Gets the number of available processors
            </summary>
        </member>
        <member name="P:System.Threading.PlatformHelper.IsSingleProcessor">
            <summary>
            Gets whether the current machine has only a single processor.
            </summary>
        </member>
        <member name="T:System.Threading.TimeoutHelper">
            <summary>
            A helper class to capture a start time using Environment.TickCout as a time in milliseconds, also updates a given timeout bu subtracting the current time from
            the start time
            </summary>
        </member>
        <member name="M:System.Threading.TimeoutHelper.GetTime">
            <summary>
            Returns the Environment.TickCount as a start time in milliseconds as a uint, TickCount tools over from postive to negative every ~ 25 days
            then ~25 days to back to positive again, uint is sued to ignore the sign and double the range to 50 days
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Threading.TimeoutHelper.UpdateTimeOut(System.UInt32,System.Int32)">
            <summary>
            Helper function to measure and update the elapsed time
            </summary>
            <param name="startTime"> The first time (in milliseconds) observed when the wait started</param>
            <param name="originalWaitMillisecondsTimeout">The orginal wait timeoutout in milliseconds</param>
            <returns>The new wait time in milliseconds, -1 if the time expired</returns>
        </member>
        <member name="T:System.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.AggregateException_ctor_DefaultMessage">
            <summary>
              Looks up a localized string similar to One or more errors occurred..
            </summary>
        </member>
        <member name="P:System.Properties.Resources.AggregateException_ctor_InnerExceptionNull">
            <summary>
              Looks up a localized string similar to An element of innerExceptions was null..
            </summary>
        </member>
        <member name="P:System.Properties.Resources.AggregateException_DeserializationFailure">
            <summary>
              Looks up a localized string similar to The serialization stream contains no inner exceptions..
            </summary>
        </member>
        <member name="P:System.Properties.Resources.AggregateException_ToString">
            <summary>
              Looks up a localized string similar to {0}{1}---&gt; (Inner Exception #{2}) {3}{4}{5}.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.SpinWait_SpinUntil_TimeoutWrong">
            <summary>
              Looks up a localized string similar to The timeout must represent a value between -1 and Int32.MaxValue, inclusive..
            </summary>
        </member>
        <member name="M:Consts.GetTypeInfo(System.Type)">
            <summary>
            Gets the type itself (for Resource compatibility).
            </summary>
            <param name="type">A type.</param>
            <returns>The type itself.</returns>
        </member>
    </members>
</doc>
